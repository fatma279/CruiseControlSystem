
Cruise_Control_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003bb0  00003c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080018a  0080018a  00003d6e  2**0
                  ALLOC
  3 .stab         00003960  00000000  00000000  00003d70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a8c  00000000  00000000  000076d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000915c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000092fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000094ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b8f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cc7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000de58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__vector_1>
       8:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__vector_2>
       c:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__vector_10>
      2c:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <main>
      8a:	0c 94 d6 1d 	jmp	0x3bac	; 0x3bac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 1d 	jmp	0x3a7e	; 0x3a7e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 1d 	jmp	0x3a46	; 0x3a46 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 1d 	jmp	0x3a7e	; 0x3a7e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e7       	ldi	r22, 0x77	; 119
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4f 1d 	jmp	0x3a9e	; 0x3a9e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 58       	subi	r30, 0x81	; 129
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_UART_Void_UARTInit>:
#include "UART_Private.h"
#include "DIO_Interface.h"
#include "util/delay.h"

void M_UART_Void_UARTInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/* set pin tx as output and rx as input */
	M_DIO_Void_SetPinDirection(PD0_PIN , INPUT)  ;
     e36:	88 e2       	ldi	r24, 0x28	; 40
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PD1_PIN , OUTPUT) ;
     e3e:	89 e2       	ldi	r24, 0x29	; 41
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>

	SET_BIT(UCSRB_REG,RXEN_Bit);
     e46:	aa e2       	ldi	r26, 0x2A	; 42
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ea e2       	ldi	r30, 0x2A	; 42
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	80 61       	ori	r24, 0x10	; 16
     e52:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,TXEN_Bit);
     e54:	aa e2       	ldi	r26, 0x2A	; 42
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	ea e2       	ldi	r30, 0x2A	; 42
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	88 60       	ori	r24, 0x08	; 8
     e60:	8c 93       	st	X, r24

	UCSRC_REG |= (1 << URSEL_Bit)| (1 << UCSZ0_Bit) | (1 << UCSZ1_Bit);	// Write USCRC for 8 bit data and 1 stop bit
     e62:	a0 e4       	ldi	r26, 0x40	; 64
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e0 e4       	ldi	r30, 0x40	; 64
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	86 68       	ori	r24, 0x86	; 134
     e6e:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,UCSZ2_Bit);
	SET_BIT(UCSRC_REG,UCSZ1_Bit);
	SET_BIT(UCSRC_REG,UCSZ0_Bit);*/

	/* select boudrate [9600] */
	UBRRL_REG =(( F_OSC/(16UL * UART_BAUD_RATE))-1) ;
     e70:	e9 e2       	ldi	r30, 0x29	; 41
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	87 e6       	ldi	r24, 0x67	; 103
     e76:	80 83       	st	Z, r24
	/*
	 *  select Parity Mood
	 */
#if (UART_PARITY_MOOD == PARITY_DISABLE)
	CLR_BIT(UCSRC_REG,UPM0_Bit);
     e78:	a0 e4       	ldi	r26, 0x40	; 64
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e0 e4       	ldi	r30, 0x40	; 64
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	8f 7e       	andi	r24, 0xEF	; 239
     e84:	8c 93       	st	X, r24
	CLR_BIT(UCSRC_REG,UPM1_Bit);
     e86:	a0 e4       	ldi	r26, 0x40	; 64
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e0 e4       	ldi	r30, 0x40	; 64
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	8f 7d       	andi	r24, 0xDF	; 223
     e92:	8c 93       	st	X, r24
	SET_BIT(UCSRC_REG,UPM1_Bit);
#else
#error("error in UART PARITY MOOD")
#endif

	CLR_BIT(UCSRC_REG,USBS_Bit);
     e94:	a0 e4       	ldi	r26, 0x40	; 64
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e0 e4       	ldi	r30, 0x40	; 64
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	87 7f       	andi	r24, 0xF7	; 247
     ea0:	8c 93       	st	X, r24
}
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <M_UART_Void_UARTWrite>:

void M_UART_Void_UARTWrite(u8 Copy_UART_DataToSend)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <M_UART_Void_UARTWrite+0x6>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <M_UART_Void_UARTWrite+0x8>
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32_Counter = 0 ;
     eb8:	19 82       	std	Y+1, r1	; 0x01
     eba:	1a 82       	std	Y+2, r1	; 0x02
     ebc:	1b 82       	std	Y+3, r1	; 0x03
     ebe:	1c 82       	std	Y+4, r1	; 0x04
	UDR_REG = Copy_UART_DataToSend ;
     ec0:	ec e2       	ldi	r30, 0x2C	; 44
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	80 83       	st	Z, r24
     ec8:	18 c0       	rjmp	.+48     	; 0xefa <M_UART_Void_UARTWrite+0x52>

	while(Local_u32_Counter < UART_Polling_Time)
	{
		Local_u32_Counter++ ;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	ab 81       	ldd	r26, Y+3	; 0x03
     ed0:	bc 81       	ldd	r27, Y+4	; 0x04
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	a1 1d       	adc	r26, r1
     ed6:	b1 1d       	adc	r27, r1
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	9a 83       	std	Y+2, r25	; 0x02
     edc:	ab 83       	std	Y+3, r26	; 0x03
     ede:	bc 83       	std	Y+4, r27	; 0x04
		if(GET_BIT(UCSRA_REG,TXC_Bit) == UART_Complete_Transmiting)
     ee0:	eb e2       	ldi	r30, 0x2B	; 43
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	82 95       	swap	r24
     ee8:	86 95       	lsr	r24
     eea:	86 95       	lsr	r24
     eec:	83 70       	andi	r24, 0x03	; 3
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	81 70       	andi	r24, 0x01	; 1
     ef4:	90 70       	andi	r25, 0x00	; 0
     ef6:	88 23       	and	r24, r24
     ef8:	61 f4       	brne	.+24     	; 0xf12 <M_UART_Void_UARTWrite+0x6a>
void M_UART_Void_UARTWrite(u8 Copy_UART_DataToSend)
{
	u32 Local_u32_Counter = 0 ;
	UDR_REG = Copy_UART_DataToSend ;

	while(Local_u32_Counter < UART_Polling_Time)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	ab 81       	ldd	r26, Y+3	; 0x03
     f00:	bc 81       	ldd	r27, Y+4	; 0x04
     f02:	80 38       	cpi	r24, 0x80	; 128
     f04:	24 e8       	ldi	r18, 0x84	; 132
     f06:	92 07       	cpc	r25, r18
     f08:	2e e1       	ldi	r18, 0x1E	; 30
     f0a:	a2 07       	cpc	r26, r18
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	b2 07       	cpc	r27, r18
     f10:	e0 f2       	brcs	.-72     	; 0xeca <M_UART_Void_UARTWrite+0x22>
		if(GET_BIT(UCSRA_REG,TXC_Bit) == UART_Complete_Transmiting)
		{
			break;
		}
	}
}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <M_UART_u8_UARTRead>:

u8 M_UART_u8_UARTRead(void)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <M_UART_u8_UARTRead+0x6>
     f28:	00 d0       	rcall	.+0      	; 0xf2a <M_UART_u8_UARTRead+0x8>
     f2a:	0f 92       	push	r0
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	u8 return_value = 0 ;
     f30:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32_Counter = 0 ;
     f32:	19 82       	std	Y+1, r1	; 0x01
     f34:	1a 82       	std	Y+2, r1	; 0x02
     f36:	1b 82       	std	Y+3, r1	; 0x03
     f38:	1c 82       	std	Y+4, r1	; 0x04
     f3a:	13 c0       	rjmp	.+38     	; 0xf62 <M_UART_u8_UARTRead+0x40>
	while(Local_u32_Counter < UART_Polling_Time)
	{
		Local_u32_Counter++ ;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	ab 81       	ldd	r26, Y+3	; 0x03
     f42:	bc 81       	ldd	r27, Y+4	; 0x04
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	a1 1d       	adc	r26, r1
     f48:	b1 1d       	adc	r27, r1
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	ab 83       	std	Y+3, r26	; 0x03
     f50:	bc 83       	std	Y+4, r27	; 0x04
		if(GET_BIT(UCSRA_REG,RXC_Bit) == UART_Complete_Transmiting)
     f52:	eb e2       	ldi	r30, 0x2B	; 43
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	88 1f       	adc	r24, r24
     f5a:	88 27       	eor	r24, r24
     f5c:	88 1f       	adc	r24, r24
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	61 f0       	breq	.+24     	; 0xf7a <M_UART_u8_UARTRead+0x58>

u8 M_UART_u8_UARTRead(void)
{
	u8 return_value = 0 ;
	u32 Local_u32_Counter = 0 ;
	while(Local_u32_Counter < UART_Polling_Time)
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	ab 81       	ldd	r26, Y+3	; 0x03
     f68:	bc 81       	ldd	r27, Y+4	; 0x04
     f6a:	80 38       	cpi	r24, 0x80	; 128
     f6c:	24 e8       	ldi	r18, 0x84	; 132
     f6e:	92 07       	cpc	r25, r18
     f70:	2e e1       	ldi	r18, 0x1E	; 30
     f72:	a2 07       	cpc	r26, r18
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	b2 07       	cpc	r27, r18
     f78:	08 f3       	brcs	.-62     	; 0xf3c <M_UART_u8_UARTRead+0x1a>
		if(GET_BIT(UCSRA_REG,RXC_Bit) == UART_Complete_Transmiting)
		{
			break;
		}
	}
	return_value = UDR_REG  ;
     f7a:	ec e2       	ldi	r30, 0x2C	; 44
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8d 83       	std	Y+5, r24	; 0x05
	return  return_value;
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <M_UART_u8_UARTReadStr>:

void  M_UART_u8_UARTReadStr(u8 *Copy_U8_Str)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	65 97       	sbiw	r28, 0x15	; 21
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	9d 8b       	std	Y+21, r25	; 0x15
     faa:	8c 8b       	std	Y+20, r24	; 0x14
	u8  Local_U8_StrCounter=0;
     fac:	1b 8a       	std	Y+19, r1	; 0x13
	u32 Local_u32_Counter = 0 ;
     fae:	1f 86       	std	Y+15, r1	; 0x0f
     fb0:	18 8a       	std	Y+16, r1	; 0x10
     fb2:	19 8a       	std	Y+17, r1	; 0x11
     fb4:	1a 8a       	std	Y+18, r1	; 0x12
	Copy_U8_Str[0] = '\0' ;
     fb6:	ec 89       	ldd	r30, Y+20	; 0x14
     fb8:	fd 89       	ldd	r31, Y+21	; 0x15
     fba:	10 82       	st	Z, r1
	Copy_U8_Str[1] =  '\0';
     fbc:	8c 89       	ldd	r24, Y+20	; 0x14
     fbe:	9d 89       	ldd	r25, Y+21	; 0x15
     fc0:	fc 01       	movw	r30, r24
     fc2:	31 96       	adiw	r30, 0x01	; 1
     fc4:	10 82       	st	Z, r1
     fc6:	14 c0       	rjmp	.+40     	; 0xff0 <M_UART_u8_UARTReadStr+0x5c>

	while(Local_u32_Counter < UART_Polling_Time)
	{
		Local_u32_Counter++ ;
     fc8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fca:	98 89       	ldd	r25, Y+16	; 0x10
     fcc:	a9 89       	ldd	r26, Y+17	; 0x11
     fce:	ba 89       	ldd	r27, Y+18	; 0x12
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	a1 1d       	adc	r26, r1
     fd4:	b1 1d       	adc	r27, r1
     fd6:	8f 87       	std	Y+15, r24	; 0x0f
     fd8:	98 8b       	std	Y+16, r25	; 0x10
     fda:	a9 8b       	std	Y+17, r26	; 0x11
     fdc:	ba 8b       	std	Y+18, r27	; 0x12
		if(GET_BIT(UCSRA_REG,RXC_Bit) == UART_Complete_Transmiting)
     fde:	eb e2       	ldi	r30, 0x2B	; 43
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	88 1f       	adc	r24, r24
     fe6:	88 27       	eor	r24, r24
     fe8:	88 1f       	adc	r24, r24
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	09 f4       	brne	.+2      	; 0xff0 <M_UART_u8_UARTReadStr+0x5c>
     fee:	8e c0       	rjmp	.+284    	; 0x110c <M_UART_u8_UARTReadStr+0x178>
	u8  Local_U8_StrCounter=0;
	u32 Local_u32_Counter = 0 ;
	Copy_U8_Str[0] = '\0' ;
	Copy_U8_Str[1] =  '\0';

	while(Local_u32_Counter < UART_Polling_Time)
     ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff2:	98 89       	ldd	r25, Y+16	; 0x10
     ff4:	a9 89       	ldd	r26, Y+17	; 0x11
     ff6:	ba 89       	ldd	r27, Y+18	; 0x12
     ff8:	80 38       	cpi	r24, 0x80	; 128
     ffa:	24 e8       	ldi	r18, 0x84	; 132
     ffc:	92 07       	cpc	r25, r18
     ffe:	2e e1       	ldi	r18, 0x1E	; 30
    1000:	a2 07       	cpc	r26, r18
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	b2 07       	cpc	r27, r18
    1006:	00 f3       	brcs	.-64     	; 0xfc8 <M_UART_u8_UARTReadStr+0x34>
    1008:	81 c0       	rjmp	.+258    	; 0x110c <M_UART_u8_UARTReadStr+0x178>
			break;
		}
	}
	while(GET_BIT(UCSRA_REG,RXC_Bit) != UART_still_data)
	{
		Copy_U8_Str[Local_U8_StrCounter]= UDR_REG  ;
    100a:	8b 89       	ldd	r24, Y+19	; 0x13
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8c 89       	ldd	r24, Y+20	; 0x14
    1012:	9d 89       	ldd	r25, Y+21	; 0x15
    1014:	dc 01       	movw	r26, r24
    1016:	a2 0f       	add	r26, r18
    1018:	b3 1f       	adc	r27, r19
    101a:	ec e2       	ldi	r30, 0x2C	; 44
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8c 93       	st	X, r24
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	a8 ec       	ldi	r26, 0xC8	; 200
    1028:	b2 e4       	ldi	r27, 0x42	; 66
    102a:	8b 87       	std	Y+11, r24	; 0x0b
    102c:	9c 87       	std	Y+12, r25	; 0x0c
    102e:	ad 87       	std	Y+13, r26	; 0x0d
    1030:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1032:	6b 85       	ldd	r22, Y+11	; 0x0b
    1034:	7c 85       	ldd	r23, Y+12	; 0x0c
    1036:	8d 85       	ldd	r24, Y+13	; 0x0d
    1038:	9e 85       	ldd	r25, Y+14	; 0x0e
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	4a e7       	ldi	r20, 0x7A	; 122
    1040:	55 e4       	ldi	r21, 0x45	; 69
    1042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	8f 83       	std	Y+7, r24	; 0x07
    104c:	98 87       	std	Y+8, r25	; 0x08
    104e:	a9 87       	std	Y+9, r26	; 0x09
    1050:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1052:	6f 81       	ldd	r22, Y+7	; 0x07
    1054:	78 85       	ldd	r23, Y+8	; 0x08
    1056:	89 85       	ldd	r24, Y+9	; 0x09
    1058:	9a 85       	ldd	r25, Y+10	; 0x0a
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e8       	ldi	r20, 0x80	; 128
    1060:	5f e3       	ldi	r21, 0x3F	; 63
    1062:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1066:	88 23       	and	r24, r24
    1068:	2c f4       	brge	.+10     	; 0x1074 <M_UART_u8_UARTReadStr+0xe0>
		__ticks = 1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9e 83       	std	Y+6, r25	; 0x06
    1070:	8d 83       	std	Y+5, r24	; 0x05
    1072:	3f c0       	rjmp	.+126    	; 0x10f2 <M_UART_u8_UARTReadStr+0x15e>
	else if (__tmp > 65535)
    1074:	6f 81       	ldd	r22, Y+7	; 0x07
    1076:	78 85       	ldd	r23, Y+8	; 0x08
    1078:	89 85       	ldd	r24, Y+9	; 0x09
    107a:	9a 85       	ldd	r25, Y+10	; 0x0a
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	3f ef       	ldi	r19, 0xFF	; 255
    1080:	4f e7       	ldi	r20, 0x7F	; 127
    1082:	57 e4       	ldi	r21, 0x47	; 71
    1084:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1088:	18 16       	cp	r1, r24
    108a:	4c f5       	brge	.+82     	; 0x10de <M_UART_u8_UARTReadStr+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108c:	6b 85       	ldd	r22, Y+11	; 0x0b
    108e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1090:	8d 85       	ldd	r24, Y+13	; 0x0d
    1092:	9e 85       	ldd	r25, Y+14	; 0x0e
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e2       	ldi	r20, 0x20	; 32
    109a:	51 e4       	ldi	r21, 0x41	; 65
    109c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	bc 01       	movw	r22, r24
    10a6:	cd 01       	movw	r24, r26
    10a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
    10b4:	0f c0       	rjmp	.+30     	; 0x10d4 <M_UART_u8_UARTReadStr+0x140>
    10b6:	80 e9       	ldi	r24, 0x90	; 144
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	9c 83       	std	Y+4, r25	; 0x04
    10bc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <M_UART_u8_UARTReadStr+0x12e>
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	69 f7       	brne	.-38     	; 0x10b6 <M_UART_u8_UARTReadStr+0x122>
    10dc:	14 c0       	rjmp	.+40     	; 0x1106 <M_UART_u8_UARTReadStr+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10de:	6f 81       	ldd	r22, Y+7	; 0x07
    10e0:	78 85       	ldd	r23, Y+8	; 0x08
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	9e 83       	std	Y+6, r25	; 0x06
    10f0:	8d 83       	std	Y+5, r24	; 0x05
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <M_UART_u8_UARTReadStr+0x16a>
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100) ;
		Local_U8_StrCounter++ ;
    1106:	8b 89       	ldd	r24, Y+19	; 0x13
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	8b 8b       	std	Y+19, r24	; 0x13
		if(GET_BIT(UCSRA_REG,RXC_Bit) == UART_Complete_Transmiting)
		{
			break;
		}
	}
	while(GET_BIT(UCSRA_REG,RXC_Bit) != UART_still_data)
    110c:	eb e2       	ldi	r30, 0x2B	; 43
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	88 23       	and	r24, r24
    1114:	0c f4       	brge	.+2      	; 0x1118 <M_UART_u8_UARTReadStr+0x184>
    1116:	79 cf       	rjmp	.-270    	; 0x100a <M_UART_u8_UARTReadStr+0x76>
	{
		Copy_U8_Str[Local_U8_StrCounter]= UDR_REG  ;
		_delay_ms(100) ;
		Local_U8_StrCounter++ ;
	}
	Copy_U8_Str[2]= '\0'  ;
    1118:	8c 89       	ldd	r24, Y+20	; 0x14
    111a:	9d 89       	ldd	r25, Y+21	; 0x15
    111c:	fc 01       	movw	r30, r24
    111e:	32 96       	adiw	r30, 0x02	; 2
    1120:	10 82       	st	Z, r1
}
    1122:	65 96       	adiw	r28, 0x15	; 21
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <M_TIMER1_void_Init>:


void (*g_ICU_CallBackPtr)(void) = NULL;

void M_TIMER1_void_Init(void)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
   // set Mode as Normal Mode
    CLR_BIT(TCCR1A_REG,WGM10_BIT );
    113c:	af e4       	ldi	r26, 0x4F	; 79
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ef e4       	ldi	r30, 0x4F	; 79
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8e 7f       	andi	r24, 0xFE	; 254
    1148:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A_REG,WGM11_BIT );
    114a:	af e4       	ldi	r26, 0x4F	; 79
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	ef e4       	ldi	r30, 0x4F	; 79
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	8d 7f       	andi	r24, 0xFD	; 253
    1156:	8c 93       	st	X, r24

    CLR_BIT(TCCR1B_REG,WGM12_BIT );
    1158:	ae e4       	ldi	r26, 0x4E	; 78
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ee e4       	ldi	r30, 0x4E	; 78
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	87 7f       	andi	r24, 0xF7	; 247
    1164:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B_REG,WGM13_BIT );
    1166:	ae e4       	ldi	r26, 0x4E	; 78
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	ee e4       	ldi	r30, 0x4E	; 78
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8f 7e       	andi	r24, 0xEF	; 239
    1172:	8c 93       	st	X, r24
   // set prescaler = 256
    CLR_BIT(TCCR1B_REG,CS10_BIT);
    1174:	ae e4       	ldi	r26, 0x4E	; 78
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	ee e4       	ldi	r30, 0x4E	; 78
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8e 7f       	andi	r24, 0xFE	; 254
    1180:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,CS11_BIT);
    1182:	ae e4       	ldi	r26, 0x4E	; 78
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	ee e4       	ldi	r30, 0x4E	; 78
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	8d 7f       	andi	r24, 0xFD	; 253
    118e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,CS12_BIT);
    1190:	ae e4       	ldi	r26, 0x4E	; 78
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ee e4       	ldi	r30, 0x4E	; 78
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	84 60       	ori	r24, 0x04	; 4
    119c:	8c 93       	st	X, r24

}
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <M_TIMER1_ICU_void_Init>:
void M_TIMER1_ICU_void_Init(void)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B_REG,ICES1_BIT);
    11ac:	ae e4       	ldi	r26, 0x4E	; 78
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	ee e4       	ldi	r30, 0x4E	; 78
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	80 64       	ori	r24, 0x40	; 64
    11b8:	8c 93       	st	X, r24
}
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <M_TIMER1_ICU_void_setTrigger>:
void M_TIMER1_ICU_void_setTrigger(u8 copy_u8Trigg)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <M_TIMER1_ICU_void_setTrigger+0x6>
    11c6:	0f 92       	push	r0
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	89 83       	std	Y+1, r24	; 0x01
    switch( copy_u8Trigg)
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3b 83       	std	Y+3, r19	; 0x03
    11d6:	2a 83       	std	Y+2, r18	; 0x02
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	9b 81       	ldd	r25, Y+3	; 0x03
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	69 f0       	breq	.+26     	; 0x11fa <M_TIMER1_ICU_void_setTrigger+0x3a>
    11e0:	2a 81       	ldd	r18, Y+2	; 0x02
    11e2:	3b 81       	ldd	r19, Y+3	; 0x03
    11e4:	21 30       	cpi	r18, 0x01	; 1
    11e6:	31 05       	cpc	r19, r1
    11e8:	79 f4       	brne	.+30     	; 0x1208 <M_TIMER1_ICU_void_setTrigger+0x48>
    {
    case TIMER1_ICU_RAISING_TRIGG:
    	SET_BIT(TCCR1B_REG,ICES1_BIT);
    11ea:	ae e4       	ldi	r26, 0x4E	; 78
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	ee e4       	ldi	r30, 0x4E	; 78
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 64       	ori	r24, 0x40	; 64
    11f6:	8c 93       	st	X, r24
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <M_TIMER1_ICU_void_setTrigger+0x48>
    	break ;
    case TIMER1_ICU_FALLING_TRIGG:
    	CLR_BIT(TCCR1B_REG,ICES1_BIT);
    11fa:	ae e4       	ldi	r26, 0x4E	; 78
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ee e4       	ldi	r30, 0x4E	; 78
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8f 7b       	andi	r24, 0xBF	; 191
    1206:	8c 93       	st	X, r24
    	break;
    }
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <M_TIMER1_ICU_void_setCallBack>:
void M_TIMER1_ICU_void_setCallBack(void (*ptrfn)(void))
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <M_TIMER1_ICU_void_setCallBack+0x6>
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
	g_ICU_CallBackPtr = ptrfn;
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	90 93 8b 01 	sts	0x018B, r25
    122a:	80 93 8a 01 	sts	0x018A, r24
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <M_TIMER1_ICU_u16_readInput>:
u16  M_TIMER1_ICU_u16_readInput(void)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
   return ICR_REG;
    1240:	e6 e4       	ldi	r30, 0x46	; 70
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <M_TIMER1_ICU_void_EnableInt>:
void M_TIMER1_ICU_void_EnableInt(void)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(TIMSK_REG,TICIE1_BIT );
    1256:	a9 e5       	ldi	r26, 0x59	; 89
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e9 e5       	ldi	r30, 0x59	; 89
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	80 62       	ori	r24, 0x20	; 32
    1262:	8c 93       	st	X, r24
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <M_TIMER1_ICU_void_DisableInt>:
void M_TIMER1_ICU_void_DisableInt(void)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TICIE1_BIT );
    1272:	a9 e5       	ldi	r26, 0x59	; 89
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e9 e5       	ldi	r30, 0x59	; 89
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8f 7d       	andi	r24, 0xDF	; 223
    127e:	8c 93       	st	X, r24
}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <__vector_6>:


ISR(TIMER1_CAPT_vect)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
  if(g_ICU_CallBackPtr != NULL)
    12b0:	80 91 8a 01 	lds	r24, 0x018A
    12b4:	90 91 8b 01 	lds	r25, 0x018B
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	29 f0       	breq	.+10     	; 0x12c6 <__vector_6+0x40>
  {
	  g_ICU_CallBackPtr();
    12bc:	e0 91 8a 01 	lds	r30, 0x018A
    12c0:	f0 91 8b 01 	lds	r31, 0x018B
    12c4:	09 95       	icall
  }

}
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <M_TIMER0_void_Init>:
void (*g_CallBackArr[2])(void) = {NULL,NULL};
static u32 NumOFOverflows = 0;
static u8 NumOFRemainingTicks  = 0;
static u32 NumOFCmpMatches = 0;
void M_TIMER0_void_Init(void)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
#else
#error ("wrong OC0 mode")

#endif
#elif(TIMER0_MODE   == TIMER0_MODE_FAST_PWM) //3
	SET_BIT(TCCR0_REG,WGM00_BIT);
    12f4:	a3 e5       	ldi	r26, 0x53	; 83
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e3 e5       	ldi	r30, 0x53	; 83
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 64       	ori	r24, 0x40	; 64
    1300:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,WGM01_BIT);
    1302:	a3 e5       	ldi	r26, 0x53	; 83
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e3 e5       	ldi	r30, 0x53	; 83
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	88 60       	ori	r24, 0x08	; 8
    130e:	8c 93       	st	X, r24
#if(TIMER0_OC0_MODE == TIMER0_OC0_MODE_PWM_NON_INVERTING || TIMER0_OC0_MODE == TIMER0_OC0_MODE_PWM_INVERTING)
	// step 1 : apply mask
	TCCR0_REG &= TIMER0_OC0_MODE_MASK;
    1310:	a3 e5       	ldi	r26, 0x53	; 83
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e3 e5       	ldi	r30, 0x53	; 83
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8f 7c       	andi	r24, 0xCF	; 207
    131c:	8c 93       	st	X, r24
	// step 2 : insert value
	TCCR0_REG |= TIMER0_OC0_MODE;
    131e:	a3 e5       	ldi	r26, 0x53	; 83
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e3 e5       	ldi	r30, 0x53	; 83
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 62       	ori	r24, 0x20	; 32
    132a:	8c 93       	st	X, r24
  #error("wrong OC0 mode")
#endif
#else
#error ("wrong Timer0 mode")
#endif
}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <M_TIMER0_void_setTimeMS>:
void M_TIMER0_void_setTimeMS(u32 copy_u32TimeMS )
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	6b 97       	sbiw	r28, 0x1b	; 27
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	6b 8b       	std	Y+19, r22	; 0x13
    1348:	7c 8b       	std	Y+20, r23	; 0x14
    134a:	8d 8b       	std	Y+21, r24	; 0x15
    134c:	9e 8b       	std	Y+22, r25	; 0x16
	u16 prescaler_Arr[]= {1,8,64,256,1024};
    134e:	ce 01       	movw	r24, r28
    1350:	09 96       	adiw	r24, 0x09	; 9
    1352:	98 8f       	std	Y+24, r25	; 0x18
    1354:	8f 8b       	std	Y+23, r24	; 0x17
    1356:	ef e7       	ldi	r30, 0x7F	; 127
    1358:	f1 e0       	ldi	r31, 0x01	; 1
    135a:	fa 8f       	std	Y+26, r31	; 0x1a
    135c:	e9 8f       	std	Y+25, r30	; 0x19
    135e:	fa e0       	ldi	r31, 0x0A	; 10
    1360:	fb 8f       	std	Y+27, r31	; 0x1b
    1362:	e9 8d       	ldd	r30, Y+25	; 0x19
    1364:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1366:	00 80       	ld	r0, Z
    1368:	89 8d       	ldd	r24, Y+25	; 0x19
    136a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	9a 8f       	std	Y+26, r25	; 0x1a
    1370:	89 8f       	std	Y+25, r24	; 0x19
    1372:	ef 89       	ldd	r30, Y+23	; 0x17
    1374:	f8 8d       	ldd	r31, Y+24	; 0x18
    1376:	00 82       	st	Z, r0
    1378:	8f 89       	ldd	r24, Y+23	; 0x17
    137a:	98 8d       	ldd	r25, Y+24	; 0x18
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	98 8f       	std	Y+24, r25	; 0x18
    1380:	8f 8b       	std	Y+23, r24	; 0x17
    1382:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1384:	91 50       	subi	r25, 0x01	; 1
    1386:	9b 8f       	std	Y+27, r25	; 0x1b
    1388:	eb 8d       	ldd	r30, Y+27	; 0x1b
    138a:	ee 23       	and	r30, r30
    138c:	51 f7       	brne	.-44     	; 0x1362 <M_TIMER0_void_setTimeMS+0x30>
    f32 TickTime =  (f32)prescaler_Arr[TIMER0_PRESCALER-1 ] / FCPU;
    138e:	89 89       	ldd	r24, Y+17	; 0x11
    1390:	9a 89       	ldd	r25, Y+18	; 0x12
    1392:	cc 01       	movw	r24, r24
    1394:	a0 e0       	ldi	r26, 0x00	; 0
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	bc 01       	movw	r22, r24
    13a6:	cd 01       	movw	r24, r26
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	51 e4       	ldi	r21, 0x41	; 65
    13b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	af 83       	std	Y+7, r26	; 0x07
    13be:	b8 87       	std	Y+8, r27	; 0x08
	u32 DesiredNumOfTicks = (copy_u32TimeMS * 1000)/ TickTime;
    13c0:	8b 89       	ldd	r24, Y+19	; 0x13
    13c2:	9c 89       	ldd	r25, Y+20	; 0x14
    13c4:	ad 89       	ldd	r26, Y+21	; 0x15
    13c6:	be 89       	ldd	r27, Y+22	; 0x16
    13c8:	28 ee       	ldi	r18, 0xE8	; 232
    13ca:	33 e0       	ldi	r19, 0x03	; 3
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	bc 01       	movw	r22, r24
    13d2:	cd 01       	movw	r24, r26
    13d4:	0e 94 94 1c 	call	0x3928	; 0x3928 <__mulsi3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	2d 81       	ldd	r18, Y+5	; 0x05
    13ee:	3e 81       	ldd	r19, Y+6	; 0x06
    13f0:	4f 81       	ldd	r20, Y+7	; 0x07
    13f2:	58 85       	ldd	r21, Y+8	; 0x08
    13f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	ab 83       	std	Y+3, r26	; 0x03
    140e:	bc 83       	std	Y+4, r27	; 0x04
    	 OCR0_Value--;
     }
     OCR0_REG = OCR0_Value ;
     NumOFCmpMatches = DesiredNumOfTicks / OCR0_Value;
#endif
}
    1410:	6b 96       	adiw	r28, 0x1b	; 27
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <M_TIMER0_void_startTimer>:
void M_TIMER0_void_startTimer(void)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
	// step 1 : apply Mask
	TCCR0_REG &= TIMER0_PRESCALER_MASK;
    142a:	a3 e5       	ldi	r26, 0x53	; 83
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e3 e5       	ldi	r30, 0x53	; 83
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	88 7f       	andi	r24, 0xF8	; 248
    1436:	8c 93       	st	X, r24
	// step 2 : insert value
	TCCR0_REG |= TIMER0_PRESCALER;
    1438:	a3 e5       	ldi	r26, 0x53	; 83
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e3 e5       	ldi	r30, 0x53	; 83
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	85 60       	ori	r24, 0x05	; 5
    1444:	8c 93       	st	X, r24
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <M_TIMER0_void_stopTimer>:
void M_TIMER0_void_stopTimer(void)
{
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
	// step 1 : apply Mask
	TCCR0_REG &= TIMER0_PRESCALER_MASK;
    1454:	a3 e5       	ldi	r26, 0x53	; 83
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e3 e5       	ldi	r30, 0x53	; 83
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	88 7f       	andi	r24, 0xF8	; 248
    1460:	8c 93       	st	X, r24
	// step 2 : insert value
	//	TCCR0_REG |= TIMER0_PRESCALER_NO_CLOCK;// why commented ? coz mask will clear bits
}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <M_TIMER0_void_setCallBack>:
void M_TIMER0_void_setCallBack(void (*ptrfn)(void),u8 copy_u8IntID)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <M_TIMER0_void_setCallBack+0x6>
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	6b 83       	std	Y+3, r22	; 0x03
	case TIMER0_COMP_INT_ID :
		g_CallBackArr[1] = ptrfn;
		break;
	}*/
	// Method 2
	if(copy_u8IntID == TIMER0_OVF_INT_ID || copy_u8IntID ==TIMER0_COMP_INT_ID )
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	88 23       	and	r24, r24
    147e:	19 f0       	breq	.+6      	; 0x1486 <M_TIMER0_void_setCallBack+0x1e>
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	61 f4       	brne	.+24     	; 0x149e <M_TIMER0_void_setCallBack+0x36>
		g_CallBackArr[copy_u8IntID] = ptrfn;
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	fc 01       	movw	r30, r24
    1492:	e4 57       	subi	r30, 0x74	; 116
    1494:	fe 4f       	sbci	r31, 0xFE	; 254
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	9a 81       	ldd	r25, Y+2	; 0x02
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	80 83       	st	Z, r24
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <M_TIMER0_void_EnableInt>:
void M_TIMER0_void_EnableInt(u8 copy_u8IntID)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <M_TIMER0_void_EnableInt+0x6>
    14b0:	0f 92       	push	r0
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8IntID)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3b 83       	std	Y+3, r19	; 0x03
    14c0:	2a 83       	std	Y+2, r18	; 0x02
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	9b 81       	ldd	r25, Y+3	; 0x03
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	31 f0       	breq	.+12     	; 0x14d6 <M_TIMER0_void_EnableInt+0x2c>
    14ca:	2a 81       	ldd	r18, Y+2	; 0x02
    14cc:	3b 81       	ldd	r19, Y+3	; 0x03
    14ce:	21 30       	cpi	r18, 0x01	; 1
    14d0:	31 05       	cpc	r19, r1
    14d2:	49 f0       	breq	.+18     	; 0x14e6 <M_TIMER0_void_EnableInt+0x3c>
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <M_TIMER0_void_EnableInt+0x4a>
	{
	case TIMER0_OVF_INT_ID:
		SET_BIT(TIMSK_REG,TOIE0_BIT);
    14d6:	a9 e5       	ldi	r26, 0x59	; 89
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e9 e5       	ldi	r30, 0x59	; 89
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	81 60       	ori	r24, 0x01	; 1
    14e2:	8c 93       	st	X, r24
    14e4:	07 c0       	rjmp	.+14     	; 0x14f4 <M_TIMER0_void_EnableInt+0x4a>
		break;
	case TIMER0_COMP_INT_ID :
		SET_BIT(TIMSK_REG,OCIE0_BIT);
    14e6:	a9 e5       	ldi	r26, 0x59	; 89
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e9 e5       	ldi	r30, 0x59	; 89
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	82 60       	ori	r24, 0x02	; 2
    14f2:	8c 93       	st	X, r24
		break;
	}
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <M_TIMER0_void_DisableInt>:
void M_TIMER0_void_DisableInt(u8 copy_u8IntID)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <M_TIMER0_void_DisableInt+0x6>
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8IntID)
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3b 83       	std	Y+3, r19	; 0x03
    1516:	2a 83       	std	Y+2, r18	; 0x02
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	9b 81       	ldd	r25, Y+3	; 0x03
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	31 f0       	breq	.+12     	; 0x152c <M_TIMER0_void_DisableInt+0x2c>
    1520:	2a 81       	ldd	r18, Y+2	; 0x02
    1522:	3b 81       	ldd	r19, Y+3	; 0x03
    1524:	21 30       	cpi	r18, 0x01	; 1
    1526:	31 05       	cpc	r19, r1
    1528:	49 f0       	breq	.+18     	; 0x153c <M_TIMER0_void_DisableInt+0x3c>
    152a:	0f c0       	rjmp	.+30     	; 0x154a <M_TIMER0_void_DisableInt+0x4a>
	{
	case TIMER0_OVF_INT_ID:
		CLR_BIT(TIMSK_REG,TOIE0_BIT);
    152c:	a9 e5       	ldi	r26, 0x59	; 89
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e9 e5       	ldi	r30, 0x59	; 89
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	8e 7f       	andi	r24, 0xFE	; 254
    1538:	8c 93       	st	X, r24
    153a:	07 c0       	rjmp	.+14     	; 0x154a <M_TIMER0_void_DisableInt+0x4a>
		break;
	case TIMER0_COMP_INT_ID :
		CLR_BIT(TIMSK_REG,OCIE0_BIT);
    153c:	a9 e5       	ldi	r26, 0x59	; 89
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e9 e5       	ldi	r30, 0x59	; 89
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	8d 7f       	andi	r24, 0xFD	; 253
    1548:	8c 93       	st	X, r24
		break;
	}

}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <M_TIMER0_void_setFastPWM>:
void M_TIMER0_void_setFastPWM(u8 copy_u8Duty)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <M_TIMER0_void_setFastPWM+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <M_TIMER0_void_setFastPWM+0x8>
    155e:	0f 92       	push	r0
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	89 83       	std	Y+1, r24	; 0x01
#if (TIMER0_MODE  ==   TIMER0_MODE_FAST_PWM)
	#if(TIMER0_OC0_MODE  == TIMER0_OC0_MODE_PWM_NON_INVERTING)
      OCR0_REG =  abs(((copy_u8Duty * 256)/100)-1);
    1566:	8c e5       	ldi	r24, 0x5C	; 92
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	9d 83       	std	Y+5, r25	; 0x05
    156c:	8c 83       	std	Y+4, r24	; 0x04
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	98 2f       	mov	r25, r24
    1576:	88 27       	eor	r24, r24
    1578:	24 e6       	ldi	r18, 0x64	; 100
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	b9 01       	movw	r22, r18
    157e:	0e 94 bf 1c 	call	0x397e	; 0x397e <__divmodhi4>
    1582:	cb 01       	movw	r24, r22
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	9b 83       	std	Y+3, r25	; 0x03
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	ea 81       	ldd	r30, Y+2	; 0x02
    158c:	fb 81       	ldd	r31, Y+3	; 0x03
    158e:	ff 23       	and	r31, r31
    1590:	3c f4       	brge	.+14     	; 0x15a0 <M_TIMER0_void_setFastPWM+0x4a>
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	9b 81       	ldd	r25, Y+3	; 0x03
    1596:	90 95       	com	r25
    1598:	81 95       	neg	r24
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	9b 83       	std	Y+3, r25	; 0x03
    159e:	8a 83       	std	Y+2, r24	; 0x02
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	ec 81       	ldd	r30, Y+4	; 0x04
    15a4:	fd 81       	ldd	r31, Y+5	; 0x05
    15a6:	80 83       	st	Z, r24
	#elif(TIMER0_OC0_MODE  == TIMER0_OC0_MODE_PWM_INVERTING)
      OCR0_REG = abs(255- ((copy_u8Duty* 256)/100) );
	#endif
#endif
}
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <M_TIMER0_void_setPhaseCorrectPWM>:
void M_TIMER0_void_setPhaseCorrectPWM(u8 copy_u8Duty)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	0f 92       	push	r0
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	89 83       	std	Y+1, r24	; 0x01
      OCR0_REG =  (copy_u8Duty * 255)/100;
	#elif(TIMER0_OC0_MODE  == TIMER0_OC0_MODE_PWM_INVERTING)
      OCR0_REG = 255 - ((copy_u8Duty * 255)/100);
	#endif
#endif
}
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    15cc:	1f 92       	push	r1
    15ce:	0f 92       	push	r0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	0f 92       	push	r0
    15d4:	11 24       	eor	r1, r1
    15d6:	2f 93       	push	r18
    15d8:	3f 93       	push	r19
    15da:	4f 93       	push	r20
    15dc:	5f 93       	push	r21
    15de:	6f 93       	push	r22
    15e0:	7f 93       	push	r23
    15e2:	8f 93       	push	r24
    15e4:	9f 93       	push	r25
    15e6:	af 93       	push	r26
    15e8:	bf 93       	push	r27
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
   static u32 OVFcounter = 0;
   OVFcounter++;
    15f6:	80 91 99 01 	lds	r24, 0x0199
    15fa:	90 91 9a 01 	lds	r25, 0x019A
    15fe:	a0 91 9b 01 	lds	r26, 0x019B
    1602:	b0 91 9c 01 	lds	r27, 0x019C
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	a1 1d       	adc	r26, r1
    160a:	b1 1d       	adc	r27, r1
    160c:	80 93 99 01 	sts	0x0199, r24
    1610:	90 93 9a 01 	sts	0x019A, r25
    1614:	a0 93 9b 01 	sts	0x019B, r26
    1618:	b0 93 9c 01 	sts	0x019C, r27
   if(OVFcounter == NumOFOverflows)
    161c:	20 91 99 01 	lds	r18, 0x0199
    1620:	30 91 9a 01 	lds	r19, 0x019A
    1624:	40 91 9b 01 	lds	r20, 0x019B
    1628:	50 91 9c 01 	lds	r21, 0x019C
    162c:	80 91 90 01 	lds	r24, 0x0190
    1630:	90 91 91 01 	lds	r25, 0x0191
    1634:	a0 91 92 01 	lds	r26, 0x0192
    1638:	b0 91 93 01 	lds	r27, 0x0193
    163c:	28 17       	cp	r18, r24
    163e:	39 07       	cpc	r19, r25
    1640:	4a 07       	cpc	r20, r26
    1642:	5b 07       	cpc	r21, r27
    1644:	e9 f4       	brne	.+58     	; 0x1680 <__vector_11+0xb4>
   {
	   if(NumOFRemainingTicks != 0)
    1646:	80 91 94 01 	lds	r24, 0x0194
    164a:	88 23       	and	r24, r24
    164c:	31 f0       	breq	.+12     	; 0x165a <__vector_11+0x8e>
	   {
		   TCNT0_REG = 256 - NumOFRemainingTicks;
    164e:	e2 e5       	ldi	r30, 0x52	; 82
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 91 94 01 	lds	r24, 0x0194
    1656:	81 95       	neg	r24
    1658:	80 83       	st	Z, r24
	   }

      //take Action
	   if(g_CallBackArr[TIMER0_OVF_INT_ID] != NULL)
    165a:	80 91 8c 01 	lds	r24, 0x018C
    165e:	90 91 8d 01 	lds	r25, 0x018D
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	29 f0       	breq	.+10     	; 0x1670 <__vector_11+0xa4>
	   {
		   g_CallBackArr[TIMER0_OVF_INT_ID](); // call fn in APP layer
    1666:	e0 91 8c 01 	lds	r30, 0x018C
    166a:	f0 91 8d 01 	lds	r31, 0x018D
    166e:	09 95       	icall
	   }
	   OVFcounter = 0;
    1670:	10 92 99 01 	sts	0x0199, r1
    1674:	10 92 9a 01 	sts	0x019A, r1
    1678:	10 92 9b 01 	sts	0x019B, r1
    167c:	10 92 9c 01 	sts	0x019C, r1

   }
}
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	ff 91       	pop	r31
    1686:	ef 91       	pop	r30
    1688:	bf 91       	pop	r27
    168a:	af 91       	pop	r26
    168c:	9f 91       	pop	r25
    168e:	8f 91       	pop	r24
    1690:	7f 91       	pop	r23
    1692:	6f 91       	pop	r22
    1694:	5f 91       	pop	r21
    1696:	4f 91       	pop	r20
    1698:	3f 91       	pop	r19
    169a:	2f 91       	pop	r18
    169c:	0f 90       	pop	r0
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	0f 90       	pop	r0
    16a2:	1f 90       	pop	r1
    16a4:	18 95       	reti

000016a6 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    16a6:	1f 92       	push	r1
    16a8:	0f 92       	push	r0
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	0f 92       	push	r0
    16ae:	11 24       	eor	r1, r1
    16b0:	2f 93       	push	r18
    16b2:	3f 93       	push	r19
    16b4:	4f 93       	push	r20
    16b6:	5f 93       	push	r21
    16b8:	6f 93       	push	r22
    16ba:	7f 93       	push	r23
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	af 93       	push	r26
    16c2:	bf 93       	push	r27
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
	static u32 CmpMatchcounter = 0;
	CmpMatchcounter++;
    16d0:	80 91 9d 01 	lds	r24, 0x019D
    16d4:	90 91 9e 01 	lds	r25, 0x019E
    16d8:	a0 91 9f 01 	lds	r26, 0x019F
    16dc:	b0 91 a0 01 	lds	r27, 0x01A0
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	a1 1d       	adc	r26, r1
    16e4:	b1 1d       	adc	r27, r1
    16e6:	80 93 9d 01 	sts	0x019D, r24
    16ea:	90 93 9e 01 	sts	0x019E, r25
    16ee:	a0 93 9f 01 	sts	0x019F, r26
    16f2:	b0 93 a0 01 	sts	0x01A0, r27
	if(CmpMatchcounter == NumOFCmpMatches)
    16f6:	20 91 9d 01 	lds	r18, 0x019D
    16fa:	30 91 9e 01 	lds	r19, 0x019E
    16fe:	40 91 9f 01 	lds	r20, 0x019F
    1702:	50 91 a0 01 	lds	r21, 0x01A0
    1706:	80 91 95 01 	lds	r24, 0x0195
    170a:	90 91 96 01 	lds	r25, 0x0196
    170e:	a0 91 97 01 	lds	r26, 0x0197
    1712:	b0 91 98 01 	lds	r27, 0x0198
    1716:	28 17       	cp	r18, r24
    1718:	39 07       	cpc	r19, r25
    171a:	4a 07       	cpc	r20, r26
    171c:	5b 07       	cpc	r21, r27
    171e:	99 f4       	brne	.+38     	; 0x1746 <__vector_10+0xa0>
	{
	      //take Action
		   if(g_CallBackArr[TIMER0_COMP_INT_ID] != NULL)
    1720:	80 91 8e 01 	lds	r24, 0x018E
    1724:	90 91 8f 01 	lds	r25, 0x018F
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	29 f0       	breq	.+10     	; 0x1736 <__vector_10+0x90>
		   {
			   g_CallBackArr[TIMER0_COMP_INT_ID](); // call fn in APP layer
    172c:	e0 91 8e 01 	lds	r30, 0x018E
    1730:	f0 91 8f 01 	lds	r31, 0x018F
    1734:	09 95       	icall
		   }
		   CmpMatchcounter = 0;
    1736:	10 92 9d 01 	sts	0x019D, r1
    173a:	10 92 9e 01 	sts	0x019E, r1
    173e:	10 92 9f 01 	sts	0x019F, r1
    1742:	10 92 a0 01 	sts	0x01A0, r1

	}
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	ff 91       	pop	r31
    174c:	ef 91       	pop	r30
    174e:	bf 91       	pop	r27
    1750:	af 91       	pop	r26
    1752:	9f 91       	pop	r25
    1754:	8f 91       	pop	r24
    1756:	7f 91       	pop	r23
    1758:	6f 91       	pop	r22
    175a:	5f 91       	pop	r21
    175c:	4f 91       	pop	r20
    175e:	3f 91       	pop	r19
    1760:	2f 91       	pop	r18
    1762:	0f 90       	pop	r0
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	0f 90       	pop	r0
    1768:	1f 90       	pop	r1
    176a:	18 95       	reti

0000176c <M_GIE_void_Enable>:
#include  "GIE_priv.h"
#include  "GIE_config.h"
#include  "GIE_int.h"

void M_GIE_void_Enable(void)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
  // Method 1 : using C
//	SET_BIT(SREG_REG,I_BIT);

  //Method 2 : Assembly
	asm("SEI");
    1774:	78 94       	sei
}
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <M_GIE_void_Diasble>:
void M_GIE_void_Diasble(void)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
	// Method 1 : using C

	//CLR_BIT(SREG_REG,I_BIT);

	 //Method 2 : Assembly
	asm("CLI");
    1784:	f8 94       	cli

}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <M_EXTI_void_EnableInt>:

void (*EXTI_CallBackArr[3])(void) = {NULL,NULL,NULL};


void M_EXTI_void_EnableInt(u8 copy_u8IntID, u8 copy_u8Trigg)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <M_EXTI_void_EnableInt+0x6>
    1792:	00 d0       	rcall	.+0      	; 0x1794 <M_EXTI_void_EnableInt+0x8>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	6a 83       	std	Y+2, r22	; 0x02
	case EXTI_INT2_ID:
		SET_BIT(GICR_REG,INT2_BIT);
		break;
	}*/
	// method 2
	SET_BIT(GICR_REG,copy_u8IntID);
    179c:	ab e5       	ldi	r26, 0x5B	; 91
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	eb e5       	ldi	r30, 0x5B	; 91
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <M_EXTI_void_EnableInt+0x2c>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	2a 95       	dec	r18
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <M_EXTI_void_EnableInt+0x28>
    17bc:	84 2b       	or	r24, r20
    17be:	8c 93       	st	X, r24
	case EXTI_INT1_ID:
		break;
	case EXTI_INT2_ID:
		break;
	}*/
	switch(copy_u8IntID)
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	3c 83       	std	Y+4, r19	; 0x04
    17c8:	2b 83       	std	Y+3, r18	; 0x03
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	86 30       	cpi	r24, 0x06	; 6
    17d0:	91 05       	cpc	r25, r1
    17d2:	59 f0       	breq	.+22     	; 0x17ea <M_EXTI_void_EnableInt+0x5e>
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	27 30       	cpi	r18, 0x07	; 7
    17da:	31 05       	cpc	r19, r1
    17dc:	b1 f0       	breq	.+44     	; 0x180a <M_EXTI_void_EnableInt+0x7e>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	85 30       	cpi	r24, 0x05	; 5
    17e4:	91 05       	cpc	r25, r1
    17e6:	41 f1       	breq	.+80     	; 0x1838 <M_EXTI_void_EnableInt+0xac>
    17e8:	44 c0       	rjmp	.+136    	; 0x1872 <M_EXTI_void_EnableInt+0xe6>
	{
	case EXTI_INT0_ID:
		// step 1 : clear bits using mask
		MCUCR_REG &= EXTI_INT0_MASK;
    17ea:	a5 e5       	ldi	r26, 0x55	; 85
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e5 e5       	ldi	r30, 0x55	; 85
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	8c 7f       	andi	r24, 0xFC	; 252
    17f6:	8c 93       	st	X, r24
		// step 2 : insert value of bits
		MCUCR_REG |=  copy_u8Trigg;
    17f8:	a5 e5       	ldi	r26, 0x55	; 85
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e5 e5       	ldi	r30, 0x55	; 85
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	90 81       	ld	r25, Z
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	89 2b       	or	r24, r25
    1806:	8c 93       	st	X, r24
    1808:	34 c0       	rjmp	.+104    	; 0x1872 <M_EXTI_void_EnableInt+0xe6>
		break;
	case EXTI_INT1_ID:
		// step 1 : clear bits using mask
		MCUCR_REG &= EXTI_INT1_MASK;
    180a:	a5 e5       	ldi	r26, 0x55	; 85
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e5 e5       	ldi	r30, 0x55	; 85
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	83 7f       	andi	r24, 0xF3	; 243
    1816:	8c 93       	st	X, r24
		// step 2 : insert value of bits
		MCUCR_REG |=  copy_u8Trigg << 2;
    1818:	a5 e5       	ldi	r26, 0x55	; 85
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e5 e5       	ldi	r30, 0x55	; 85
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	28 2f       	mov	r18, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	82 2b       	or	r24, r18
    1834:	8c 93       	st	X, r24
    1836:	1d c0       	rjmp	.+58     	; 0x1872 <M_EXTI_void_EnableInt+0xe6>
		break;
	case EXTI_INT2_ID:
		// step 1 : clear bit
        CLR_BIT(MCUCSR_REG,ISC2_BIT);
    1838:	a4 e5       	ldi	r26, 0x54	; 84
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e4 e5       	ldi	r30, 0x54	; 84
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8f 7b       	andi	r24, 0xBF	; 191
    1844:	8c 93       	st	X, r24
        //step 2 : insert value
        // method 1
     //   MCUCSR_REG |= (GET_BIT(copy_u8Trigg , 0))<<  ISC2_BIT;

        // method 2
        MCUCSR_REG |=  ((copy_u8Trigg & 1)) <<  ISC2_BIT;
    1846:	a4 e5       	ldi	r26, 0x54	; 84
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e4 e5       	ldi	r30, 0x54	; 84
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	28 2f       	mov	r18, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	81 70       	andi	r24, 0x01	; 1
    185a:	90 70       	andi	r25, 0x00	; 0
    185c:	00 24       	eor	r0, r0
    185e:	96 95       	lsr	r25
    1860:	87 95       	ror	r24
    1862:	07 94       	ror	r0
    1864:	96 95       	lsr	r25
    1866:	87 95       	ror	r24
    1868:	07 94       	ror	r0
    186a:	98 2f       	mov	r25, r24
    186c:	80 2d       	mov	r24, r0
    186e:	82 2b       	or	r24, r18
    1870:	8c 93       	st	X, r24
		break;
	}
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <M_EXTI_void_DisableInt>:

void M_EXTI_void_DisableInt(u8 copy_u8IntID)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	0f 92       	push	r0
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(GICR_REG,copy_u8IntID);
    188c:	ab e5       	ldi	r26, 0x5B	; 91
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	eb e5       	ldi	r30, 0x5B	; 91
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <M_EXTI_void_DisableInt+0x2a>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <M_EXTI_void_DisableInt+0x26>
    18ae:	80 95       	com	r24
    18b0:	84 23       	and	r24, r20
    18b2:	8c 93       	st	X, r24
}
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <M_EXTI_void_setCallBackfn>:

void M_EXTI_void_setCallBackfn(void (*ptrfn)(void),u8 copy_u8IntID)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <M_EXTI_void_setCallBackfn+0x6>
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <M_EXTI_void_setCallBackfn+0x8>
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	6b 83       	std	Y+3, r22	; 0x03
    switch(copy_u8IntID)
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3d 83       	std	Y+5, r19	; 0x05
    18d8:	2c 83       	std	Y+4, r18	; 0x04
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	9d 81       	ldd	r25, Y+5	; 0x05
    18de:	86 30       	cpi	r24, 0x06	; 6
    18e0:	91 05       	cpc	r25, r1
    18e2:	59 f0       	breq	.+22     	; 0x18fa <M_EXTI_void_setCallBackfn+0x3e>
    18e4:	2c 81       	ldd	r18, Y+4	; 0x04
    18e6:	3d 81       	ldd	r19, Y+5	; 0x05
    18e8:	27 30       	cpi	r18, 0x07	; 7
    18ea:	31 05       	cpc	r19, r1
    18ec:	69 f0       	breq	.+26     	; 0x1908 <M_EXTI_void_setCallBackfn+0x4c>
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	85 30       	cpi	r24, 0x05	; 5
    18f4:	91 05       	cpc	r25, r1
    18f6:	79 f0       	breq	.+30     	; 0x1916 <M_EXTI_void_setCallBackfn+0x5a>
    18f8:	14 c0       	rjmp	.+40     	; 0x1922 <M_EXTI_void_setCallBackfn+0x66>
    {
    case EXTI_INT0_ID:
    	EXTI_CallBackArr[0] = ptrfn;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	90 93 a2 01 	sts	0x01A2, r25
    1902:	80 93 a1 01 	sts	0x01A1, r24
    1906:	0d c0       	rjmp	.+26     	; 0x1922 <M_EXTI_void_setCallBackfn+0x66>
    	break;
    case EXTI_INT1_ID:
    	EXTI_CallBackArr[1] = ptrfn;
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	90 93 a4 01 	sts	0x01A4, r25
    1910:	80 93 a3 01 	sts	0x01A3, r24
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <M_EXTI_void_setCallBackfn+0x66>
    	break;
    case EXTI_INT2_ID:
    	EXTI_CallBackArr[2] = ptrfn;
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	90 93 a6 01 	sts	0x01A6, r25
    191e:	80 93 a5 01 	sts	0x01A5, r24
    	break;
    }
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <__vector_1>:
ISR(INT0_vect )
{
    1932:	1f 92       	push	r1
    1934:	0f 92       	push	r0
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	0f 92       	push	r0
    193a:	11 24       	eor	r1, r1
    193c:	2f 93       	push	r18
    193e:	3f 93       	push	r19
    1940:	4f 93       	push	r20
    1942:	5f 93       	push	r21
    1944:	6f 93       	push	r22
    1946:	7f 93       	push	r23
    1948:	8f 93       	push	r24
    194a:	9f 93       	push	r25
    194c:	af 93       	push	r26
    194e:	bf 93       	push	r27
    1950:	ef 93       	push	r30
    1952:	ff 93       	push	r31
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62

	if(EXTI_CallBackArr[0] != NULL)
    195c:	80 91 a1 01 	lds	r24, 0x01A1
    1960:	90 91 a2 01 	lds	r25, 0x01A2
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	29 f0       	breq	.+10     	; 0x1972 <__vector_1+0x40>
	{
		EXTI_CallBackArr[0]();
    1968:	e0 91 a1 01 	lds	r30, 0x01A1
    196c:	f0 91 a2 01 	lds	r31, 0x01A2
    1970:	09 95       	icall
	}
}
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	ff 91       	pop	r31
    1978:	ef 91       	pop	r30
    197a:	bf 91       	pop	r27
    197c:	af 91       	pop	r26
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	7f 91       	pop	r23
    1984:	6f 91       	pop	r22
    1986:	5f 91       	pop	r21
    1988:	4f 91       	pop	r20
    198a:	3f 91       	pop	r19
    198c:	2f 91       	pop	r18
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	0f 90       	pop	r0
    1994:	1f 90       	pop	r1
    1996:	18 95       	reti

00001998 <__vector_2>:
ISR(INT1_vect)
{
    1998:	1f 92       	push	r1
    199a:	0f 92       	push	r0
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	0f 92       	push	r0
    19a0:	11 24       	eor	r1, r1
    19a2:	2f 93       	push	r18
    19a4:	3f 93       	push	r19
    19a6:	4f 93       	push	r20
    19a8:	5f 93       	push	r21
    19aa:	6f 93       	push	r22
    19ac:	7f 93       	push	r23
    19ae:	8f 93       	push	r24
    19b0:	9f 93       	push	r25
    19b2:	af 93       	push	r26
    19b4:	bf 93       	push	r27
    19b6:	ef 93       	push	r30
    19b8:	ff 93       	push	r31
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_CallBackArr[1] != NULL)
    19c2:	80 91 a3 01 	lds	r24, 0x01A3
    19c6:	90 91 a4 01 	lds	r25, 0x01A4
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	29 f0       	breq	.+10     	; 0x19d8 <__vector_2+0x40>
		{
			EXTI_CallBackArr[1]();
    19ce:	e0 91 a3 01 	lds	r30, 0x01A3
    19d2:	f0 91 a4 01 	lds	r31, 0x01A4
    19d6:	09 95       	icall
		}
}
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	bf 91       	pop	r27
    19e2:	af 91       	pop	r26
    19e4:	9f 91       	pop	r25
    19e6:	8f 91       	pop	r24
    19e8:	7f 91       	pop	r23
    19ea:	6f 91       	pop	r22
    19ec:	5f 91       	pop	r21
    19ee:	4f 91       	pop	r20
    19f0:	3f 91       	pop	r19
    19f2:	2f 91       	pop	r18
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	0f 90       	pop	r0
    19fa:	1f 90       	pop	r1
    19fc:	18 95       	reti

000019fe <__vector_3>:
ISR(INT2_vect)
{
    19fe:	1f 92       	push	r1
    1a00:	0f 92       	push	r0
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	0f 92       	push	r0
    1a06:	11 24       	eor	r1, r1
    1a08:	2f 93       	push	r18
    1a0a:	3f 93       	push	r19
    1a0c:	4f 93       	push	r20
    1a0e:	5f 93       	push	r21
    1a10:	6f 93       	push	r22
    1a12:	7f 93       	push	r23
    1a14:	8f 93       	push	r24
    1a16:	9f 93       	push	r25
    1a18:	af 93       	push	r26
    1a1a:	bf 93       	push	r27
    1a1c:	ef 93       	push	r30
    1a1e:	ff 93       	push	r31
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_CallBackArr[2] != NULL)
    1a28:	80 91 a5 01 	lds	r24, 0x01A5
    1a2c:	90 91 a6 01 	lds	r25, 0x01A6
    1a30:	00 97       	sbiw	r24, 0x00	; 0
    1a32:	29 f0       	breq	.+10     	; 0x1a3e <__vector_3+0x40>
		{
			EXTI_CallBackArr[2]();
    1a34:	e0 91 a5 01 	lds	r30, 0x01A5
    1a38:	f0 91 a6 01 	lds	r31, 0x01A6
    1a3c:	09 95       	icall
		}
}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <M_DIO_Void_SetPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"


void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	2a 97       	sbiw	r28, 0x0a	; 10
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	8b 83       	std	Y+3, r24	; 0x03
    1a7a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Port = Copy_U8_Number / 10;
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9a e0       	ldi	r25, 0x0A	; 10
    1a80:	69 2f       	mov	r22, r25
    1a82:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodqi4>
    1a86:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Pin  = Copy_U8_Number % 10;
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9a e0       	ldi	r25, 0x0A	; 10
    1a8c:	69 2f       	mov	r22, r25
    1a8e:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodqi4>
    1a92:	89 2f       	mov	r24, r25
    1a94:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1a96:	8c 81       	ldd	r24, Y+4	; 0x04
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3a 87       	std	Y+10, r19	; 0x0a
    1a9e:	29 87       	std	Y+9, r18	; 0x09
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	39 f0       	breq	.+14     	; 0x1ab6 <M_DIO_Void_SetPinDirection+0x52>
    1aa8:	29 85       	ldd	r18, Y+9	; 0x09
    1aaa:	3a 85       	ldd	r19, Y+10	; 0x0a
    1aac:	21 30       	cpi	r18, 0x01	; 1
    1aae:	31 05       	cpc	r19, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <M_DIO_Void_SetPinDirection+0x50>
    1ab2:	76 c0       	rjmp	.+236    	; 0x1ba0 <M_DIO_Void_SetPinDirection+0x13c>
    1ab4:	e4 c0       	rjmp	.+456    	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT :
		switch(Local_U8_Port)
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	38 87       	std	Y+8, r19	; 0x08
    1abe:	2f 83       	std	Y+7, r18	; 0x07
    1ac0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac2:	98 85       	ldd	r25, Y+8	; 0x08
    1ac4:	82 30       	cpi	r24, 0x02	; 2
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	61 f1       	breq	.+88     	; 0x1b22 <M_DIO_Void_SetPinDirection+0xbe>
    1aca:	2f 81       	ldd	r18, Y+7	; 0x07
    1acc:	38 85       	ldd	r19, Y+8	; 0x08
    1ace:	23 30       	cpi	r18, 0x03	; 3
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	34 f4       	brge	.+12     	; 0x1ae0 <M_DIO_Void_SetPinDirection+0x7c>
    1ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad6:	98 85       	ldd	r25, Y+8	; 0x08
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	91 05       	cpc	r25, r1
    1adc:	69 f0       	breq	.+26     	; 0x1af8 <M_DIO_Void_SetPinDirection+0x94>
    1ade:	cf c0       	rjmp	.+414    	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
    1ae0:	2f 81       	ldd	r18, Y+7	; 0x07
    1ae2:	38 85       	ldd	r19, Y+8	; 0x08
    1ae4:	23 30       	cpi	r18, 0x03	; 3
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	89 f1       	breq	.+98     	; 0x1b4c <M_DIO_Void_SetPinDirection+0xe8>
    1aea:	8f 81       	ldd	r24, Y+7	; 0x07
    1aec:	98 85       	ldd	r25, Y+8	; 0x08
    1aee:	84 30       	cpi	r24, 0x04	; 4
    1af0:	91 05       	cpc	r25, r1
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <M_DIO_Void_SetPinDirection+0x92>
    1af4:	40 c0       	rjmp	.+128    	; 0x1b76 <M_DIO_Void_SetPinDirection+0x112>
    1af6:	c3 c0       	rjmp	.+390    	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
    1af8:	aa e3       	ldi	r26, 0x3A	; 58
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	ea e3       	ldi	r30, 0x3A	; 58
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	02 2e       	mov	r0, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <M_DIO_Void_SetPinDirection+0xb2>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0a 94       	dec	r0
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <M_DIO_Void_SetPinDirection+0xae>
    1b1a:	80 95       	com	r24
    1b1c:	84 23       	and	r24, r20
    1b1e:	8c 93       	st	X, r24
    1b20:	ae c0       	rjmp	.+348    	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
    1b22:	a7 e3       	ldi	r26, 0x37	; 55
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e7 e3       	ldi	r30, 0x37	; 55
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <M_DIO_Void_SetPinDirection+0xdc>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <M_DIO_Void_SetPinDirection+0xd8>
    1b44:	80 95       	com	r24
    1b46:	84 23       	and	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	99 c0       	rjmp	.+306    	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
    1b4c:	a4 e3       	ldi	r26, 0x34	; 52
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e4 e3       	ldi	r30, 0x34	; 52
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	48 2f       	mov	r20, r24
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	02 2e       	mov	r0, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <M_DIO_Void_SetPinDirection+0x106>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	0a 94       	dec	r0
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <M_DIO_Void_SetPinDirection+0x102>
    1b6e:	80 95       	com	r24
    1b70:	84 23       	and	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	84 c0       	rjmp	.+264    	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
    1b76:	a1 e3       	ldi	r26, 0x31	; 49
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e1 e3       	ldi	r30, 0x31	; 49
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <M_DIO_Void_SetPinDirection+0x130>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <M_DIO_Void_SetPinDirection+0x12c>
    1b98:	80 95       	com	r24
    1b9a:	84 23       	and	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	6f c0       	rjmp	.+222    	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		                                        break;
	case OUTPUT:
		switch(Local_U8_Port)
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	3e 83       	std	Y+6, r19	; 0x06
    1ba8:	2d 83       	std	Y+5, r18	; 0x05
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	9e 81       	ldd	r25, Y+6	; 0x06
    1bae:	82 30       	cpi	r24, 0x02	; 2
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	51 f1       	breq	.+84     	; 0x1c08 <M_DIO_Void_SetPinDirection+0x1a4>
    1bb4:	2d 81       	ldd	r18, Y+5	; 0x05
    1bb6:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb8:	23 30       	cpi	r18, 0x03	; 3
    1bba:	31 05       	cpc	r19, r1
    1bbc:	34 f4       	brge	.+12     	; 0x1bca <M_DIO_Void_SetPinDirection+0x166>
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	61 f0       	breq	.+24     	; 0x1be0 <M_DIO_Void_SetPinDirection+0x17c>
    1bc8:	5a c0       	rjmp	.+180    	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
    1bca:	2d 81       	ldd	r18, Y+5	; 0x05
    1bcc:	3e 81       	ldd	r19, Y+6	; 0x06
    1bce:	23 30       	cpi	r18, 0x03	; 3
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	71 f1       	breq	.+92     	; 0x1c30 <M_DIO_Void_SetPinDirection+0x1cc>
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	91 05       	cpc	r25, r1
    1bdc:	e9 f1       	breq	.+122    	; 0x1c58 <M_DIO_Void_SetPinDirection+0x1f4>
    1bde:	4f c0       	rjmp	.+158    	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
    1be0:	aa e3       	ldi	r26, 0x3A	; 58
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	ea e3       	ldi	r30, 0x3A	; 58
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <M_DIO_Void_SetPinDirection+0x19a>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <M_DIO_Void_SetPinDirection+0x196>
    1c02:	84 2b       	or	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	3b c0       	rjmp	.+118    	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
		case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
    1c08:	a7 e3       	ldi	r26, 0x37	; 55
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e7 e3       	ldi	r30, 0x37	; 55
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <M_DIO_Void_SetPinDirection+0x1c2>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <M_DIO_Void_SetPinDirection+0x1be>
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	27 c0       	rjmp	.+78     	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
		case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
    1c30:	a4 e3       	ldi	r26, 0x34	; 52
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e4 e3       	ldi	r30, 0x34	; 52
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <M_DIO_Void_SetPinDirection+0x1ea>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <M_DIO_Void_SetPinDirection+0x1e6>
    1c52:	84 2b       	or	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	13 c0       	rjmp	.+38     	; 0x1c7e <M_DIO_Void_SetPinDirection+0x21a>
		case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
    1c58:	a1 e3       	ldi	r26, 0x31	; 49
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e1 e3       	ldi	r30, 0x31	; 49
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	48 2f       	mov	r20, r24
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 2e       	mov	r0, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <M_DIO_Void_SetPinDirection+0x212>
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	0a 94       	dec	r0
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <M_DIO_Void_SetPinDirection+0x20e>
    1c7a:	84 2b       	or	r24, r20
    1c7c:	8c 93       	st	X, r24
		default:                                break;
		}
						   					    break;
	default:                                    break;
	}
}
    1c7e:	2a 96       	adiw	r28, 0x0a	; 10
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <M_DIO_Void_SetPinValue>:
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	2a 97       	sbiw	r28, 0x0a	; 10
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	8b 83       	std	Y+3, r24	; 0x03
    1ca6:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Port = Copy_U8_Number / 10;
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9a e0       	ldi	r25, 0x0A	; 10
    1cac:	69 2f       	mov	r22, r25
    1cae:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodqi4>
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Pin  = Copy_U8_Number % 10;
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9a e0       	ldi	r25, 0x0A	; 10
    1cb8:	69 2f       	mov	r22, r25
    1cba:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodqi4>
    1cbe:	89 2f       	mov	r24, r25
    1cc0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	3a 87       	std	Y+10, r19	; 0x0a
    1cca:	29 87       	std	Y+9, r18	; 0x09
    1ccc:	89 85       	ldd	r24, Y+9	; 0x09
    1cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	39 f0       	breq	.+14     	; 0x1ce2 <M_DIO_Void_SetPinValue+0x52>
    1cd4:	29 85       	ldd	r18, Y+9	; 0x09
    1cd6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cd8:	21 30       	cpi	r18, 0x01	; 1
    1cda:	31 05       	cpc	r19, r1
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <M_DIO_Void_SetPinValue+0x50>
    1cde:	76 c0       	rjmp	.+236    	; 0x1dcc <M_DIO_Void_SetPinValue+0x13c>
    1ce0:	e4 c0       	rjmp	.+456    	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW :
		switch(Local_U8_Port)
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	38 87       	std	Y+8, r19	; 0x08
    1cea:	2f 83       	std	Y+7, r18	; 0x07
    1cec:	8f 81       	ldd	r24, Y+7	; 0x07
    1cee:	98 85       	ldd	r25, Y+8	; 0x08
    1cf0:	82 30       	cpi	r24, 0x02	; 2
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	61 f1       	breq	.+88     	; 0x1d4e <M_DIO_Void_SetPinValue+0xbe>
    1cf6:	2f 81       	ldd	r18, Y+7	; 0x07
    1cf8:	38 85       	ldd	r19, Y+8	; 0x08
    1cfa:	23 30       	cpi	r18, 0x03	; 3
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	34 f4       	brge	.+12     	; 0x1d0c <M_DIO_Void_SetPinValue+0x7c>
    1d00:	8f 81       	ldd	r24, Y+7	; 0x07
    1d02:	98 85       	ldd	r25, Y+8	; 0x08
    1d04:	81 30       	cpi	r24, 0x01	; 1
    1d06:	91 05       	cpc	r25, r1
    1d08:	69 f0       	breq	.+26     	; 0x1d24 <M_DIO_Void_SetPinValue+0x94>
    1d0a:	cf c0       	rjmp	.+414    	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
    1d0c:	2f 81       	ldd	r18, Y+7	; 0x07
    1d0e:	38 85       	ldd	r19, Y+8	; 0x08
    1d10:	23 30       	cpi	r18, 0x03	; 3
    1d12:	31 05       	cpc	r19, r1
    1d14:	89 f1       	breq	.+98     	; 0x1d78 <M_DIO_Void_SetPinValue+0xe8>
    1d16:	8f 81       	ldd	r24, Y+7	; 0x07
    1d18:	98 85       	ldd	r25, Y+8	; 0x08
    1d1a:	84 30       	cpi	r24, 0x04	; 4
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <M_DIO_Void_SetPinValue+0x92>
    1d20:	40 c0       	rjmp	.+128    	; 0x1da2 <M_DIO_Void_SetPinValue+0x112>
    1d22:	c3 c0       	rjmp	.+390    	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    1d24:	ab e3       	ldi	r26, 0x3B	; 59
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	eb e3       	ldi	r30, 0x3B	; 59
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	48 2f       	mov	r20, r24
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	02 2e       	mov	r0, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <M_DIO_Void_SetPinValue+0xb2>
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	0a 94       	dec	r0
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <M_DIO_Void_SetPinValue+0xae>
    1d46:	80 95       	com	r24
    1d48:	84 23       	and	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	ae c0       	rjmp	.+348    	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1d4e:	a8 e3       	ldi	r26, 0x38	; 56
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e8 e3       	ldi	r30, 0x38	; 56
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <M_DIO_Void_SetPinValue+0xdc>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <M_DIO_Void_SetPinValue+0xd8>
    1d70:	80 95       	com	r24
    1d72:	84 23       	and	r24, r20
    1d74:	8c 93       	st	X, r24
    1d76:	99 c0       	rjmp	.+306    	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    1d78:	a5 e3       	ldi	r26, 0x35	; 53
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e5 e3       	ldi	r30, 0x35	; 53
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	48 2f       	mov	r20, r24
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	02 2e       	mov	r0, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <M_DIO_Void_SetPinValue+0x106>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	0a 94       	dec	r0
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <M_DIO_Void_SetPinValue+0x102>
    1d9a:	80 95       	com	r24
    1d9c:	84 23       	and	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	84 c0       	rjmp	.+264    	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    1da2:	a2 e3       	ldi	r26, 0x32	; 50
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e2 e3       	ldi	r30, 0x32	; 50
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <M_DIO_Void_SetPinValue+0x130>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <M_DIO_Void_SetPinValue+0x12c>
    1dc4:	80 95       	com	r24
    1dc6:	84 23       	and	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	6f c0       	rjmp	.+222    	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		                                         break;
	case HIGH:
		switch(Local_U8_Port)
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3e 83       	std	Y+6, r19	; 0x06
    1dd4:	2d 83       	std	Y+5, r18	; 0x05
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	82 30       	cpi	r24, 0x02	; 2
    1ddc:	91 05       	cpc	r25, r1
    1dde:	51 f1       	breq	.+84     	; 0x1e34 <M_DIO_Void_SetPinValue+0x1a4>
    1de0:	2d 81       	ldd	r18, Y+5	; 0x05
    1de2:	3e 81       	ldd	r19, Y+6	; 0x06
    1de4:	23 30       	cpi	r18, 0x03	; 3
    1de6:	31 05       	cpc	r19, r1
    1de8:	34 f4       	brge	.+12     	; 0x1df6 <M_DIO_Void_SetPinValue+0x166>
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	91 05       	cpc	r25, r1
    1df2:	61 f0       	breq	.+24     	; 0x1e0c <M_DIO_Void_SetPinValue+0x17c>
    1df4:	5a c0       	rjmp	.+180    	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
    1df6:	2d 81       	ldd	r18, Y+5	; 0x05
    1df8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dfa:	23 30       	cpi	r18, 0x03	; 3
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	71 f1       	breq	.+92     	; 0x1e5c <M_DIO_Void_SetPinValue+0x1cc>
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	84 30       	cpi	r24, 0x04	; 4
    1e06:	91 05       	cpc	r25, r1
    1e08:	e9 f1       	breq	.+122    	; 0x1e84 <M_DIO_Void_SetPinValue+0x1f4>
    1e0a:	4f c0       	rjmp	.+158    	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    1e0c:	ab e3       	ldi	r26, 0x3B	; 59
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	eb e3       	ldi	r30, 0x3B	; 59
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <M_DIO_Void_SetPinValue+0x19a>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <M_DIO_Void_SetPinValue+0x196>
    1e2e:	84 2b       	or	r24, r20
    1e30:	8c 93       	st	X, r24
    1e32:	3b c0       	rjmp	.+118    	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    1e34:	a8 e3       	ldi	r26, 0x38	; 56
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e8 e3       	ldi	r30, 0x38	; 56
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 2e       	mov	r0, r18
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <M_DIO_Void_SetPinValue+0x1c2>
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	0a 94       	dec	r0
    1e54:	e2 f7       	brpl	.-8      	; 0x1e4e <M_DIO_Void_SetPinValue+0x1be>
    1e56:	84 2b       	or	r24, r20
    1e58:	8c 93       	st	X, r24
    1e5a:	27 c0       	rjmp	.+78     	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    1e5c:	a5 e3       	ldi	r26, 0x35	; 53
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e5 e3       	ldi	r30, 0x35	; 53
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <M_DIO_Void_SetPinValue+0x1ea>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <M_DIO_Void_SetPinValue+0x1e6>
    1e7e:	84 2b       	or	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	13 c0       	rjmp	.+38     	; 0x1eaa <M_DIO_Void_SetPinValue+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    1e84:	a2 e3       	ldi	r26, 0x32	; 50
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e2 e3       	ldi	r30, 0x32	; 50
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <M_DIO_Void_SetPinValue+0x212>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <M_DIO_Void_SetPinValue+0x20e>
    1ea6:	84 2b       	or	r24, r20
    1ea8:	8c 93       	st	X, r24
		default:                                 break;
		}
												 break;
	default:                                     break;
	}
}
    1eaa:	2a 96       	adiw	r28, 0x0a	; 10
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <M_DIO_Void_TogPin>:
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <M_DIO_Void_TogPin+0x6>
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <M_DIO_Void_TogPin+0x8>
    1ec4:	0f 92       	push	r0
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Port = Copy_U8_Number / 10;
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9a e0       	ldi	r25, 0x0A	; 10
    1ed0:	69 2f       	mov	r22, r25
    1ed2:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodqi4>
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Pin  = Copy_U8_Number % 10;
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9a e0       	ldi	r25, 0x0A	; 10
    1edc:	69 2f       	mov	r22, r25
    1ede:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodqi4>
    1ee2:	89 2f       	mov	r24, r25
    1ee4:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Port)
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	3d 83       	std	Y+5, r19	; 0x05
    1eee:	2c 83       	std	Y+4, r18	; 0x04
    1ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef4:	82 30       	cpi	r24, 0x02	; 2
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	51 f1       	breq	.+84     	; 0x1f4e <M_DIO_Void_TogPin+0x92>
    1efa:	2c 81       	ldd	r18, Y+4	; 0x04
    1efc:	3d 81       	ldd	r19, Y+5	; 0x05
    1efe:	23 30       	cpi	r18, 0x03	; 3
    1f00:	31 05       	cpc	r19, r1
    1f02:	34 f4       	brge	.+12     	; 0x1f10 <M_DIO_Void_TogPin+0x54>
    1f04:	8c 81       	ldd	r24, Y+4	; 0x04
    1f06:	9d 81       	ldd	r25, Y+5	; 0x05
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	61 f0       	breq	.+24     	; 0x1f26 <M_DIO_Void_TogPin+0x6a>
    1f0e:	5a c0       	rjmp	.+180    	; 0x1fc4 <M_DIO_Void_TogPin+0x108>
    1f10:	2c 81       	ldd	r18, Y+4	; 0x04
    1f12:	3d 81       	ldd	r19, Y+5	; 0x05
    1f14:	23 30       	cpi	r18, 0x03	; 3
    1f16:	31 05       	cpc	r19, r1
    1f18:	71 f1       	breq	.+92     	; 0x1f76 <M_DIO_Void_TogPin+0xba>
    1f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1e:	84 30       	cpi	r24, 0x04	; 4
    1f20:	91 05       	cpc	r25, r1
    1f22:	e9 f1       	breq	.+122    	; 0x1f9e <M_DIO_Void_TogPin+0xe2>
    1f24:	4f c0       	rjmp	.+158    	; 0x1fc4 <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
    1f26:	ab e3       	ldi	r26, 0x3B	; 59
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	eb e3       	ldi	r30, 0x3B	; 59
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	48 2f       	mov	r20, r24
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	02 2e       	mov	r0, r18
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <M_DIO_Void_TogPin+0x88>
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	0a 94       	dec	r0
    1f46:	e2 f7       	brpl	.-8      	; 0x1f40 <M_DIO_Void_TogPin+0x84>
    1f48:	84 27       	eor	r24, r20
    1f4a:	8c 93       	st	X, r24
    1f4c:	3b c0       	rjmp	.+118    	; 0x1fc4 <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
    1f4e:	a8 e3       	ldi	r26, 0x38	; 56
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e8 e3       	ldi	r30, 0x38	; 56
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	48 2f       	mov	r20, r24
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	02 2e       	mov	r0, r18
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <M_DIO_Void_TogPin+0xb0>
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	0a 94       	dec	r0
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <M_DIO_Void_TogPin+0xac>
    1f70:	84 27       	eor	r24, r20
    1f72:	8c 93       	st	X, r24
    1f74:	27 c0       	rjmp	.+78     	; 0x1fc4 <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
    1f76:	a5 e3       	ldi	r26, 0x35	; 53
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e5 e3       	ldi	r30, 0x35	; 53
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	48 2f       	mov	r20, r24
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	02 2e       	mov	r0, r18
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <M_DIO_Void_TogPin+0xd8>
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	0a 94       	dec	r0
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <M_DIO_Void_TogPin+0xd4>
    1f98:	84 27       	eor	r24, r20
    1f9a:	8c 93       	st	X, r24
    1f9c:	13 c0       	rjmp	.+38     	; 0x1fc4 <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
    1f9e:	a2 e3       	ldi	r26, 0x32	; 50
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e2 e3       	ldi	r30, 0x32	; 50
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	48 2f       	mov	r20, r24
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	02 2e       	mov	r0, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <M_DIO_Void_TogPin+0x100>
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	0a 94       	dec	r0
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <M_DIO_Void_TogPin+0xfc>
    1fc0:	84 27       	eor	r24, r20
    1fc2:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <M_DIO_U8_GetPinValue>:
u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Number)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <M_DIO_U8_GetPinValue+0x6>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <M_DIO_U8_GetPinValue+0x8>
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <M_DIO_U8_GetPinValue+0xa>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Value = 0;
    1fe4:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_U8_Port = Copy_U8_Number / 10;
    1fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe8:	9a e0       	ldi	r25, 0x0A	; 10
    1fea:	69 2f       	mov	r22, r25
    1fec:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodqi4>
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Pin  = Copy_U8_Number % 10;
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	9a e0       	ldi	r25, 0x0A	; 10
    1ff6:	69 2f       	mov	r22, r25
    1ff8:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__udivmodqi4>
    1ffc:	89 2f       	mov	r24, r25
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Port)
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	3e 83       	std	Y+6, r19	; 0x06
    2008:	2d 83       	std	Y+5, r18	; 0x05
    200a:	4d 81       	ldd	r20, Y+5	; 0x05
    200c:	5e 81       	ldd	r21, Y+6	; 0x06
    200e:	42 30       	cpi	r20, 0x02	; 2
    2010:	51 05       	cpc	r21, r1
    2012:	41 f1       	breq	.+80     	; 0x2064 <M_DIO_U8_GetPinValue+0x90>
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	83 30       	cpi	r24, 0x03	; 3
    201a:	91 05       	cpc	r25, r1
    201c:	34 f4       	brge	.+12     	; 0x202a <M_DIO_U8_GetPinValue+0x56>
    201e:	2d 81       	ldd	r18, Y+5	; 0x05
    2020:	3e 81       	ldd	r19, Y+6	; 0x06
    2022:	21 30       	cpi	r18, 0x01	; 1
    2024:	31 05       	cpc	r19, r1
    2026:	61 f0       	breq	.+24     	; 0x2040 <M_DIO_U8_GetPinValue+0x6c>
    2028:	52 c0       	rjmp	.+164    	; 0x20ce <M_DIO_U8_GetPinValue+0xfa>
    202a:	4d 81       	ldd	r20, Y+5	; 0x05
    202c:	5e 81       	ldd	r21, Y+6	; 0x06
    202e:	43 30       	cpi	r20, 0x03	; 3
    2030:	51 05       	cpc	r21, r1
    2032:	51 f1       	breq	.+84     	; 0x2088 <M_DIO_U8_GetPinValue+0xb4>
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	84 30       	cpi	r24, 0x04	; 4
    203a:	91 05       	cpc	r25, r1
    203c:	b9 f1       	breq	.+110    	; 0x20ac <M_DIO_U8_GetPinValue+0xd8>
    203e:	47 c0       	rjmp	.+142    	; 0x20ce <M_DIO_U8_GetPinValue+0xfa>
	{
	case 1: Local_U8_Value = GET_BIT(PINA_REG,Local_U8_Pin); break;
    2040:	e9 e3       	ldi	r30, 0x39	; 57
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	88 2f       	mov	r24, r24
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a9 01       	movw	r20, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <M_DIO_U8_GetPinValue+0x84>
    2054:	55 95       	asr	r21
    2056:	47 95       	ror	r20
    2058:	8a 95       	dec	r24
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <M_DIO_U8_GetPinValue+0x80>
    205c:	ca 01       	movw	r24, r20
    205e:	81 70       	andi	r24, 0x01	; 1
    2060:	8b 83       	std	Y+3, r24	; 0x03
    2062:	35 c0       	rjmp	.+106    	; 0x20ce <M_DIO_U8_GetPinValue+0xfa>
	case 2: Local_U8_Value = GET_BIT(PINB_REG,Local_U8_Pin); break;
    2064:	e6 e3       	ldi	r30, 0x36	; 54
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	88 2f       	mov	r24, r24
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a9 01       	movw	r20, r18
    2076:	02 c0       	rjmp	.+4      	; 0x207c <M_DIO_U8_GetPinValue+0xa8>
    2078:	55 95       	asr	r21
    207a:	47 95       	ror	r20
    207c:	8a 95       	dec	r24
    207e:	e2 f7       	brpl	.-8      	; 0x2078 <M_DIO_U8_GetPinValue+0xa4>
    2080:	ca 01       	movw	r24, r20
    2082:	81 70       	andi	r24, 0x01	; 1
    2084:	8b 83       	std	Y+3, r24	; 0x03
    2086:	23 c0       	rjmp	.+70     	; 0x20ce <M_DIO_U8_GetPinValue+0xfa>
	case 3: Local_U8_Value = GET_BIT(PINC_REG,Local_U8_Pin); break;
    2088:	e3 e3       	ldi	r30, 0x33	; 51
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a9 01       	movw	r20, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <M_DIO_U8_GetPinValue+0xcc>
    209c:	55 95       	asr	r21
    209e:	47 95       	ror	r20
    20a0:	8a 95       	dec	r24
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <M_DIO_U8_GetPinValue+0xc8>
    20a4:	ca 01       	movw	r24, r20
    20a6:	81 70       	andi	r24, 0x01	; 1
    20a8:	8b 83       	std	Y+3, r24	; 0x03
    20aa:	11 c0       	rjmp	.+34     	; 0x20ce <M_DIO_U8_GetPinValue+0xfa>
	case 4: Local_U8_Value = GET_BIT(PIND_REG,Local_U8_Pin); break;
    20ac:	e0 e3       	ldi	r30, 0x30	; 48
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	88 2f       	mov	r24, r24
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a9 01       	movw	r20, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <M_DIO_U8_GetPinValue+0xf0>
    20c0:	55 95       	asr	r21
    20c2:	47 95       	ror	r20
    20c4:	8a 95       	dec	r24
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <M_DIO_U8_GetPinValue+0xec>
    20c8:	ca 01       	movw	r24, r20
    20ca:	81 70       	andi	r24, 0x01	; 1
    20cc:	8b 83       	std	Y+3, r24	; 0x03
	default:                                                 break;
	}
	return Local_U8_Value;
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20d0:	26 96       	adiw	r28, 0x06	; 6
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <M_ADC_void_Init>:
#include "ADC_priv.h"
#include "ADC_config.h"
#include "ADC_int.h"

void M_ADC_void_Init(u8 copy_u8presclaer, u8 copy_vref)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <M_ADC_void_Init+0x6>
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	6a 83       	std	Y+2, r22	; 0x02
  // step 1 : choose prescaler
   ADCSRA_REG &= ADC_PRESCALER_MASK;
    20f0:	a6 e2       	ldi	r26, 0x26	; 38
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e6 e2       	ldi	r30, 0x26	; 38
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	88 7f       	andi	r24, 0xF8	; 248
    20fc:	8c 93       	st	X, r24
   ADCSRA_REG |= copy_u8presclaer;
    20fe:	a6 e2       	ldi	r26, 0x26	; 38
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e6 e2       	ldi	r30, 0x26	; 38
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	90 81       	ld	r25, Z
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	89 2b       	or	r24, r25
    210c:	8c 93       	st	X, r24

  // step 2 : Disable Interrupt
   CLR_BIT( ADCSRA_REG,ADIE_BIT);
    210e:	a6 e2       	ldi	r26, 0x26	; 38
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e6 e2       	ldi	r30, 0x26	; 38
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	87 7f       	andi	r24, 0xF7	; 247
    211a:	8c 93       	st	X, r24
  // step 3 : right adjust
   CLR_BIT(ADMUX_REG,ADLAR_BIT);
    211c:	a7 e2       	ldi	r26, 0x27	; 39
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e7 e2       	ldi	r30, 0x27	; 39
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	8f 7d       	andi	r24, 0xDF	; 223
    2128:	8c 93       	st	X, r24
  // step 4 : disable auto trigger
   CLR_BIT(ADCSRA_REG,ADATE_BIT);
    212a:	a6 e2       	ldi	r26, 0x26	; 38
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e6 e2       	ldi	r30, 0x26	; 38
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8f 7d       	andi	r24, 0xDF	; 223
    2136:	8c 93       	st	X, r24
	// step 5 : choose vref
   ADMUX_REG &= ADC_VREF_MASK;
    2138:	a7 e2       	ldi	r26, 0x27	; 39
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e7 e2       	ldi	r30, 0x27	; 39
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	8f 73       	andi	r24, 0x3F	; 63
    2144:	8c 93       	st	X, r24
   ADMUX_REG |= (copy_vref << 6);
    2146:	a7 e2       	ldi	r26, 0x27	; 39
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	e7 e2       	ldi	r30, 0x27	; 39
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	28 2f       	mov	r18, r24
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	88 2f       	mov	r24, r24
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	00 24       	eor	r0, r0
    215a:	96 95       	lsr	r25
    215c:	87 95       	ror	r24
    215e:	07 94       	ror	r0
    2160:	96 95       	lsr	r25
    2162:	87 95       	ror	r24
    2164:	07 94       	ror	r0
    2166:	98 2f       	mov	r25, r24
    2168:	80 2d       	mov	r24, r0
    216a:	82 2b       	or	r24, r18
    216c:	8c 93       	st	X, r24
	// step 6 : Enable ADC
   SET_BIT(ADCSRA_REG , ADEN_BIT);
    216e:	a6 e2       	ldi	r26, 0x26	; 38
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e6 e2       	ldi	r30, 0x26	; 38
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	80 68       	ori	r24, 0x80	; 128
    217a:	8c 93       	st	X, r24
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <M_ADC_u16_adcRead>:
u16 M_ADC_u16_adcRead(u8 copy_u8Channel )
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	0f 92       	push	r0
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	89 83       	std	Y+1, r24	; 0x01
   // step 1 : choose channel
	ADMUX_REG &= ADC_CHANNEL_MASK;
    2192:	a7 e2       	ldi	r26, 0x27	; 39
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e7 e2       	ldi	r30, 0x27	; 39
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	80 7e       	andi	r24, 0xE0	; 224
    219e:	8c 93       	st	X, r24
	ADMUX_REG |= copy_u8Channel;
    21a0:	a7 e2       	ldi	r26, 0x27	; 39
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e7 e2       	ldi	r30, 0x27	; 39
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	90 81       	ld	r25, Z
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	89 2b       	or	r24, r25
    21ae:	8c 93       	st	X, r24
	// step 2 : Enable (start Conversion )
    SET_BIT(ADCSRA_REG,ADSC_BIT);
    21b0:	a6 e2       	ldi	r26, 0x26	; 38
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e6 e2       	ldi	r30, 0x26	; 38
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	80 64       	ori	r24, 0x40	; 64
    21bc:	8c 93       	st	X, r24
	// step 3 : wait until conversion is done
     while(GET_BIT(ADCSRA_REG,ADIF_BIT)== 0);
    21be:	e6 e2       	ldi	r30, 0x26	; 38
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	82 95       	swap	r24
    21c6:	8f 70       	andi	r24, 0x0F	; 15
    21c8:	88 2f       	mov	r24, r24
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	81 70       	andi	r24, 0x01	; 1
    21ce:	90 70       	andi	r25, 0x00	; 0
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	a9 f3       	breq	.-22     	; 0x21be <M_ADC_u16_adcRead+0x38>
	//step 4 : return value
     return ADC_REG;
    21d4:	e4 e2       	ldi	r30, 0x24	; 36
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	91 81       	ldd	r25, Z+1	; 0x01
}
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <H_Ultrasonic_void_Init>:
static u16  g_Reading2 = 0;

static u8 g_StateCounter  = 0;

void H_Ultrasonic_void_Init(void)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
	// Init Timer 1
		// step 1 : Init Timer 1 in Normal mode
		M_TIMER1_void_Init();
    21ec:	0e 94 9a 08 	call	0x1134	; 0x1134 <M_TIMER1_void_Init>

		// step 2 : Init ICU
		M_TIMER1_ICU_void_Init();
    21f0:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <M_TIMER1_ICU_void_Init>

		// step 3 : set cal back
		M_TIMER1_ICU_void_setCallBack(A_ICU_HW);
    21f4:	87 e5       	ldi	r24, 0x57	; 87
    21f6:	92 e1       	ldi	r25, 0x12	; 18
    21f8:	0e 94 0a 09 	call	0x1214	; 0x1214 <M_TIMER1_ICU_void_setCallBack>

		// step 4 : Enable ICU Interrupt
		M_TIMER1_ICU_void_EnableInt();
    21fc:	0e 94 27 09 	call	0x124e	; 0x124e <M_TIMER1_ICU_void_EnableInt>

		// step 5 : config ICP direction (input capture pin) as input
		M_DIO_Void_SetPinDirection(PD6_PIN, INPUT);
    2200:	8e e2       	ldi	r24, 0x2E	; 46
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>

		// config ULTRASONIC_TRIGGER_PIN  as output (Trigger to ultraSonic)
		M_DIO_Void_SetPinDirection(ULTRASONIC_TRIGGER_PIN ,OUTPUT);
    2208:	83 e2       	ldi	r24, 0x23	; 35
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
}
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <H_Ultrasonic_u16_Read>:


u16 H_Ultrasonic_u16_Read(void)
{
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	a2 97       	sbiw	r28, 0x22	; 34
    2220:	0f b6       	in	r0, 0x3f	; 63
    2222:	f8 94       	cli
    2224:	de bf       	out	0x3e, r29	; 62
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	cd bf       	out	0x3d, r28	; 61
	 u32 PeriodTicks;
	 f32 time;
	 u16 Local_Distance;

	 M_DIO_Void_SetPinValue(ULTRASONIC_TRIGGER_PIN, HIGH);
    222a:	83 e2       	ldi	r24, 0x23	; 35
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	a0 e2       	ldi	r26, 0x20	; 32
    2238:	b1 e4       	ldi	r27, 0x41	; 65
    223a:	8d 8b       	std	Y+21, r24	; 0x15
    223c:	9e 8b       	std	Y+22, r25	; 0x16
    223e:	af 8b       	std	Y+23, r26	; 0x17
    2240:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2242:	6d 89       	ldd	r22, Y+21	; 0x15
    2244:	7e 89       	ldd	r23, Y+22	; 0x16
    2246:	8f 89       	ldd	r24, Y+23	; 0x17
    2248:	98 8d       	ldd	r25, Y+24	; 0x18
    224a:	2b ea       	ldi	r18, 0xAB	; 171
    224c:	3a ea       	ldi	r19, 0xAA	; 170
    224e:	4a ea       	ldi	r20, 0xAA	; 170
    2250:	50 e4       	ldi	r21, 0x40	; 64
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	89 8b       	std	Y+17, r24	; 0x11
    225c:	9a 8b       	std	Y+18, r25	; 0x12
    225e:	ab 8b       	std	Y+19, r26	; 0x13
    2260:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2262:	69 89       	ldd	r22, Y+17	; 0x11
    2264:	7a 89       	ldd	r23, Y+18	; 0x12
    2266:	8b 89       	ldd	r24, Y+19	; 0x13
    2268:	9c 89       	ldd	r25, Y+20	; 0x14
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e8       	ldi	r20, 0x80	; 128
    2270:	5f e3       	ldi	r21, 0x3F	; 63
    2272:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2276:	88 23       	and	r24, r24
    2278:	1c f4       	brge	.+6      	; 0x2280 <H_Ultrasonic_u16_Read+0x6a>
		__ticks = 1;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	88 8b       	std	Y+16, r24	; 0x10
    227e:	91 c0       	rjmp	.+290    	; 0x23a2 <H_Ultrasonic_u16_Read+0x18c>
	else if (__tmp > 255)
    2280:	69 89       	ldd	r22, Y+17	; 0x11
    2282:	7a 89       	ldd	r23, Y+18	; 0x12
    2284:	8b 89       	ldd	r24, Y+19	; 0x13
    2286:	9c 89       	ldd	r25, Y+20	; 0x14
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4f e7       	ldi	r20, 0x7F	; 127
    228e:	53 e4       	ldi	r21, 0x43	; 67
    2290:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2294:	18 16       	cp	r1, r24
    2296:	0c f0       	brlt	.+2      	; 0x229a <H_Ultrasonic_u16_Read+0x84>
    2298:	7b c0       	rjmp	.+246    	; 0x2390 <H_Ultrasonic_u16_Read+0x17a>
	{
		_delay_ms(__us / 1000.0);
    229a:	6d 89       	ldd	r22, Y+21	; 0x15
    229c:	7e 89       	ldd	r23, Y+22	; 0x16
    229e:	8f 89       	ldd	r24, Y+23	; 0x17
    22a0:	98 8d       	ldd	r25, Y+24	; 0x18
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a e7       	ldi	r20, 0x7A	; 122
    22a8:	54 e4       	ldi	r21, 0x44	; 68
    22aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	8c 87       	std	Y+12, r24	; 0x0c
    22b4:	9d 87       	std	Y+13, r25	; 0x0d
    22b6:	ae 87       	std	Y+14, r26	; 0x0e
    22b8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    22bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    22be:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a e7       	ldi	r20, 0x7A	; 122
    22c8:	55 e4       	ldi	r21, 0x45	; 69
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	88 87       	std	Y+8, r24	; 0x08
    22d4:	99 87       	std	Y+9, r25	; 0x09
    22d6:	aa 87       	std	Y+10, r26	; 0x0a
    22d8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22da:	68 85       	ldd	r22, Y+8	; 0x08
    22dc:	79 85       	ldd	r23, Y+9	; 0x09
    22de:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e8       	ldi	r20, 0x80	; 128
    22e8:	5f e3       	ldi	r21, 0x3F	; 63
    22ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ee:	88 23       	and	r24, r24
    22f0:	2c f4       	brge	.+10     	; 0x22fc <H_Ultrasonic_u16_Read+0xe6>
		__ticks = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9f 83       	std	Y+7, r25	; 0x07
    22f8:	8e 83       	std	Y+6, r24	; 0x06
    22fa:	3f c0       	rjmp	.+126    	; 0x237a <H_Ultrasonic_u16_Read+0x164>
	else if (__tmp > 65535)
    22fc:	68 85       	ldd	r22, Y+8	; 0x08
    22fe:	79 85       	ldd	r23, Y+9	; 0x09
    2300:	8a 85       	ldd	r24, Y+10	; 0x0a
    2302:	9b 85       	ldd	r25, Y+11	; 0x0b
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	3f ef       	ldi	r19, 0xFF	; 255
    2308:	4f e7       	ldi	r20, 0x7F	; 127
    230a:	57 e4       	ldi	r21, 0x47	; 71
    230c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2310:	18 16       	cp	r1, r24
    2312:	4c f5       	brge	.+82     	; 0x2366 <H_Ultrasonic_u16_Read+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2314:	6c 85       	ldd	r22, Y+12	; 0x0c
    2316:	7d 85       	ldd	r23, Y+13	; 0x0d
    2318:	8e 85       	ldd	r24, Y+14	; 0x0e
    231a:	9f 85       	ldd	r25, Y+15	; 0x0f
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e2       	ldi	r20, 0x20	; 32
    2322:	51 e4       	ldi	r21, 0x41	; 65
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9f 83       	std	Y+7, r25	; 0x07
    233a:	8e 83       	std	Y+6, r24	; 0x06
    233c:	0f c0       	rjmp	.+30     	; 0x235c <H_Ultrasonic_u16_Read+0x146>
    233e:	80 e9       	ldi	r24, 0x90	; 144
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	9d 83       	std	Y+5, r25	; 0x05
    2344:	8c 83       	std	Y+4, r24	; 0x04
    2346:	8c 81       	ldd	r24, Y+4	; 0x04
    2348:	9d 81       	ldd	r25, Y+5	; 0x05
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <H_Ultrasonic_u16_Read+0x134>
    234e:	9d 83       	std	Y+5, r25	; 0x05
    2350:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2352:	8e 81       	ldd	r24, Y+6	; 0x06
    2354:	9f 81       	ldd	r25, Y+7	; 0x07
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	9f 83       	std	Y+7, r25	; 0x07
    235a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235c:	8e 81       	ldd	r24, Y+6	; 0x06
    235e:	9f 81       	ldd	r25, Y+7	; 0x07
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	69 f7       	brne	.-38     	; 0x233e <H_Ultrasonic_u16_Read+0x128>
    2364:	24 c0       	rjmp	.+72     	; 0x23ae <H_Ultrasonic_u16_Read+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2366:	68 85       	ldd	r22, Y+8	; 0x08
    2368:	79 85       	ldd	r23, Y+9	; 0x09
    236a:	8a 85       	ldd	r24, Y+10	; 0x0a
    236c:	9b 85       	ldd	r25, Y+11	; 0x0b
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9f 83       	std	Y+7, r25	; 0x07
    2378:	8e 83       	std	Y+6, r24	; 0x06
    237a:	8e 81       	ldd	r24, Y+6	; 0x06
    237c:	9f 81       	ldd	r25, Y+7	; 0x07
    237e:	9b 83       	std	Y+3, r25	; 0x03
    2380:	8a 83       	std	Y+2, r24	; 0x02
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	9b 81       	ldd	r25, Y+3	; 0x03
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <H_Ultrasonic_u16_Read+0x170>
    238a:	9b 83       	std	Y+3, r25	; 0x03
    238c:	8a 83       	std	Y+2, r24	; 0x02
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <H_Ultrasonic_u16_Read+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2390:	69 89       	ldd	r22, Y+17	; 0x11
    2392:	7a 89       	ldd	r23, Y+18	; 0x12
    2394:	8b 89       	ldd	r24, Y+19	; 0x13
    2396:	9c 89       	ldd	r25, Y+20	; 0x14
    2398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	88 8b       	std	Y+16, r24	; 0x10
    23a2:	88 89       	ldd	r24, Y+16	; 0x10
    23a4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	8a 95       	dec	r24
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <H_Ultrasonic_u16_Read+0x192>
    23ac:	89 83       	std	Y+1, r24	; 0x01
	    _delay_us(10);
	   M_DIO_Void_SetPinValue(ULTRASONIC_TRIGGER_PIN, LOW);
    23ae:	83 e2       	ldi	r24, 0x23	; 35
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>

		while(g_StateCounter < 2); // CPU is waiting for readings
    23b6:	80 91 ab 01 	lds	r24, 0x01AB
    23ba:	82 30       	cpi	r24, 0x02	; 2
    23bc:	e0 f3       	brcs	.-8      	; 0x23b6 <H_Ultrasonic_u16_Read+0x1a0>
		g_StateCounter=0;
    23be:	10 92 ab 01 	sts	0x01AB, r1
		 PeriodTicks =g_Reading2 - g_Reading1;
    23c2:	20 91 a9 01 	lds	r18, 0x01A9
    23c6:	30 91 aa 01 	lds	r19, 0x01AA
    23ca:	80 91 a7 01 	lds	r24, 0x01A7
    23ce:	90 91 a8 01 	lds	r25, 0x01A8
    23d2:	a9 01       	movw	r20, r18
    23d4:	48 1b       	sub	r20, r24
    23d6:	59 0b       	sbc	r21, r25
    23d8:	ca 01       	movw	r24, r20
    23da:	cc 01       	movw	r24, r24
    23dc:	a0 e0       	ldi	r26, 0x00	; 0
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	8f 8f       	std	Y+31, r24	; 0x1f
    23e2:	98 a3       	std	Y+32, r25	; 0x20
    23e4:	a9 a3       	std	Y+33, r26	; 0x21
    23e6:	ba a3       	std	Y+34, r27	; 0x22
	     time = (PeriodTicks * 16 )/1000000.0;
    23e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ea:	98 a1       	ldd	r25, Y+32	; 0x20
    23ec:	a9 a1       	ldd	r26, Y+33	; 0x21
    23ee:	ba a1       	ldd	r27, Y+34	; 0x22
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	aa 1f       	adc	r26, r26
    23f6:	bb 1f       	adc	r27, r27
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	aa 1f       	adc	r26, r26
    23fe:	bb 1f       	adc	r27, r27
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	aa 1f       	adc	r26, r26
    2406:	bb 1f       	adc	r27, r27
    2408:	88 0f       	add	r24, r24
    240a:	99 1f       	adc	r25, r25
    240c:	aa 1f       	adc	r26, r26
    240e:	bb 1f       	adc	r27, r27
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	34 e2       	ldi	r19, 0x24	; 36
    2424:	44 e7       	ldi	r20, 0x74	; 116
    2426:	59 e4       	ldi	r21, 0x49	; 73
    2428:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8b 8f       	std	Y+27, r24	; 0x1b
    2432:	9c 8f       	std	Y+28, r25	; 0x1c
    2434:	ad 8f       	std	Y+29, r26	; 0x1d
    2436:	be 8f       	std	Y+30, r27	; 0x1e
	     Local_Distance = ceil((time/2) * 34300);
    2438:	6b 8d       	ldd	r22, Y+27	; 0x1b
    243a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    243c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    243e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	50 e4       	ldi	r21, 0x40	; 64
    2448:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	3c ef       	ldi	r19, 0xFC	; 252
    2458:	45 e0       	ldi	r20, 0x05	; 5
    245a:	57 e4       	ldi	r21, 0x47	; 71
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	bc 01       	movw	r22, r24
    2466:	cd 01       	movw	r24, r26
    2468:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <ceil>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9a 8f       	std	Y+26, r25	; 0x1a
    247e:	89 8f       	std	Y+25, r24	; 0x19


	     return Local_Distance;
    2480:	89 8d       	ldd	r24, Y+25	; 0x19
    2482:	9a 8d       	ldd	r25, Y+26	; 0x1a
}
    2484:	a2 96       	adiw	r28, 0x22	; 34
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <H_Ultrasonic_void_ReStart>:

void H_Ultrasonic_void_ReStart(void)
{
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_ICU_void_setTrigger(TIMER1_ICU_RAISING_TRIGG);
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_TIMER1_ICU_void_setTrigger>
	//Enable ICU Interrupt
	M_TIMER1_ICU_void_EnableInt();
    24a4:	0e 94 27 09 	call	0x124e	; 0x124e <M_TIMER1_ICU_void_EnableInt>

}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <A_ICU_HW>:


void A_ICU_HW(void)
{
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62
	if(g_StateCounter == 0)
    24b6:	80 91 ab 01 	lds	r24, 0x01AB
    24ba:	88 23       	and	r24, r24
    24bc:	51 f4       	brne	.+20     	; 0x24d2 <A_ICU_HW+0x24>
	{
		// take reading at 1st rising edge
		g_Reading1 = M_TIMER1_ICU_u16_readInput();
    24be:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_TIMER1_ICU_u16_readInput>
    24c2:	90 93 a8 01 	sts	0x01A8, r25
    24c6:	80 93 a7 01 	sts	0x01A7, r24
		// change trigger to be falling
		M_TIMER1_ICU_void_setTrigger(TIMER1_ICU_FALLING_TRIGG);
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <M_TIMER1_ICU_void_setTrigger>
    24d0:	0c c0       	rjmp	.+24     	; 0x24ea <A_ICU_HW+0x3c>
	}
	else if(g_StateCounter == 1)
    24d2:	80 91 ab 01 	lds	r24, 0x01AB
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	41 f4       	brne	.+16     	; 0x24ea <A_ICU_HW+0x3c>
	{
		// take reading at falling edge
		g_Reading2 = M_TIMER1_ICU_u16_readInput();
    24da:	0e 94 1c 09 	call	0x1238	; 0x1238 <M_TIMER1_ICU_u16_readInput>
    24de:	90 93 aa 01 	sts	0x01AA, r25
    24e2:	80 93 a9 01 	sts	0x01A9, r24
		// disable ICU interrupt
		M_TIMER1_ICU_void_DisableInt();
    24e6:	0e 94 35 09 	call	0x126a	; 0x126a <M_TIMER1_ICU_void_DisableInt>
	}

	g_StateCounter++;
    24ea:	80 91 ab 01 	lds	r24, 0x01AB
    24ee:	8f 5f       	subi	r24, 0xFF	; 255
    24f0:	80 93 ab 01 	sts	0x01AB, r24
}
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <H_RELAY_Void_RELAYInit>:

#include "RELAY_Config.h"
#include "RELAY_Interface.h"

void H_RELAY_Void_RELAYInit(u8 Copy_U8_Relay)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <H_RELAY_Void_RELAYInit+0x6>
    2500:	0f 92       	push	r0
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Relay)
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	3b 83       	std	Y+3, r19	; 0x03
    2510:	2a 83       	std	Y+2, r18	; 0x02
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	9b 81       	ldd	r25, Y+3	; 0x03
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	91 05       	cpc	r25, r1
    251a:	31 f0       	breq	.+12     	; 0x2528 <H_RELAY_Void_RELAYInit+0x2e>
    251c:	2a 81       	ldd	r18, Y+2	; 0x02
    251e:	3b 81       	ldd	r19, Y+3	; 0x03
    2520:	22 30       	cpi	r18, 0x02	; 2
    2522:	31 05       	cpc	r19, r1
    2524:	31 f0       	breq	.+12     	; 0x2532 <H_RELAY_Void_RELAYInit+0x38>
    2526:	09 c0       	rjmp	.+18     	; 0x253a <H_RELAY_Void_RELAYInit+0x40>
	{
	  case 1: M_DIO_Void_SetPinDirection(RELAY_PIN1,OUTPUT); break;
    2528:	82 e2       	ldi	r24, 0x22	; 34
    252a:	61 e0       	ldi	r22, 0x01	; 1
    252c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
    2530:	04 c0       	rjmp	.+8      	; 0x253a <H_RELAY_Void_RELAYInit+0x40>
	  case 2: M_DIO_Void_SetPinDirection(RELAY_PIN2,OUTPUT); break;
    2532:	81 e2       	ldi	r24, 0x21	; 33
    2534:	61 e0       	ldi	r22, 0x01	; 1
    2536:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
	  default:                                           break;
	}
}
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <H_RELAY_Void_RELAYOn>:
void H_RELAY_Void_RELAYOn(u8 Copy_U8_Relay)
{
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	00 d0       	rcall	.+0      	; 0x254c <H_RELAY_Void_RELAYOn+0x6>
    254c:	0f 92       	push	r0
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Relay)
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	3b 83       	std	Y+3, r19	; 0x03
    255c:	2a 83       	std	Y+2, r18	; 0x02
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	9b 81       	ldd	r25, Y+3	; 0x03
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	91 05       	cpc	r25, r1
    2566:	31 f0       	breq	.+12     	; 0x2574 <H_RELAY_Void_RELAYOn+0x2e>
    2568:	2a 81       	ldd	r18, Y+2	; 0x02
    256a:	3b 81       	ldd	r19, Y+3	; 0x03
    256c:	22 30       	cpi	r18, 0x02	; 2
    256e:	31 05       	cpc	r19, r1
    2570:	31 f0       	breq	.+12     	; 0x257e <H_RELAY_Void_RELAYOn+0x38>
    2572:	09 c0       	rjmp	.+18     	; 0x2586 <H_RELAY_Void_RELAYOn+0x40>
		{
          case 1 : M_DIO_Void_SetPinValue(RELAY_PIN1,HIGH);  break;
    2574:	82 e2       	ldi	r24, 0x22	; 34
    2576:	61 e0       	ldi	r22, 0x01	; 1
    2578:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    257c:	04 c0       	rjmp	.+8      	; 0x2586 <H_RELAY_Void_RELAYOn+0x40>
          case 2 : M_DIO_Void_SetPinValue(RELAY_PIN2,HIGH);  break;
    257e:	81 e2       	ldi	r24, 0x21	; 33
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
          default:                                       break;
		}
}
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <H_RELAY_Void_RELAYOff>:
void H_RELAY_Void_RELAYOff(u8 Copy_U8_Relay)
{
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	00 d0       	rcall	.+0      	; 0x2598 <H_RELAY_Void_RELAYOff+0x6>
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Relay)
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	3b 83       	std	Y+3, r19	; 0x03
    25a8:	2a 83       	std	Y+2, r18	; 0x02
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	9b 81       	ldd	r25, Y+3	; 0x03
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	91 05       	cpc	r25, r1
    25b2:	31 f0       	breq	.+12     	; 0x25c0 <H_RELAY_Void_RELAYOff+0x2e>
    25b4:	2a 81       	ldd	r18, Y+2	; 0x02
    25b6:	3b 81       	ldd	r19, Y+3	; 0x03
    25b8:	22 30       	cpi	r18, 0x02	; 2
    25ba:	31 05       	cpc	r19, r1
    25bc:	31 f0       	breq	.+12     	; 0x25ca <H_RELAY_Void_RELAYOff+0x38>
    25be:	09 c0       	rjmp	.+18     	; 0x25d2 <H_RELAY_Void_RELAYOff+0x40>
			{
	       case 1 : M_DIO_Void_SetPinValue(RELAY_PIN1,LOW);  break;
    25c0:	82 e2       	ldi	r24, 0x22	; 34
    25c2:	60 e0       	ldi	r22, 0x00	; 0
    25c4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    25c8:	04 c0       	rjmp	.+8      	; 0x25d2 <H_RELAY_Void_RELAYOff+0x40>
	       case 2 : M_DIO_Void_SetPinValue(RELAY_PIN2,LOW);  break;
    25ca:	81 e2       	ldi	r24, 0x21	; 33
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
	       default:                                      break;
			}
}
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <H_RELAY_Void_RELAYTog>:
void H_RELAY_Void_RELAYTog(u8 Copy_U8_Relay)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <H_RELAY_Void_RELAYTog+0x6>
    25e4:	0f 92       	push	r0
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Relay)
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	3b 83       	std	Y+3, r19	; 0x03
    25f4:	2a 83       	std	Y+2, r18	; 0x02
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	9b 81       	ldd	r25, Y+3	; 0x03
    25fa:	81 30       	cpi	r24, 0x01	; 1
    25fc:	91 05       	cpc	r25, r1
    25fe:	31 f0       	breq	.+12     	; 0x260c <H_RELAY_Void_RELAYTog+0x2e>
    2600:	2a 81       	ldd	r18, Y+2	; 0x02
    2602:	3b 81       	ldd	r19, Y+3	; 0x03
    2604:	22 30       	cpi	r18, 0x02	; 2
    2606:	31 05       	cpc	r19, r1
    2608:	29 f0       	breq	.+10     	; 0x2614 <H_RELAY_Void_RELAYTog+0x36>
    260a:	07 c0       	rjmp	.+14     	; 0x261a <H_RELAY_Void_RELAYTog+0x3c>
			{
		case 1: M_DIO_Void_TogPin(RELAY_PIN1);    break;
    260c:	82 e2       	ldi	r24, 0x22	; 34
    260e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <M_DIO_Void_TogPin>
    2612:	03 c0       	rjmp	.+6      	; 0x261a <H_RELAY_Void_RELAYTog+0x3c>
		case 2: M_DIO_Void_TogPin(RELAY_PIN2);    break;
    2614:	81 e2       	ldi	r24, 0x21	; 33
    2616:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <M_DIO_Void_TogPin>
		default:                              break;
             }
}
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <H_LED_Void_LEDInit>:
#include "LED_Config.h"
#include "LED_Interface.h"
#include "LED_Private.h"

void H_LED_Void_LEDInit(u8 Copy_U8_Led)
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	00 d0       	rcall	.+0      	; 0x262c <H_LED_Void_LEDInit+0x6>
    262c:	0f 92       	push	r0
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	3b 83       	std	Y+3, r19	; 0x03
    263c:	2a 83       	std	Y+2, r18	; 0x02
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	9b 81       	ldd	r25, Y+3	; 0x03
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	91 05       	cpc	r25, r1
    2646:	71 f0       	breq	.+28     	; 0x2664 <H_LED_Void_LEDInit+0x3e>
    2648:	2a 81       	ldd	r18, Y+2	; 0x02
    264a:	3b 81       	ldd	r19, Y+3	; 0x03
    264c:	22 30       	cpi	r18, 0x02	; 2
    264e:	31 05       	cpc	r19, r1
    2650:	71 f0       	breq	.+28     	; 0x266e <H_LED_Void_LEDInit+0x48>
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	9b 81       	ldd	r25, Y+3	; 0x03
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	71 f4       	brne	.+28     	; 0x2676 <H_LED_Void_LEDInit+0x50>
	{
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
    265a:	80 e2       	ldi	r24, 0x20	; 32
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
    2662:	09 c0       	rjmp	.+18     	; 0x2676 <H_LED_Void_LEDInit+0x50>
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
    2664:	8f e1       	ldi	r24, 0x1F	; 31
    2666:	61 e0       	ldi	r22, 0x01	; 1
    2668:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
    266c:	04 c0       	rjmp	.+8      	; 0x2676 <H_LED_Void_LEDInit+0x50>
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
    266e:	8e e1       	ldi	r24, 0x1E	; 30
    2670:	61 e0       	ldi	r22, 0x01	; 1
    2672:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
	default:                                                      break;
	}
}
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <H_LED_Void_LEDOn>:
void H_LED_Void_LEDOn(u8 Copy_U8_Led)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <H_LED_Void_LEDOn+0x6>
    2688:	0f 92       	push	r0
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	3b 83       	std	Y+3, r19	; 0x03
    2698:	2a 83       	std	Y+2, r18	; 0x02
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	81 30       	cpi	r24, 0x01	; 1
    26a0:	91 05       	cpc	r25, r1
    26a2:	71 f0       	breq	.+28     	; 0x26c0 <H_LED_Void_LEDOn+0x3e>
    26a4:	2a 81       	ldd	r18, Y+2	; 0x02
    26a6:	3b 81       	ldd	r19, Y+3	; 0x03
    26a8:	22 30       	cpi	r18, 0x02	; 2
    26aa:	31 05       	cpc	r19, r1
    26ac:	71 f0       	breq	.+28     	; 0x26ca <H_LED_Void_LEDOn+0x48>
    26ae:	8a 81       	ldd	r24, Y+2	; 0x02
    26b0:	9b 81       	ldd	r25, Y+3	; 0x03
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	71 f4       	brne	.+28     	; 0x26d2 <H_LED_Void_LEDOn+0x50>
	{
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
    26b6:	80 e2       	ldi	r24, 0x20	; 32
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    26be:	09 c0       	rjmp	.+18     	; 0x26d2 <H_LED_Void_LEDOn+0x50>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
    26c0:	8f e1       	ldi	r24, 0x1F	; 31
    26c2:	61 e0       	ldi	r22, 0x01	; 1
    26c4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    26c8:	04 c0       	rjmp	.+8      	; 0x26d2 <H_LED_Void_LEDOn+0x50>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
    26ca:	8e e1       	ldi	r24, 0x1E	; 30
    26cc:	61 e0       	ldi	r22, 0x01	; 1
    26ce:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
	default:                                                break;
	}
}
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	cf 91       	pop	r28
    26da:	df 91       	pop	r29
    26dc:	08 95       	ret

000026de <H_LED_Void_LEDOff>:
void H_LED_Void_LEDOff(u8 Copy_U8_Led)
{
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <H_LED_Void_LEDOff+0x6>
    26e4:	0f 92       	push	r0
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	3b 83       	std	Y+3, r19	; 0x03
    26f4:	2a 83       	std	Y+2, r18	; 0x02
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	9b 81       	ldd	r25, Y+3	; 0x03
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	91 05       	cpc	r25, r1
    26fe:	71 f0       	breq	.+28     	; 0x271c <H_LED_Void_LEDOff+0x3e>
    2700:	2a 81       	ldd	r18, Y+2	; 0x02
    2702:	3b 81       	ldd	r19, Y+3	; 0x03
    2704:	22 30       	cpi	r18, 0x02	; 2
    2706:	31 05       	cpc	r19, r1
    2708:	71 f0       	breq	.+28     	; 0x2726 <H_LED_Void_LEDOff+0x48>
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	9b 81       	ldd	r25, Y+3	; 0x03
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	71 f4       	brne	.+28     	; 0x272e <H_LED_Void_LEDOff+0x50>
	{
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
    2712:	80 e2       	ldi	r24, 0x20	; 32
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    271a:	09 c0       	rjmp	.+18     	; 0x272e <H_LED_Void_LEDOff+0x50>
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
    271c:	8f e1       	ldi	r24, 0x1F	; 31
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    2724:	04 c0       	rjmp	.+8      	; 0x272e <H_LED_Void_LEDOff+0x50>
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
    2726:	8e e1       	ldi	r24, 0x1E	; 30
    2728:	60 e0       	ldi	r22, 0x00	; 0
    272a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
	default:                                               break;
	}
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <H_LED_Void_LEDTog>:
void H_LED_Void_LEDTog(u8 Copy_U8_Led)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <H_LED_Void_LEDTog+0x6>
    2740:	0f 92       	push	r0
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Led)
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	3b 83       	std	Y+3, r19	; 0x03
    2750:	2a 83       	std	Y+2, r18	; 0x02
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	9b 81       	ldd	r25, Y+3	; 0x03
    2756:	81 30       	cpi	r24, 0x01	; 1
    2758:	91 05       	cpc	r25, r1
    275a:	69 f0       	breq	.+26     	; 0x2776 <H_LED_Void_LEDTog+0x3c>
    275c:	2a 81       	ldd	r18, Y+2	; 0x02
    275e:	3b 81       	ldd	r19, Y+3	; 0x03
    2760:	22 30       	cpi	r18, 0x02	; 2
    2762:	31 05       	cpc	r19, r1
    2764:	61 f0       	breq	.+24     	; 0x277e <H_LED_Void_LEDTog+0x44>
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	9b 81       	ldd	r25, Y+3	; 0x03
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	59 f4       	brne	.+22     	; 0x2784 <H_LED_Void_LEDTog+0x4a>
	{
	case LED_BLU: M_DIO_Void_TogPin(LED_BLU_PIN); break;
    276e:	80 e2       	ldi	r24, 0x20	; 32
    2770:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <M_DIO_Void_TogPin>
    2774:	07 c0       	rjmp	.+14     	; 0x2784 <H_LED_Void_LEDTog+0x4a>
	case LED_GRN: M_DIO_Void_TogPin(LED_GRN_PIN); break;
    2776:	8f e1       	ldi	r24, 0x1F	; 31
    2778:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <M_DIO_Void_TogPin>
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <H_LED_Void_LEDTog+0x4a>
	case LED_RED: M_DIO_Void_TogPin(LED_RED_PIN); break;
    277e:	8e e1       	ldi	r24, 0x1E	; 30
    2780:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <M_DIO_Void_TogPin>
	default:                                      break;
	}
}
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <H_LED_Void_LEDBlink>:
void H_LED_Void_LEDBlink(u8 Copy_U8_Led)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	ad 97       	sbiw	r28, 0x2d	; 45
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	8b a7       	std	Y+43, r24	; 0x2b
	switch(Copy_U8_Led)
    27a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	3d a7       	std	Y+45, r19	; 0x2d
    27ae:	2c a7       	std	Y+44, r18	; 0x2c
    27b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    27b2:	9d a5       	ldd	r25, Y+45	; 0x2d
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	91 05       	cpc	r25, r1
    27b8:	09 f4       	brne	.+2      	; 0x27bc <H_LED_Void_LEDBlink+0x2c>
    27ba:	86 c0       	rjmp	.+268    	; 0x28c8 <H_LED_Void_LEDBlink+0x138>
    27bc:	2c a5       	ldd	r18, Y+44	; 0x2c
    27be:	3d a5       	ldd	r19, Y+45	; 0x2d
    27c0:	22 30       	cpi	r18, 0x02	; 2
    27c2:	31 05       	cpc	r19, r1
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <H_LED_Void_LEDBlink+0x38>
    27c6:	fb c0       	rjmp	.+502    	; 0x29be <H_LED_Void_LEDBlink+0x22e>
    27c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    27ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <H_LED_Void_LEDBlink+0x42>
    27d0:	70 c1       	rjmp	.+736    	; 0x2ab2 <H_LED_Void_LEDBlink+0x322>
	{
	case LED_BLU:
		M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH);
    27d2:	80 e2       	ldi	r24, 0x20	; 32
    27d4:	61 e0       	ldi	r22, 0x01	; 1
    27d6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a6 e9       	ldi	r26, 0x96	; 150
    27e0:	b3 e4       	ldi	r27, 0x43	; 67
    27e2:	8f a3       	std	Y+39, r24	; 0x27
    27e4:	98 a7       	std	Y+40, r25	; 0x28
    27e6:	a9 a7       	std	Y+41, r26	; 0x29
    27e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	6f a1       	ldd	r22, Y+39	; 0x27
    27ec:	78 a5       	ldd	r23, Y+40	; 0x28
    27ee:	89 a5       	ldd	r24, Y+41	; 0x29
    27f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a e7       	ldi	r20, 0x7A	; 122
    27f8:	55 e4       	ldi	r21, 0x45	; 69
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	8b a3       	std	Y+35, r24	; 0x23
    2804:	9c a3       	std	Y+36, r25	; 0x24
    2806:	ad a3       	std	Y+37, r26	; 0x25
    2808:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    280a:	6b a1       	ldd	r22, Y+35	; 0x23
    280c:	7c a1       	ldd	r23, Y+36	; 0x24
    280e:	8d a1       	ldd	r24, Y+37	; 0x25
    2810:	9e a1       	ldd	r25, Y+38	; 0x26
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	2c f4       	brge	.+10     	; 0x282c <H_LED_Void_LEDBlink+0x9c>
		__ticks = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9a a3       	std	Y+34, r25	; 0x22
    2828:	89 a3       	std	Y+33, r24	; 0x21
    282a:	3f c0       	rjmp	.+126    	; 0x28aa <H_LED_Void_LEDBlink+0x11a>
	else if (__tmp > 65535)
    282c:	6b a1       	ldd	r22, Y+35	; 0x23
    282e:	7c a1       	ldd	r23, Y+36	; 0x24
    2830:	8d a1       	ldd	r24, Y+37	; 0x25
    2832:	9e a1       	ldd	r25, Y+38	; 0x26
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	4c f5       	brge	.+82     	; 0x2896 <H_LED_Void_LEDBlink+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2844:	6f a1       	ldd	r22, Y+39	; 0x27
    2846:	78 a5       	ldd	r23, Y+40	; 0x28
    2848:	89 a5       	ldd	r24, Y+41	; 0x29
    284a:	9a a5       	ldd	r25, Y+42	; 0x2a
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9a a3       	std	Y+34, r25	; 0x22
    286a:	89 a3       	std	Y+33, r24	; 0x21
    286c:	0f c0       	rjmp	.+30     	; 0x288c <H_LED_Void_LEDBlink+0xfc>
    286e:	80 e9       	ldi	r24, 0x90	; 144
    2870:	91 e0       	ldi	r25, 0x01	; 1
    2872:	98 a3       	std	Y+32, r25	; 0x20
    2874:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2876:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2878:	98 a1       	ldd	r25, Y+32	; 0x20
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <H_LED_Void_LEDBlink+0xea>
    287e:	98 a3       	std	Y+32, r25	; 0x20
    2880:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	89 a1       	ldd	r24, Y+33	; 0x21
    2884:	9a a1       	ldd	r25, Y+34	; 0x22
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	9a a3       	std	Y+34, r25	; 0x22
    288a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	89 a1       	ldd	r24, Y+33	; 0x21
    288e:	9a a1       	ldd	r25, Y+34	; 0x22
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	69 f7       	brne	.-38     	; 0x286e <H_LED_Void_LEDBlink+0xde>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <H_LED_Void_LEDBlink+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2896:	6b a1       	ldd	r22, Y+35	; 0x23
    2898:	7c a1       	ldd	r23, Y+36	; 0x24
    289a:	8d a1       	ldd	r24, Y+37	; 0x25
    289c:	9e a1       	ldd	r25, Y+38	; 0x26
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9a a3       	std	Y+34, r25	; 0x22
    28a8:	89 a3       	std	Y+33, r24	; 0x21
    28aa:	89 a1       	ldd	r24, Y+33	; 0x21
    28ac:	9a a1       	ldd	r25, Y+34	; 0x22
    28ae:	9e 8f       	std	Y+30, r25	; 0x1e
    28b0:	8d 8f       	std	Y+29, r24	; 0x1d
    28b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <H_LED_Void_LEDBlink+0x126>
    28ba:	9e 8f       	std	Y+30, r25	; 0x1e
    28bc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(LED_ON_TIME);
		M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW);
    28be:	80 e2       	ldi	r24, 0x20	; 32
    28c0:	60 e0       	ldi	r22, 0x00	; 0
    28c2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    28c6:	f5 c0       	rjmp	.+490    	; 0x2ab2 <H_LED_Void_LEDBlink+0x322>
		break;
	case LED_GRN:
		M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH);
    28c8:	8f e1       	ldi	r24, 0x1F	; 31
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a6 e9       	ldi	r26, 0x96	; 150
    28d6:	b3 e4       	ldi	r27, 0x43	; 67
    28d8:	89 8f       	std	Y+25, r24	; 0x19
    28da:	9a 8f       	std	Y+26, r25	; 0x1a
    28dc:	ab 8f       	std	Y+27, r26	; 0x1b
    28de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e0:	69 8d       	ldd	r22, Y+25	; 0x19
    28e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	4a e7       	ldi	r20, 0x7A	; 122
    28ee:	55 e4       	ldi	r21, 0x45	; 69
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	8d 8b       	std	Y+21, r24	; 0x15
    28fa:	9e 8b       	std	Y+22, r25	; 0x16
    28fc:	af 8b       	std	Y+23, r26	; 0x17
    28fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2900:	6d 89       	ldd	r22, Y+21	; 0x15
    2902:	7e 89       	ldd	r23, Y+22	; 0x16
    2904:	8f 89       	ldd	r24, Y+23	; 0x17
    2906:	98 8d       	ldd	r25, Y+24	; 0x18
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	40 e8       	ldi	r20, 0x80	; 128
    290e:	5f e3       	ldi	r21, 0x3F	; 63
    2910:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2914:	88 23       	and	r24, r24
    2916:	2c f4       	brge	.+10     	; 0x2922 <H_LED_Void_LEDBlink+0x192>
		__ticks = 1;
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	9c 8b       	std	Y+20, r25	; 0x14
    291e:	8b 8b       	std	Y+19, r24	; 0x13
    2920:	3f c0       	rjmp	.+126    	; 0x29a0 <H_LED_Void_LEDBlink+0x210>
	else if (__tmp > 65535)
    2922:	6d 89       	ldd	r22, Y+21	; 0x15
    2924:	7e 89       	ldd	r23, Y+22	; 0x16
    2926:	8f 89       	ldd	r24, Y+23	; 0x17
    2928:	98 8d       	ldd	r25, Y+24	; 0x18
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	3f ef       	ldi	r19, 0xFF	; 255
    292e:	4f e7       	ldi	r20, 0x7F	; 127
    2930:	57 e4       	ldi	r21, 0x47	; 71
    2932:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2936:	18 16       	cp	r1, r24
    2938:	4c f5       	brge	.+82     	; 0x298c <H_LED_Void_LEDBlink+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293a:	69 8d       	ldd	r22, Y+25	; 0x19
    293c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    293e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2940:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e2       	ldi	r20, 0x20	; 32
    2948:	51 e4       	ldi	r21, 0x41	; 65
    294a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	9c 8b       	std	Y+20, r25	; 0x14
    2960:	8b 8b       	std	Y+19, r24	; 0x13
    2962:	0f c0       	rjmp	.+30     	; 0x2982 <H_LED_Void_LEDBlink+0x1f2>
    2964:	80 e9       	ldi	r24, 0x90	; 144
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	9a 8b       	std	Y+18, r25	; 0x12
    296a:	89 8b       	std	Y+17, r24	; 0x11
    296c:	89 89       	ldd	r24, Y+17	; 0x11
    296e:	9a 89       	ldd	r25, Y+18	; 0x12
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	f1 f7       	brne	.-4      	; 0x2970 <H_LED_Void_LEDBlink+0x1e0>
    2974:	9a 8b       	std	Y+18, r25	; 0x12
    2976:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2978:	8b 89       	ldd	r24, Y+19	; 0x13
    297a:	9c 89       	ldd	r25, Y+20	; 0x14
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	9c 8b       	std	Y+20, r25	; 0x14
    2980:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2982:	8b 89       	ldd	r24, Y+19	; 0x13
    2984:	9c 89       	ldd	r25, Y+20	; 0x14
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	69 f7       	brne	.-38     	; 0x2964 <H_LED_Void_LEDBlink+0x1d4>
    298a:	14 c0       	rjmp	.+40     	; 0x29b4 <H_LED_Void_LEDBlink+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298c:	6d 89       	ldd	r22, Y+21	; 0x15
    298e:	7e 89       	ldd	r23, Y+22	; 0x16
    2990:	8f 89       	ldd	r24, Y+23	; 0x17
    2992:	98 8d       	ldd	r25, Y+24	; 0x18
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9c 8b       	std	Y+20, r25	; 0x14
    299e:	8b 8b       	std	Y+19, r24	; 0x13
    29a0:	8b 89       	ldd	r24, Y+19	; 0x13
    29a2:	9c 89       	ldd	r25, Y+20	; 0x14
    29a4:	98 8b       	std	Y+16, r25	; 0x10
    29a6:	8f 87       	std	Y+15, r24	; 0x0f
    29a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29aa:	98 89       	ldd	r25, Y+16	; 0x10
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <H_LED_Void_LEDBlink+0x21c>
    29b0:	98 8b       	std	Y+16, r25	; 0x10
    29b2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(LED_ON_TIME);
		M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW);
    29b4:	8f e1       	ldi	r24, 0x1F	; 31
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    29bc:	7a c0       	rjmp	.+244    	; 0x2ab2 <H_LED_Void_LEDBlink+0x322>
		break;
	case LED_RED:
		M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH);
    29be:	8e e1       	ldi	r24, 0x1E	; 30
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a6 e9       	ldi	r26, 0x96	; 150
    29cc:	b3 e4       	ldi	r27, 0x43	; 67
    29ce:	8b 87       	std	Y+11, r24	; 0x0b
    29d0:	9c 87       	std	Y+12, r25	; 0x0c
    29d2:	ad 87       	std	Y+13, r26	; 0x0d
    29d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29da:	8d 85       	ldd	r24, Y+13	; 0x0d
    29dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a e7       	ldi	r20, 0x7A	; 122
    29e4:	55 e4       	ldi	r21, 0x45	; 69
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	8f 83       	std	Y+7, r24	; 0x07
    29f0:	98 87       	std	Y+8, r25	; 0x08
    29f2:	a9 87       	std	Y+9, r26	; 0x09
    29f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29f6:	6f 81       	ldd	r22, Y+7	; 0x07
    29f8:	78 85       	ldd	r23, Y+8	; 0x08
    29fa:	89 85       	ldd	r24, Y+9	; 0x09
    29fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a0a:	88 23       	and	r24, r24
    2a0c:	2c f4       	brge	.+10     	; 0x2a18 <H_LED_Void_LEDBlink+0x288>
		__ticks = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <H_LED_Void_LEDBlink+0x306>
	else if (__tmp > 65535)
    2a18:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1a:	78 85       	ldd	r23, Y+8	; 0x08
    2a1c:	89 85       	ldd	r24, Y+9	; 0x09
    2a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	4f e7       	ldi	r20, 0x7F	; 127
    2a26:	57 e4       	ldi	r21, 0x47	; 71
    2a28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	4c f5       	brge	.+82     	; 0x2a82 <H_LED_Void_LEDBlink+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	8d 83       	std	Y+5, r24	; 0x05
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <H_LED_Void_LEDBlink+0x2e8>
    2a5a:	80 e9       	ldi	r24, 0x90	; 144
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	9c 83       	std	Y+4, r25	; 0x04
    2a60:	8b 83       	std	Y+3, r24	; 0x03
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	9c 81       	ldd	r25, Y+4	; 0x04
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <H_LED_Void_LEDBlink+0x2d6>
    2a6a:	9c 83       	std	Y+4, r25	; 0x04
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	9e 81       	ldd	r25, Y+6	; 0x06
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	9e 83       	std	Y+6, r25	; 0x06
    2a76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <H_LED_Void_LEDBlink+0x2ca>
    2a80:	14 c0       	rjmp	.+40     	; 0x2aaa <H_LED_Void_LEDBlink+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	8d 83       	std	Y+5, r24	; 0x05
    2a96:	8d 81       	ldd	r24, Y+5	; 0x05
    2a98:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9a:	9a 83       	std	Y+2, r25	; 0x02
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <H_LED_Void_LEDBlink+0x312>
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(LED_ON_TIME);
		M_DIO_Void_SetPinValue(LED_RED_PIN,LOW);
    2aaa:	8e e1       	ldi	r24, 0x1E	; 30
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
		break;
	default:                                      break;
	}
}
    2ab2:	ad 96       	adiw	r28, 0x2d	; 45
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <H_LCD_void_Init>:
#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"
#include <avr/delay.h>
void H_LCD_void_Init(void)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	aa 97       	sbiw	r28, 0x2a	; 42
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
   // step 1 : config direction for Control pins
   M_DIO_Void_SetPinDirection(LCD_RS_PIN, OUTPUT);
    2ad8:	8b e0       	ldi	r24, 0x0B	; 11
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>

   M_DIO_Void_SetPinDirection(LCD_EN_PIN, OUTPUT);
    2ae0:	8c e0       	ldi	r24, 0x0C	; 12
    2ae2:	61 e0       	ldi	r22, 0x01	; 1
    2ae4:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
  // step 2 : config direction for data pins 	(D4 ...D7) both
   M_DIO_Void_SetPinDirection(LCD_D7_PIN, OUTPUT);
    2ae8:	80 e1       	ldi	r24, 0x10	; 16
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
   M_DIO_Void_SetPinDirection(LCD_D6_PIN, OUTPUT);
    2af0:	8f e0       	ldi	r24, 0x0F	; 15
    2af2:	61 e0       	ldi	r22, 0x01	; 1
    2af4:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
   M_DIO_Void_SetPinDirection(LCD_D5_PIN, OUTPUT);
    2af8:	8e e0       	ldi	r24, 0x0E	; 14
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
   M_DIO_Void_SetPinDirection(LCD_D4_PIN, OUTPUT);
    2b00:	8d e0       	ldi	r24, 0x0D	; 13
    2b02:	61 e0       	ldi	r22, 0x01	; 1
    2b04:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <M_DIO_Void_SetPinDirection>
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	ac e0       	ldi	r26, 0x0C	; 12
    2b0e:	b2 e4       	ldi	r27, 0x42	; 66
    2b10:	8f a3       	std	Y+39, r24	; 0x27
    2b12:	98 a7       	std	Y+40, r25	; 0x28
    2b14:	a9 a7       	std	Y+41, r26	; 0x29
    2b16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b18:	6f a1       	ldd	r22, Y+39	; 0x27
    2b1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	4a e7       	ldi	r20, 0x7A	; 122
    2b26:	55 e4       	ldi	r21, 0x45	; 69
    2b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	8b a3       	std	Y+35, r24	; 0x23
    2b32:	9c a3       	std	Y+36, r25	; 0x24
    2b34:	ad a3       	std	Y+37, r26	; 0x25
    2b36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b38:	6b a1       	ldd	r22, Y+35	; 0x23
    2b3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e8       	ldi	r20, 0x80	; 128
    2b46:	5f e3       	ldi	r21, 0x3F	; 63
    2b48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b4c:	88 23       	and	r24, r24
    2b4e:	2c f4       	brge	.+10     	; 0x2b5a <H_LCD_void_Init+0x96>
		__ticks = 1;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	9a a3       	std	Y+34, r25	; 0x22
    2b56:	89 a3       	std	Y+33, r24	; 0x21
    2b58:	3f c0       	rjmp	.+126    	; 0x2bd8 <H_LCD_void_Init+0x114>
	else if (__tmp > 65535)
    2b5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2b5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2b5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b60:	9e a1       	ldd	r25, Y+38	; 0x26
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	3f ef       	ldi	r19, 0xFF	; 255
    2b66:	4f e7       	ldi	r20, 0x7F	; 127
    2b68:	57 e4       	ldi	r21, 0x47	; 71
    2b6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6e:	18 16       	cp	r1, r24
    2b70:	4c f5       	brge	.+82     	; 0x2bc4 <H_LCD_void_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b72:	6f a1       	ldd	r22, Y+39	; 0x27
    2b74:	78 a5       	ldd	r23, Y+40	; 0x28
    2b76:	89 a5       	ldd	r24, Y+41	; 0x29
    2b78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e2       	ldi	r20, 0x20	; 32
    2b80:	51 e4       	ldi	r21, 0x41	; 65
    2b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9a a3       	std	Y+34, r25	; 0x22
    2b98:	89 a3       	std	Y+33, r24	; 0x21
    2b9a:	0f c0       	rjmp	.+30     	; 0x2bba <H_LCD_void_Init+0xf6>
    2b9c:	80 e9       	ldi	r24, 0x90	; 144
    2b9e:	91 e0       	ldi	r25, 0x01	; 1
    2ba0:	98 a3       	std	Y+32, r25	; 0x20
    2ba2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ba4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ba6:	98 a1       	ldd	r25, Y+32	; 0x20
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <H_LCD_void_Init+0xe4>
    2bac:	98 a3       	std	Y+32, r25	; 0x20
    2bae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	9a a3       	std	Y+34, r25	; 0x22
    2bb8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bba:	89 a1       	ldd	r24, Y+33	; 0x21
    2bbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	69 f7       	brne	.-38     	; 0x2b9c <H_LCD_void_Init+0xd8>
    2bc2:	14 c0       	rjmp	.+40     	; 0x2bec <H_LCD_void_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bca:	9e a1       	ldd	r25, Y+38	; 0x26
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9a a3       	std	Y+34, r25	; 0x22
    2bd6:	89 a3       	std	Y+33, r24	; 0x21
    2bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bda:	9a a1       	ldd	r25, Y+34	; 0x22
    2bdc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bde:	8d 8f       	std	Y+29, r24	; 0x1d
    2be0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2be2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <H_LCD_void_Init+0x120>
    2be8:	9e 8f       	std	Y+30, r25	; 0x1e
    2bea:	8d 8f       	std	Y+29, r24	; 0x1d
   H_LCD_void_sendCommand(LCD_FUNCTION_SET_8BIT_2LINES_5X7);

#elif(LCD_MODE == LCD_4BIT)
   _delay_ms(35);
   // step 1 : select Rs-> 0 (send Command )
   	M_DIO_Void_SetPinValue(LCD_RS_PIN, LOW);
    2bec:	8b e0       	ldi	r24, 0x0B	; 11
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    // deactivate Enable
     	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2bf4:	8c e0       	ldi	r24, 0x0C	; 12
    2bf6:	60 e0       	ldi	r22, 0x00	; 0
    2bf8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>

     	// send sequence 0010 required to config 4 bit mode
     	M_DIO_Void_SetPinValue(LCD_D7_PIN,0 );
    2bfc:	80 e1       	ldi	r24, 0x10	; 16
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
     	M_DIO_Void_SetPinValue(LCD_D6_PIN,0 );
    2c04:	8f e0       	ldi	r24, 0x0F	; 15
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
     	M_DIO_Void_SetPinValue(LCD_D5_PIN,1 );
    2c0c:	8e e0       	ldi	r24, 0x0E	; 14
    2c0e:	61 e0       	ldi	r22, 0x01	; 1
    2c10:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
     	M_DIO_Void_SetPinValue(LCD_D4_PIN,0 );
    2c14:	8d e0       	ldi	r24, 0x0D	; 13
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>

     	// activate Enable
     M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    2c1c:	8c e0       	ldi	r24, 0x0C	; 12
    2c1e:	61 e0       	ldi	r22, 0x01	; 1
    2c20:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	a0 e8       	ldi	r26, 0x80	; 128
    2c2a:	bf e3       	ldi	r27, 0x3F	; 63
    2c2c:	89 8f       	std	Y+25, r24	; 0x19
    2c2e:	9a 8f       	std	Y+26, r25	; 0x1a
    2c30:	ab 8f       	std	Y+27, r26	; 0x1b
    2c32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c34:	69 8d       	ldd	r22, Y+25	; 0x19
    2c36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	4a e7       	ldi	r20, 0x7A	; 122
    2c42:	55 e4       	ldi	r21, 0x45	; 69
    2c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	8d 8b       	std	Y+21, r24	; 0x15
    2c4e:	9e 8b       	std	Y+22, r25	; 0x16
    2c50:	af 8b       	std	Y+23, r26	; 0x17
    2c52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c54:	6d 89       	ldd	r22, Y+21	; 0x15
    2c56:	7e 89       	ldd	r23, Y+22	; 0x16
    2c58:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e8       	ldi	r20, 0x80	; 128
    2c62:	5f e3       	ldi	r21, 0x3F	; 63
    2c64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c68:	88 23       	and	r24, r24
    2c6a:	2c f4       	brge	.+10     	; 0x2c76 <H_LCD_void_Init+0x1b2>
		__ticks = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9c 8b       	std	Y+20, r25	; 0x14
    2c72:	8b 8b       	std	Y+19, r24	; 0x13
    2c74:	3f c0       	rjmp	.+126    	; 0x2cf4 <H_LCD_void_Init+0x230>
	else if (__tmp > 65535)
    2c76:	6d 89       	ldd	r22, Y+21	; 0x15
    2c78:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	3f ef       	ldi	r19, 0xFF	; 255
    2c82:	4f e7       	ldi	r20, 0x7F	; 127
    2c84:	57 e4       	ldi	r21, 0x47	; 71
    2c86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c8a:	18 16       	cp	r1, r24
    2c8c:	4c f5       	brge	.+82     	; 0x2ce0 <H_LCD_void_Init+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e2       	ldi	r20, 0x20	; 32
    2c9c:	51 e4       	ldi	r21, 0x41	; 65
    2c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	9c 8b       	std	Y+20, r25	; 0x14
    2cb4:	8b 8b       	std	Y+19, r24	; 0x13
    2cb6:	0f c0       	rjmp	.+30     	; 0x2cd6 <H_LCD_void_Init+0x212>
    2cb8:	80 e9       	ldi	r24, 0x90	; 144
    2cba:	91 e0       	ldi	r25, 0x01	; 1
    2cbc:	9a 8b       	std	Y+18, r25	; 0x12
    2cbe:	89 8b       	std	Y+17, r24	; 0x11
    2cc0:	89 89       	ldd	r24, Y+17	; 0x11
    2cc2:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <H_LCD_void_Init+0x200>
    2cc8:	9a 8b       	std	Y+18, r25	; 0x12
    2cca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cce:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	9c 8b       	std	Y+20, r25	; 0x14
    2cd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	69 f7       	brne	.-38     	; 0x2cb8 <H_LCD_void_Init+0x1f4>
    2cde:	14 c0       	rjmp	.+40     	; 0x2d08 <H_LCD_void_Init+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9c 8b       	std	Y+20, r25	; 0x14
    2cf2:	8b 8b       	std	Y+19, r24	; 0x13
    2cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf8:	98 8b       	std	Y+16, r25	; 0x10
    2cfa:	8f 87       	std	Y+15, r24	; 0x0f
    2cfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfe:	98 89       	ldd	r25, Y+16	; 0x10
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <H_LCD_void_Init+0x23c>
    2d04:	98 8b       	std	Y+16, r25	; 0x10
    2d06:	8f 87       	std	Y+15, r24	; 0x0f
     // delay
     _delay_ms(1);
     // deactivate Enable
     M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    2d08:	8c e0       	ldi	r24, 0x0C	; 12
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	a0 ef       	ldi	r26, 0xF0	; 240
    2d16:	b1 e4       	ldi	r27, 0x41	; 65
    2d18:	8b 87       	std	Y+11, r24	; 0x0b
    2d1a:	9c 87       	std	Y+12, r25	; 0x0c
    2d1c:	ad 87       	std	Y+13, r26	; 0x0d
    2d1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	4a e7       	ldi	r20, 0x7A	; 122
    2d2e:	55 e4       	ldi	r21, 0x45	; 69
    2d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	8f 83       	std	Y+7, r24	; 0x07
    2d3a:	98 87       	std	Y+8, r25	; 0x08
    2d3c:	a9 87       	std	Y+9, r26	; 0x09
    2d3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d40:	6f 81       	ldd	r22, Y+7	; 0x07
    2d42:	78 85       	ldd	r23, Y+8	; 0x08
    2d44:	89 85       	ldd	r24, Y+9	; 0x09
    2d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	40 e8       	ldi	r20, 0x80	; 128
    2d4e:	5f e3       	ldi	r21, 0x3F	; 63
    2d50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d54:	88 23       	and	r24, r24
    2d56:	2c f4       	brge	.+10     	; 0x2d62 <H_LCD_void_Init+0x29e>
		__ticks = 1;
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	3f c0       	rjmp	.+126    	; 0x2de0 <H_LCD_void_Init+0x31c>
	else if (__tmp > 65535)
    2d62:	6f 81       	ldd	r22, Y+7	; 0x07
    2d64:	78 85       	ldd	r23, Y+8	; 0x08
    2d66:	89 85       	ldd	r24, Y+9	; 0x09
    2d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	3f ef       	ldi	r19, 0xFF	; 255
    2d6e:	4f e7       	ldi	r20, 0x7F	; 127
    2d70:	57 e4       	ldi	r21, 0x47	; 71
    2d72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	4c f5       	brge	.+82     	; 0x2dcc <H_LCD_void_Init+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e2       	ldi	r20, 0x20	; 32
    2d88:	51 e4       	ldi	r21, 0x41	; 65
    2d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	bc 01       	movw	r22, r24
    2d94:	cd 01       	movw	r24, r26
    2d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	9e 83       	std	Y+6, r25	; 0x06
    2da0:	8d 83       	std	Y+5, r24	; 0x05
    2da2:	0f c0       	rjmp	.+30     	; 0x2dc2 <H_LCD_void_Init+0x2fe>
    2da4:	80 e9       	ldi	r24, 0x90	; 144
    2da6:	91 e0       	ldi	r25, 0x01	; 1
    2da8:	9c 83       	std	Y+4, r25	; 0x04
    2daa:	8b 83       	std	Y+3, r24	; 0x03
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	9c 81       	ldd	r25, Y+4	; 0x04
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <H_LCD_void_Init+0x2ec>
    2db4:	9c 83       	std	Y+4, r25	; 0x04
    2db6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dba:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	9e 83       	std	Y+6, r25	; 0x06
    2dc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc6:	00 97       	sbiw	r24, 0x00	; 0
    2dc8:	69 f7       	brne	.-38     	; 0x2da4 <H_LCD_void_Init+0x2e0>
    2dca:	14 c0       	rjmp	.+40     	; 0x2df4 <H_LCD_void_Init+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dce:	78 85       	ldd	r23, Y+8	; 0x08
    2dd0:	89 85       	ldd	r24, Y+9	; 0x09
    2dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	9e 83       	std	Y+6, r25	; 0x06
    2dde:	8d 83       	std	Y+5, r24	; 0x05
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	9e 81       	ldd	r25, Y+6	; 0x06
    2de4:	9a 83       	std	Y+2, r25	; 0x02
    2de6:	89 83       	std	Y+1, r24	; 0x01
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	9a 81       	ldd	r25, Y+2	; 0x02
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <H_LCD_void_Init+0x328>
    2df0:	9a 83       	std	Y+2, r25	; 0x02
    2df2:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(30);// allow LCD to process data
   H_LCD_void_sendCommand(LCD_FUNVTION_SET_4BIT_2LINES_5X7 );
    2df4:	88 e2       	ldi	r24, 0x28	; 40
    2df6:	0e 94 20 17 	call	0x2e40	; 0x2e40 <H_LCD_void_sendCommand>
#endif

   // display ON/OFF
   H_LCD_void_sendCommand(DISPLAY_ON_CURSOR_ON_BLINK_OFF);
    2dfa:	8e e0       	ldi	r24, 0x0E	; 14
    2dfc:	0e 94 20 17 	call	0x2e40	; 0x2e40 <H_LCD_void_sendCommand>
   //display clear
   H_LCD_void_sendCommand(LCD_CLEAR);
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	0e 94 20 17 	call	0x2e40	; 0x2e40 <H_LCD_void_sendCommand>
   //entry mode set
   H_LCD_void_sendCommand(ENTRY_MODE_SET);
    2e06:	86 e0       	ldi	r24, 0x06	; 6
    2e08:	0e 94 20 17 	call	0x2e40	; 0x2e40 <H_LCD_void_sendCommand>
}
    2e0c:	aa 96       	adiw	r28, 0x2a	; 42
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	08 95       	ret

00002e1e <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8Data)
{
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	0f 92       	push	r0
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	89 83       	std	Y+1, r24	; 0x01
   // step 1 : select Rs-> 1 (send data )
	M_DIO_Void_SetPinValue(LCD_RS_PIN, HIGH);
    2e2a:	8b e0       	ldi	r24, 0x0B	; 11
    2e2c:	61 e0       	ldi	r22, 0x01	; 1
    2e2e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
	//step 2 : send data
	H_LCD_void_WriteNlatch(copy_u8Data);
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	0e 94 0a 18 	call	0x3014	; 0x3014 <H_LCD_void_WriteNlatch>

}
    2e38:	0f 90       	pop	r0
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	08 95       	ret

00002e40 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
    2e40:	df 93       	push	r29
    2e42:	cf 93       	push	r28
    2e44:	0f 92       	push	r0
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	89 83       	std	Y+1, r24	; 0x01
  // step 1 : select Rs-> 0 (send Command )
	M_DIO_Void_SetPinValue(LCD_RS_PIN, LOW);
    2e4c:	8b e0       	ldi	r24, 0x0B	; 11
    2e4e:	60 e0       	ldi	r22, 0x00	; 0
    2e50:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
	//step 2 : send command
	H_LCD_void_WriteNlatch(copy_u8Command);
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	0e 94 0a 18 	call	0x3014	; 0x3014 <H_LCD_void_WriteNlatch>
}
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <H_LCD_void_sendString>:
void H_LCD_void_sendString(u8 *str) // 0x50 H
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <H_LCD_void_sendString+0x6>
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <H_LCD_void_sendString+0x8>
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <H_LCD_void_sendString+0xa>
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	8d 83       	std	Y+5, r24	; 0x05
	u32 i = 0;
    2e74:	19 82       	std	Y+1, r1	; 0x01
    2e76:	1a 82       	std	Y+2, r1	; 0x02
    2e78:	1b 82       	std	Y+3, r1	; 0x03
    2e7a:	1c 82       	std	Y+4, r1	; 0x04
    2e7c:	15 c0       	rjmp	.+42     	; 0x2ea8 <H_LCD_void_sendString+0x46>
  while(str[i] != '\0')
  {
	  H_LCD_void_sendData(str[i]);
    2e7e:	29 81       	ldd	r18, Y+1	; 0x01
    2e80:	3a 81       	ldd	r19, Y+2	; 0x02
    2e82:	8d 81       	ldd	r24, Y+5	; 0x05
    2e84:	9e 81       	ldd	r25, Y+6	; 0x06
    2e86:	fc 01       	movw	r30, r24
    2e88:	e2 0f       	add	r30, r18
    2e8a:	f3 1f       	adc	r31, r19
    2e8c:	80 81       	ld	r24, Z
    2e8e:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <H_LCD_void_sendData>
	  i++;
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	9a 81       	ldd	r25, Y+2	; 0x02
    2e96:	ab 81       	ldd	r26, Y+3	; 0x03
    2e98:	bc 81       	ldd	r27, Y+4	; 0x04
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	a1 1d       	adc	r26, r1
    2e9e:	b1 1d       	adc	r27, r1
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	9a 83       	std	Y+2, r25	; 0x02
    2ea4:	ab 83       	std	Y+3, r26	; 0x03
    2ea6:	bc 83       	std	Y+4, r27	; 0x04
	H_LCD_void_WriteNlatch(copy_u8Command);
}
void H_LCD_void_sendString(u8 *str) // 0x50 H
{
	u32 i = 0;
  while(str[i] != '\0')
    2ea8:	29 81       	ldd	r18, Y+1	; 0x01
    2eaa:	3a 81       	ldd	r19, Y+2	; 0x02
    2eac:	8d 81       	ldd	r24, Y+5	; 0x05
    2eae:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	e2 0f       	add	r30, r18
    2eb4:	f3 1f       	adc	r31, r19
    2eb6:	80 81       	ld	r24, Z
    2eb8:	88 23       	and	r24, r24
    2eba:	09 f7       	brne	.-62     	; 0x2e7e <H_LCD_void_sendString+0x1c>
  {
	  H_LCD_void_sendData(*str);
	  str++;
  }*/

}
    2ebc:	26 96       	adiw	r28, 0x06	; 6
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32  copy_s32Num)
{
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	df 93       	push	r29
    2ed4:	cf 93       	push	r28
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	2f 97       	sbiw	r28, 0x0f	; 15
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	6c 87       	std	Y+12, r22	; 0x0c
    2ee8:	7d 87       	std	Y+13, r23	; 0x0d
    2eea:	8e 87       	std	Y+14, r24	; 0x0e
    2eec:	9f 87       	std	Y+15, r25	; 0x0f
   if(copy_s32Num == 0)
    2eee:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ef0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ef2:	ae 85       	ldd	r26, Y+14	; 0x0e
    2ef4:	bf 85       	ldd	r27, Y+15	; 0x0f
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	a1 05       	cpc	r26, r1
    2efa:	b1 05       	cpc	r27, r1
    2efc:	21 f4       	brne	.+8      	; 0x2f06 <H_LCD_void_sendIntNum+0x38>
   {
	   H_LCD_void_sendData('0');
    2efe:	80 e3       	ldi	r24, 0x30	; 48
    2f00:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <H_LCD_void_sendData>
    2f04:	72 c0       	rjmp	.+228    	; 0x2fea <H_LCD_void_sendIntNum+0x11c>
	   return;
   }
   else if(copy_s32Num < 0)
    2f06:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f08:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f0a:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f0c:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f0e:	bb 23       	and	r27, r27
    2f10:	94 f4       	brge	.+36     	; 0x2f36 <H_LCD_void_sendIntNum+0x68>
   {
	   H_LCD_void_sendData('-');
    2f12:	8d e2       	ldi	r24, 0x2D	; 45
    2f14:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <H_LCD_void_sendData>
	   copy_s32Num *= -1;
    2f18:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f1c:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f1e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f20:	b0 95       	com	r27
    2f22:	a0 95       	com	r26
    2f24:	90 95       	com	r25
    2f26:	81 95       	neg	r24
    2f28:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2a:	af 4f       	sbci	r26, 0xFF	; 255
    2f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2e:	8c 87       	std	Y+12, r24	; 0x0c
    2f30:	9d 87       	std	Y+13, r25	; 0x0d
    2f32:	ae 87       	std	Y+14, r26	; 0x0e
    2f34:	bf 87       	std	Y+15, r27	; 0x0f
   }
   s8 i = 0;
    2f36:	19 82       	std	Y+1, r1	; 0x01
   u8 Arr[10] = {0};
    2f38:	8a e0       	ldi	r24, 0x0A	; 10
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	32 96       	adiw	r30, 0x02	; 2
    2f3e:	df 01       	movw	r26, r30
    2f40:	98 2f       	mov	r25, r24
    2f42:	1d 92       	st	X+, r1
    2f44:	9a 95       	dec	r25
    2f46:	e9 f7       	brne	.-6      	; 0x2f42 <H_LCD_void_sendIntNum+0x74>
    2f48:	2f c0       	rjmp	.+94     	; 0x2fa8 <H_LCD_void_sendIntNum+0xda>
   while(copy_s32Num > 0)
   {
	   Arr[i] = copy_s32Num % 10;
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	08 2f       	mov	r16, r24
    2f4e:	11 27       	eor	r17, r17
    2f50:	07 fd       	sbrc	r16, 7
    2f52:	10 95       	com	r17
    2f54:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f56:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f58:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f5a:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f5c:	2a e0       	ldi	r18, 0x0A	; 10
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e0       	ldi	r20, 0x00	; 0
    2f62:	50 e0       	ldi	r21, 0x00	; 0
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__divmodsi4>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	28 2f       	mov	r18, r24
    2f72:	ce 01       	movw	r24, r28
    2f74:	02 96       	adiw	r24, 0x02	; 2
    2f76:	fc 01       	movw	r30, r24
    2f78:	e0 0f       	add	r30, r16
    2f7a:	f1 1f       	adc	r31, r17
    2f7c:	20 83       	st	Z, r18
	   copy_s32Num /= 10; // copy_s32Num = copy_s32Num /10
    2f7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f80:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f82:	ae 85       	ldd	r26, Y+14	; 0x0e
    2f84:	bf 85       	ldd	r27, Y+15	; 0x0f
    2f86:	2a e0       	ldi	r18, 0x0A	; 10
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e0       	ldi	r20, 0x00	; 0
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	bc 01       	movw	r22, r24
    2f90:	cd 01       	movw	r24, r26
    2f92:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__divmodsi4>
    2f96:	da 01       	movw	r26, r20
    2f98:	c9 01       	movw	r24, r18
    2f9a:	8c 87       	std	Y+12, r24	; 0x0c
    2f9c:	9d 87       	std	Y+13, r25	; 0x0d
    2f9e:	ae 87       	std	Y+14, r26	; 0x0e
    2fa0:	bf 87       	std	Y+15, r27	; 0x0f
	   i++;
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	8f 5f       	subi	r24, 0xFF	; 255
    2fa6:	89 83       	std	Y+1, r24	; 0x01
	   H_LCD_void_sendData('-');
	   copy_s32Num *= -1;
   }
   s8 i = 0;
   u8 Arr[10] = {0};
   while(copy_s32Num > 0)
    2fa8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2faa:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fac:	ae 85       	ldd	r26, Y+14	; 0x0e
    2fae:	bf 85       	ldd	r27, Y+15	; 0x0f
    2fb0:	18 16       	cp	r1, r24
    2fb2:	19 06       	cpc	r1, r25
    2fb4:	1a 06       	cpc	r1, r26
    2fb6:	1b 06       	cpc	r1, r27
    2fb8:	44 f2       	brlt	.-112    	; 0x2f4a <H_LCD_void_sendIntNum+0x7c>
   {
	   Arr[i] = copy_s32Num % 10;
	   copy_s32Num /= 10; // copy_s32Num = copy_s32Num /10
	   i++;
   }
   i--;
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	81 50       	subi	r24, 0x01	; 1
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	11 c0       	rjmp	.+34     	; 0x2fe4 <H_LCD_void_sendIntNum+0x116>
   while(i>=0)
   {
	   H_LCD_void_sendData(Arr[i]+ '0');
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	33 27       	eor	r19, r19
    2fc8:	27 fd       	sbrc	r18, 7
    2fca:	30 95       	com	r19
    2fcc:	ce 01       	movw	r24, r28
    2fce:	02 96       	adiw	r24, 0x02	; 2
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	e2 0f       	add	r30, r18
    2fd4:	f3 1f       	adc	r31, r19
    2fd6:	80 81       	ld	r24, Z
    2fd8:	80 5d       	subi	r24, 0xD0	; 208
    2fda:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <H_LCD_void_sendData>
	   i--;
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	81 50       	subi	r24, 0x01	; 1
    2fe2:	89 83       	std	Y+1, r24	; 0x01
	   Arr[i] = copy_s32Num % 10;
	   copy_s32Num /= 10; // copy_s32Num = copy_s32Num /10
	   i++;
   }
   i--;
   while(i>=0)
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	88 23       	and	r24, r24
    2fe8:	64 f7       	brge	.-40     	; 0x2fc2 <H_LCD_void_sendIntNum+0xf4>
   {
	   H_LCD_void_sendData(Arr[i]+ '0');
	   i--;
   }
}
    2fea:	2f 96       	adiw	r28, 0x0f	; 15
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	cf 91       	pop	r28
    2ff8:	df 91       	pop	r29
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	08 95       	ret

00003000 <H_LCD_void_ClearDisplay>:
void H_LCD_void_ClearDisplay(void)
{
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR);
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <H_LCD_void_sendCommand>
}
    300e:	cf 91       	pop	r28
    3010:	df 91       	pop	r29
    3012:	08 95       	ret

00003014 <H_LCD_void_WriteNlatch>:
static void H_LCD_void_WriteNlatch(u8 copy_u8Data)
{
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	e9 97       	sbiw	r28, 0x39	; 57
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	89 af       	std	Y+57, r24	; 0x39
  _delay_ms(30);// allow LCD to process data

#elif(LCD_MODE == LCD_4BIT)

  // deactivate Enable
  	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    302a:	8c e0       	ldi	r24, 0x0C	; 12
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    //break msg into 2 msgs
  	// 1st (high nibble)
  	M_DIO_Void_SetPinValue(LCD_D7_PIN, GET_BIT(copy_u8Data,7));
    3032:	89 ad       	ldd	r24, Y+57	; 0x39
    3034:	98 2f       	mov	r25, r24
    3036:	99 1f       	adc	r25, r25
    3038:	99 27       	eor	r25, r25
    303a:	99 1f       	adc	r25, r25
    303c:	80 e1       	ldi	r24, 0x10	; 16
    303e:	69 2f       	mov	r22, r25
    3040:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
  	M_DIO_Void_SetPinValue(LCD_D6_PIN, GET_BIT(copy_u8Data,6));
    3044:	89 ad       	ldd	r24, Y+57	; 0x39
    3046:	82 95       	swap	r24
    3048:	86 95       	lsr	r24
    304a:	86 95       	lsr	r24
    304c:	83 70       	andi	r24, 0x03	; 3
    304e:	98 2f       	mov	r25, r24
    3050:	91 70       	andi	r25, 0x01	; 1
    3052:	8f e0       	ldi	r24, 0x0F	; 15
    3054:	69 2f       	mov	r22, r25
    3056:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
  	M_DIO_Void_SetPinValue(LCD_D5_PIN, GET_BIT(copy_u8Data,5));
    305a:	89 ad       	ldd	r24, Y+57	; 0x39
    305c:	82 95       	swap	r24
    305e:	86 95       	lsr	r24
    3060:	87 70       	andi	r24, 0x07	; 7
    3062:	98 2f       	mov	r25, r24
    3064:	91 70       	andi	r25, 0x01	; 1
    3066:	8e e0       	ldi	r24, 0x0E	; 14
    3068:	69 2f       	mov	r22, r25
    306a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
  	M_DIO_Void_SetPinValue(LCD_D4_PIN, GET_BIT(copy_u8Data,4));
    306e:	89 ad       	ldd	r24, Y+57	; 0x39
    3070:	82 95       	swap	r24
    3072:	8f 70       	andi	r24, 0x0F	; 15
    3074:	98 2f       	mov	r25, r24
    3076:	91 70       	andi	r25, 0x01	; 1
    3078:	8d e0       	ldi	r24, 0x0D	; 13
    307a:	69 2f       	mov	r22, r25
    307c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>

  	// activate Enable
  M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    3080:	8c e0       	ldi	r24, 0x0C	; 12
    3082:	61 e0       	ldi	r22, 0x01	; 1
    3084:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	a0 e8       	ldi	r26, 0x80	; 128
    308e:	bf e3       	ldi	r27, 0x3F	; 63
    3090:	8d ab       	std	Y+53, r24	; 0x35
    3092:	9e ab       	std	Y+54, r25	; 0x36
    3094:	af ab       	std	Y+55, r26	; 0x37
    3096:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3098:	6d a9       	ldd	r22, Y+53	; 0x35
    309a:	7e a9       	ldd	r23, Y+54	; 0x36
    309c:	8f a9       	ldd	r24, Y+55	; 0x37
    309e:	98 ad       	ldd	r25, Y+56	; 0x38
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	4a e7       	ldi	r20, 0x7A	; 122
    30a6:	55 e4       	ldi	r21, 0x45	; 69
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	89 ab       	std	Y+49, r24	; 0x31
    30b2:	9a ab       	std	Y+50, r25	; 0x32
    30b4:	ab ab       	std	Y+51, r26	; 0x33
    30b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30b8:	69 a9       	ldd	r22, Y+49	; 0x31
    30ba:	7a a9       	ldd	r23, Y+50	; 0x32
    30bc:	8b a9       	ldd	r24, Y+51	; 0x33
    30be:	9c a9       	ldd	r25, Y+52	; 0x34
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	2c f4       	brge	.+10     	; 0x30da <H_LCD_void_WriteNlatch+0xc6>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	98 ab       	std	Y+48, r25	; 0x30
    30d6:	8f a7       	std	Y+47, r24	; 0x2f
    30d8:	3f c0       	rjmp	.+126    	; 0x3158 <H_LCD_void_WriteNlatch+0x144>
	else if (__tmp > 65535)
    30da:	69 a9       	ldd	r22, Y+49	; 0x31
    30dc:	7a a9       	ldd	r23, Y+50	; 0x32
    30de:	8b a9       	ldd	r24, Y+51	; 0x33
    30e0:	9c a9       	ldd	r25, Y+52	; 0x34
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	3f ef       	ldi	r19, 0xFF	; 255
    30e6:	4f e7       	ldi	r20, 0x7F	; 127
    30e8:	57 e4       	ldi	r21, 0x47	; 71
    30ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ee:	18 16       	cp	r1, r24
    30f0:	4c f5       	brge	.+82     	; 0x3144 <H_LCD_void_WriteNlatch+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f2:	6d a9       	ldd	r22, Y+53	; 0x35
    30f4:	7e a9       	ldd	r23, Y+54	; 0x36
    30f6:	8f a9       	ldd	r24, Y+55	; 0x37
    30f8:	98 ad       	ldd	r25, Y+56	; 0x38
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e2       	ldi	r20, 0x20	; 32
    3100:	51 e4       	ldi	r21, 0x41	; 65
    3102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	98 ab       	std	Y+48, r25	; 0x30
    3118:	8f a7       	std	Y+47, r24	; 0x2f
    311a:	0f c0       	rjmp	.+30     	; 0x313a <H_LCD_void_WriteNlatch+0x126>
    311c:	80 e9       	ldi	r24, 0x90	; 144
    311e:	91 e0       	ldi	r25, 0x01	; 1
    3120:	9e a7       	std	Y+46, r25	; 0x2e
    3122:	8d a7       	std	Y+45, r24	; 0x2d
    3124:	8d a5       	ldd	r24, Y+45	; 0x2d
    3126:	9e a5       	ldd	r25, Y+46	; 0x2e
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <H_LCD_void_WriteNlatch+0x114>
    312c:	9e a7       	std	Y+46, r25	; 0x2e
    312e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3130:	8f a5       	ldd	r24, Y+47	; 0x2f
    3132:	98 a9       	ldd	r25, Y+48	; 0x30
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	98 ab       	std	Y+48, r25	; 0x30
    3138:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313a:	8f a5       	ldd	r24, Y+47	; 0x2f
    313c:	98 a9       	ldd	r25, Y+48	; 0x30
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	69 f7       	brne	.-38     	; 0x311c <H_LCD_void_WriteNlatch+0x108>
    3142:	14 c0       	rjmp	.+40     	; 0x316c <H_LCD_void_WriteNlatch+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3144:	69 a9       	ldd	r22, Y+49	; 0x31
    3146:	7a a9       	ldd	r23, Y+50	; 0x32
    3148:	8b a9       	ldd	r24, Y+51	; 0x33
    314a:	9c a9       	ldd	r25, Y+52	; 0x34
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	98 ab       	std	Y+48, r25	; 0x30
    3156:	8f a7       	std	Y+47, r24	; 0x2f
    3158:	8f a5       	ldd	r24, Y+47	; 0x2f
    315a:	98 a9       	ldd	r25, Y+48	; 0x30
    315c:	9c a7       	std	Y+44, r25	; 0x2c
    315e:	8b a7       	std	Y+43, r24	; 0x2b
    3160:	8b a5       	ldd	r24, Y+43	; 0x2b
    3162:	9c a5       	ldd	r25, Y+44	; 0x2c
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <H_LCD_void_WriteNlatch+0x150>
    3168:	9c a7       	std	Y+44, r25	; 0x2c
    316a:	8b a7       	std	Y+43, r24	; 0x2b
  // delay
  _delay_ms(1);
  // deactivate Enable
  M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    316c:	8c e0       	ldi	r24, 0x0C	; 12
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	a0 ef       	ldi	r26, 0xF0	; 240
    317a:	b1 e4       	ldi	r27, 0x41	; 65
    317c:	8f a3       	std	Y+39, r24	; 0x27
    317e:	98 a7       	std	Y+40, r25	; 0x28
    3180:	a9 a7       	std	Y+41, r26	; 0x29
    3182:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3184:	6f a1       	ldd	r22, Y+39	; 0x27
    3186:	78 a5       	ldd	r23, Y+40	; 0x28
    3188:	89 a5       	ldd	r24, Y+41	; 0x29
    318a:	9a a5       	ldd	r25, Y+42	; 0x2a
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	4a e7       	ldi	r20, 0x7A	; 122
    3192:	55 e4       	ldi	r21, 0x45	; 69
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	8b a3       	std	Y+35, r24	; 0x23
    319e:	9c a3       	std	Y+36, r25	; 0x24
    31a0:	ad a3       	std	Y+37, r26	; 0x25
    31a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31a4:	6b a1       	ldd	r22, Y+35	; 0x23
    31a6:	7c a1       	ldd	r23, Y+36	; 0x24
    31a8:	8d a1       	ldd	r24, Y+37	; 0x25
    31aa:	9e a1       	ldd	r25, Y+38	; 0x26
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e8       	ldi	r20, 0x80	; 128
    31b2:	5f e3       	ldi	r21, 0x3F	; 63
    31b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b8:	88 23       	and	r24, r24
    31ba:	2c f4       	brge	.+10     	; 0x31c6 <H_LCD_void_WriteNlatch+0x1b2>
		__ticks = 1;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	9a a3       	std	Y+34, r25	; 0x22
    31c2:	89 a3       	std	Y+33, r24	; 0x21
    31c4:	3f c0       	rjmp	.+126    	; 0x3244 <H_LCD_void_WriteNlatch+0x230>
	else if (__tmp > 65535)
    31c6:	6b a1       	ldd	r22, Y+35	; 0x23
    31c8:	7c a1       	ldd	r23, Y+36	; 0x24
    31ca:	8d a1       	ldd	r24, Y+37	; 0x25
    31cc:	9e a1       	ldd	r25, Y+38	; 0x26
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	3f ef       	ldi	r19, 0xFF	; 255
    31d2:	4f e7       	ldi	r20, 0x7F	; 127
    31d4:	57 e4       	ldi	r21, 0x47	; 71
    31d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31da:	18 16       	cp	r1, r24
    31dc:	4c f5       	brge	.+82     	; 0x3230 <H_LCD_void_WriteNlatch+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31de:	6f a1       	ldd	r22, Y+39	; 0x27
    31e0:	78 a5       	ldd	r23, Y+40	; 0x28
    31e2:	89 a5       	ldd	r24, Y+41	; 0x29
    31e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e2       	ldi	r20, 0x20	; 32
    31ec:	51 e4       	ldi	r21, 0x41	; 65
    31ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	bc 01       	movw	r22, r24
    31f8:	cd 01       	movw	r24, r26
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	9a a3       	std	Y+34, r25	; 0x22
    3204:	89 a3       	std	Y+33, r24	; 0x21
    3206:	0f c0       	rjmp	.+30     	; 0x3226 <H_LCD_void_WriteNlatch+0x212>
    3208:	80 e9       	ldi	r24, 0x90	; 144
    320a:	91 e0       	ldi	r25, 0x01	; 1
    320c:	98 a3       	std	Y+32, r25	; 0x20
    320e:	8f 8f       	std	Y+31, r24	; 0x1f
    3210:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3212:	98 a1       	ldd	r25, Y+32	; 0x20
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <H_LCD_void_WriteNlatch+0x200>
    3218:	98 a3       	std	Y+32, r25	; 0x20
    321a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321c:	89 a1       	ldd	r24, Y+33	; 0x21
    321e:	9a a1       	ldd	r25, Y+34	; 0x22
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	9a a3       	std	Y+34, r25	; 0x22
    3224:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3226:	89 a1       	ldd	r24, Y+33	; 0x21
    3228:	9a a1       	ldd	r25, Y+34	; 0x22
    322a:	00 97       	sbiw	r24, 0x00	; 0
    322c:	69 f7       	brne	.-38     	; 0x3208 <H_LCD_void_WriteNlatch+0x1f4>
    322e:	14 c0       	rjmp	.+40     	; 0x3258 <H_LCD_void_WriteNlatch+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3230:	6b a1       	ldd	r22, Y+35	; 0x23
    3232:	7c a1       	ldd	r23, Y+36	; 0x24
    3234:	8d a1       	ldd	r24, Y+37	; 0x25
    3236:	9e a1       	ldd	r25, Y+38	; 0x26
    3238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	9a a3       	std	Y+34, r25	; 0x22
    3242:	89 a3       	std	Y+33, r24	; 0x21
    3244:	89 a1       	ldd	r24, Y+33	; 0x21
    3246:	9a a1       	ldd	r25, Y+34	; 0x22
    3248:	9e 8f       	std	Y+30, r25	; 0x1e
    324a:	8d 8f       	std	Y+29, r24	; 0x1d
    324c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    324e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	f1 f7       	brne	.-4      	; 0x3250 <H_LCD_void_WriteNlatch+0x23c>
    3254:	9e 8f       	std	Y+30, r25	; 0x1e
    3256:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(30);// allow LCD to process data

  // 2nd (low nibble)
  M_DIO_Void_SetPinValue(LCD_D7_PIN, GET_BIT(copy_u8Data,3));
    3258:	89 ad       	ldd	r24, Y+57	; 0x39
    325a:	86 95       	lsr	r24
    325c:	86 95       	lsr	r24
    325e:	86 95       	lsr	r24
    3260:	98 2f       	mov	r25, r24
    3262:	91 70       	andi	r25, 0x01	; 1
    3264:	80 e1       	ldi	r24, 0x10	; 16
    3266:	69 2f       	mov	r22, r25
    3268:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
  M_DIO_Void_SetPinValue(LCD_D6_PIN, GET_BIT(copy_u8Data,2));
    326c:	89 ad       	ldd	r24, Y+57	; 0x39
    326e:	86 95       	lsr	r24
    3270:	86 95       	lsr	r24
    3272:	98 2f       	mov	r25, r24
    3274:	91 70       	andi	r25, 0x01	; 1
    3276:	8f e0       	ldi	r24, 0x0F	; 15
    3278:	69 2f       	mov	r22, r25
    327a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
  M_DIO_Void_SetPinValue(LCD_D5_PIN, GET_BIT(copy_u8Data,1));
    327e:	89 ad       	ldd	r24, Y+57	; 0x39
    3280:	86 95       	lsr	r24
    3282:	98 2f       	mov	r25, r24
    3284:	91 70       	andi	r25, 0x01	; 1
    3286:	8e e0       	ldi	r24, 0x0E	; 14
    3288:	69 2f       	mov	r22, r25
    328a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
  M_DIO_Void_SetPinValue(LCD_D4_PIN, GET_BIT(copy_u8Data,0));
    328e:	89 ad       	ldd	r24, Y+57	; 0x39
    3290:	98 2f       	mov	r25, r24
    3292:	91 70       	andi	r25, 0x01	; 1
    3294:	8d e0       	ldi	r24, 0x0D	; 13
    3296:	69 2f       	mov	r22, r25
    3298:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>

   // activate Enable
    M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    329c:	8c e0       	ldi	r24, 0x0C	; 12
    329e:	61 e0       	ldi	r22, 0x01	; 1
    32a0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	a0 e8       	ldi	r26, 0x80	; 128
    32aa:	bf e3       	ldi	r27, 0x3F	; 63
    32ac:	89 8f       	std	Y+25, r24	; 0x19
    32ae:	9a 8f       	std	Y+26, r25	; 0x1a
    32b0:	ab 8f       	std	Y+27, r26	; 0x1b
    32b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b4:	69 8d       	ldd	r22, Y+25	; 0x19
    32b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4a e7       	ldi	r20, 0x7A	; 122
    32c2:	55 e4       	ldi	r21, 0x45	; 69
    32c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	8d 8b       	std	Y+21, r24	; 0x15
    32ce:	9e 8b       	std	Y+22, r25	; 0x16
    32d0:	af 8b       	std	Y+23, r26	; 0x17
    32d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32d4:	6d 89       	ldd	r22, Y+21	; 0x15
    32d6:	7e 89       	ldd	r23, Y+22	; 0x16
    32d8:	8f 89       	ldd	r24, Y+23	; 0x17
    32da:	98 8d       	ldd	r25, Y+24	; 0x18
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e8       	ldi	r20, 0x80	; 128
    32e2:	5f e3       	ldi	r21, 0x3F	; 63
    32e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e8:	88 23       	and	r24, r24
    32ea:	2c f4       	brge	.+10     	; 0x32f6 <H_LCD_void_WriteNlatch+0x2e2>
		__ticks = 1;
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	9c 8b       	std	Y+20, r25	; 0x14
    32f2:	8b 8b       	std	Y+19, r24	; 0x13
    32f4:	3f c0       	rjmp	.+126    	; 0x3374 <H_LCD_void_WriteNlatch+0x360>
	else if (__tmp > 65535)
    32f6:	6d 89       	ldd	r22, Y+21	; 0x15
    32f8:	7e 89       	ldd	r23, Y+22	; 0x16
    32fa:	8f 89       	ldd	r24, Y+23	; 0x17
    32fc:	98 8d       	ldd	r25, Y+24	; 0x18
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	3f ef       	ldi	r19, 0xFF	; 255
    3302:	4f e7       	ldi	r20, 0x7F	; 127
    3304:	57 e4       	ldi	r21, 0x47	; 71
    3306:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    330a:	18 16       	cp	r1, r24
    330c:	4c f5       	brge	.+82     	; 0x3360 <H_LCD_void_WriteNlatch+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330e:	69 8d       	ldd	r22, Y+25	; 0x19
    3310:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3312:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3314:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	40 e2       	ldi	r20, 0x20	; 32
    331c:	51 e4       	ldi	r21, 0x41	; 65
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	bc 01       	movw	r22, r24
    3328:	cd 01       	movw	r24, r26
    332a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332e:	dc 01       	movw	r26, r24
    3330:	cb 01       	movw	r24, r22
    3332:	9c 8b       	std	Y+20, r25	; 0x14
    3334:	8b 8b       	std	Y+19, r24	; 0x13
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <H_LCD_void_WriteNlatch+0x342>
    3338:	80 e9       	ldi	r24, 0x90	; 144
    333a:	91 e0       	ldi	r25, 0x01	; 1
    333c:	9a 8b       	std	Y+18, r25	; 0x12
    333e:	89 8b       	std	Y+17, r24	; 0x11
    3340:	89 89       	ldd	r24, Y+17	; 0x11
    3342:	9a 89       	ldd	r25, Y+18	; 0x12
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <H_LCD_void_WriteNlatch+0x330>
    3348:	9a 8b       	std	Y+18, r25	; 0x12
    334a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334c:	8b 89       	ldd	r24, Y+19	; 0x13
    334e:	9c 89       	ldd	r25, Y+20	; 0x14
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	9c 8b       	std	Y+20, r25	; 0x14
    3354:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3356:	8b 89       	ldd	r24, Y+19	; 0x13
    3358:	9c 89       	ldd	r25, Y+20	; 0x14
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	69 f7       	brne	.-38     	; 0x3338 <H_LCD_void_WriteNlatch+0x324>
    335e:	14 c0       	rjmp	.+40     	; 0x3388 <H_LCD_void_WriteNlatch+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3360:	6d 89       	ldd	r22, Y+21	; 0x15
    3362:	7e 89       	ldd	r23, Y+22	; 0x16
    3364:	8f 89       	ldd	r24, Y+23	; 0x17
    3366:	98 8d       	ldd	r25, Y+24	; 0x18
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	9c 8b       	std	Y+20, r25	; 0x14
    3372:	8b 8b       	std	Y+19, r24	; 0x13
    3374:	8b 89       	ldd	r24, Y+19	; 0x13
    3376:	9c 89       	ldd	r25, Y+20	; 0x14
    3378:	98 8b       	std	Y+16, r25	; 0x10
    337a:	8f 87       	std	Y+15, r24	; 0x0f
    337c:	8f 85       	ldd	r24, Y+15	; 0x0f
    337e:	98 89       	ldd	r25, Y+16	; 0x10
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <H_LCD_void_WriteNlatch+0x36c>
    3384:	98 8b       	std	Y+16, r25	; 0x10
    3386:	8f 87       	std	Y+15, r24	; 0x0f
    // delay
    _delay_ms(1);
    // deactivate Enable
    M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    3388:	8c e0       	ldi	r24, 0x0C	; 12
    338a:	60 e0       	ldi	r22, 0x00	; 0
    338c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <M_DIO_Void_SetPinValue>
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	a0 ef       	ldi	r26, 0xF0	; 240
    3396:	b1 e4       	ldi	r27, 0x41	; 65
    3398:	8b 87       	std	Y+11, r24	; 0x0b
    339a:	9c 87       	std	Y+12, r25	; 0x0c
    339c:	ad 87       	std	Y+13, r26	; 0x0d
    339e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	4a e7       	ldi	r20, 0x7A	; 122
    33ae:	55 e4       	ldi	r21, 0x45	; 69
    33b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	8f 83       	std	Y+7, r24	; 0x07
    33ba:	98 87       	std	Y+8, r25	; 0x08
    33bc:	a9 87       	std	Y+9, r26	; 0x09
    33be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33c0:	6f 81       	ldd	r22, Y+7	; 0x07
    33c2:	78 85       	ldd	r23, Y+8	; 0x08
    33c4:	89 85       	ldd	r24, Y+9	; 0x09
    33c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	40 e8       	ldi	r20, 0x80	; 128
    33ce:	5f e3       	ldi	r21, 0x3F	; 63
    33d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33d4:	88 23       	and	r24, r24
    33d6:	2c f4       	brge	.+10     	; 0x33e2 <H_LCD_void_WriteNlatch+0x3ce>
		__ticks = 1;
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	9e 83       	std	Y+6, r25	; 0x06
    33de:	8d 83       	std	Y+5, r24	; 0x05
    33e0:	3f c0       	rjmp	.+126    	; 0x3460 <H_LCD_void_WriteNlatch+0x44c>
	else if (__tmp > 65535)
    33e2:	6f 81       	ldd	r22, Y+7	; 0x07
    33e4:	78 85       	ldd	r23, Y+8	; 0x08
    33e6:	89 85       	ldd	r24, Y+9	; 0x09
    33e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	3f ef       	ldi	r19, 0xFF	; 255
    33ee:	4f e7       	ldi	r20, 0x7F	; 127
    33f0:	57 e4       	ldi	r21, 0x47	; 71
    33f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f6:	18 16       	cp	r1, r24
    33f8:	4c f5       	brge	.+82     	; 0x344c <H_LCD_void_WriteNlatch+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    33fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3400:	9e 85       	ldd	r25, Y+14	; 0x0e
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e2       	ldi	r20, 0x20	; 32
    3408:	51 e4       	ldi	r21, 0x41	; 65
    340a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340e:	dc 01       	movw	r26, r24
    3410:	cb 01       	movw	r24, r22
    3412:	bc 01       	movw	r22, r24
    3414:	cd 01       	movw	r24, r26
    3416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	9e 83       	std	Y+6, r25	; 0x06
    3420:	8d 83       	std	Y+5, r24	; 0x05
    3422:	0f c0       	rjmp	.+30     	; 0x3442 <H_LCD_void_WriteNlatch+0x42e>
    3424:	80 e9       	ldi	r24, 0x90	; 144
    3426:	91 e0       	ldi	r25, 0x01	; 1
    3428:	9c 83       	std	Y+4, r25	; 0x04
    342a:	8b 83       	std	Y+3, r24	; 0x03
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	9c 81       	ldd	r25, Y+4	; 0x04
    3430:	01 97       	sbiw	r24, 0x01	; 1
    3432:	f1 f7       	brne	.-4      	; 0x3430 <H_LCD_void_WriteNlatch+0x41c>
    3434:	9c 83       	std	Y+4, r25	; 0x04
    3436:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3438:	8d 81       	ldd	r24, Y+5	; 0x05
    343a:	9e 81       	ldd	r25, Y+6	; 0x06
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	9e 83       	std	Y+6, r25	; 0x06
    3440:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3442:	8d 81       	ldd	r24, Y+5	; 0x05
    3444:	9e 81       	ldd	r25, Y+6	; 0x06
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	69 f7       	brne	.-38     	; 0x3424 <H_LCD_void_WriteNlatch+0x410>
    344a:	14 c0       	rjmp	.+40     	; 0x3474 <H_LCD_void_WriteNlatch+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    344c:	6f 81       	ldd	r22, Y+7	; 0x07
    344e:	78 85       	ldd	r23, Y+8	; 0x08
    3450:	89 85       	ldd	r24, Y+9	; 0x09
    3452:	9a 85       	ldd	r25, Y+10	; 0x0a
    3454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	9e 83       	std	Y+6, r25	; 0x06
    345e:	8d 83       	std	Y+5, r24	; 0x05
    3460:	8d 81       	ldd	r24, Y+5	; 0x05
    3462:	9e 81       	ldd	r25, Y+6	; 0x06
    3464:	9a 83       	std	Y+2, r25	; 0x02
    3466:	89 83       	std	Y+1, r24	; 0x01
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	9a 81       	ldd	r25, Y+2	; 0x02
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	f1 f7       	brne	.-4      	; 0x346c <H_LCD_void_WriteNlatch+0x458>
    3470:	9a 83       	std	Y+2, r25	; 0x02
    3472:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(30);// allow LCD to process data

#endif
}
    3474:	e9 96       	adiw	r28, 0x39	; 57
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	08 95       	ret

00003486 <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(u8 copy_u8row, u8 copy_u8col)
{
    3486:	df 93       	push	r29
    3488:	cf 93       	push	r28
    348a:	00 d0       	rcall	.+0      	; 0x348c <H_LCD_void_gotoXY+0x6>
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
    3490:	89 83       	std	Y+1, r24	; 0x01
    3492:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8col >= 0 && copy_u8col <= 15)
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	80 31       	cpi	r24, 0x10	; 16
    3498:	78 f4       	brcc	.+30     	; 0x34b8 <H_LCD_void_gotoXY+0x32>
	{
	  if(copy_u8row == 0) // first row
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	88 23       	and	r24, r24
    349e:	29 f4       	brne	.+10     	; 0x34aa <H_LCD_void_gotoXY+0x24>
		  {
		    H_LCD_void_sendCommand(SET_R0C0_ + copy_u8col);
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	80 58       	subi	r24, 0x80	; 128
    34a4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <H_LCD_void_sendCommand>
    34a8:	07 c0       	rjmp	.+14     	; 0x34b8 <H_LCD_void_gotoXY+0x32>
		  }
		  else if (copy_u8row == 1)// 2nd row
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	81 30       	cpi	r24, 0x01	; 1
    34ae:	21 f4       	brne	.+8      	; 0x34b8 <H_LCD_void_gotoXY+0x32>
		  {
			H_LCD_void_sendCommand(SET_R1C0_ + copy_u8col);
    34b0:	8a 81       	ldd	r24, Y+2	; 0x02
    34b2:	80 54       	subi	r24, 0x40	; 64
    34b4:	0e 94 20 17 	call	0x2e40	; 0x2e40 <H_LCD_void_sendCommand>
		  }
	}

}
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <H_BLUETOOTH_Void_BLUETOOTHInit>:
#include "BLUETOOTH_Int.h"
#include "BLUETOOTH_Config.h"
#include "BLUETOOTH_Private.h"
#include "STD.h"
void H_BLUETOOTH_Void_BLUETOOTHInit(void)
{
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
	M_UART_Void_UARTInit() ;
    34ca:	0e 94 17 07 	call	0xe2e	; 0xe2e <M_UART_Void_UARTInit>

}
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <H_BLUETOOTH_u8_BLUETOOTHReadStr>:
void H_BLUETOOTH_u8_BLUETOOTHReadStr(u8 *Copy_U8_Str)
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <H_BLUETOOTH_u8_BLUETOOTHReadStr+0x6>
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
    34de:	9a 83       	std	Y+2, r25	; 0x02
    34e0:	89 83       	std	Y+1, r24	; 0x01
	M_UART_u8_UARTReadStr(Copy_U8_Str) ;
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	9a 81       	ldd	r25, Y+2	; 0x02
    34e6:	0e 94 ca 07 	call	0xf94	; 0xf94 <M_UART_u8_UARTReadStr>
}
    34ea:	0f 90       	pop	r0
    34ec:	0f 90       	pop	r0
    34ee:	cf 91       	pop	r28
    34f0:	df 91       	pop	r29
    34f2:	08 95       	ret

000034f4 <main>:
#include "BLUETOOTH_Int.h"



void main()
{
    34f4:	df 93       	push	r29
    34f6:	cf 93       	push	r28
    34f8:	cd b7       	in	r28, 0x3d	; 61
    34fa:	de b7       	in	r29, 0x3e	; 62
    34fc:	a5 97       	sbiw	r28, 0x25	; 37
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	cd bf       	out	0x3d, r28	; 61
	//Init Ultrasonic
	H_Ultrasonic_void_Init();
    3508:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <H_Ultrasonic_void_Init>

	//Init LCD
	H_LCD_void_Init();
    350c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <H_LCD_void_Init>

	// step 6 : Enable GIE
	M_GIE_void_Enable();
    3510:	0e 94 b6 0b 	call	0x176c	; 0x176c <M_GIE_void_Enable>

	u16 Distance;
	u8 mode='D';
    3514:	84 e4       	ldi	r24, 0x44	; 68
    3516:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 flag=0; /*the flag will Guard the car from turning left or right while moving forward right or forward left*/
    3518:	1d 8e       	std	Y+29, r1	; 0x1d


	H_LCD_void_gotoXY(0, 2);
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	62 e0       	ldi	r22, 0x02	; 2
    351e:	0e 94 43 1a 	call	0x3486	; 0x3486 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("MODE: ");
    3522:	80 e6       	ldi	r24, 0x60	; 96
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	0e 94 31 17 	call	0x2e62	; 0x2e62 <H_LCD_void_sendString>

	H_LCD_void_gotoXY(0, 7);
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	67 e0       	ldi	r22, 0x07	; 7
    352e:	0e 94 43 1a 	call	0x3486	; 0x3486 <H_LCD_void_gotoXY>
	H_LCD_void_sendData(mode);
    3532:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3534:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <H_LCD_void_sendData>

	H_LCD_void_gotoXY(1,4);
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	64 e0       	ldi	r22, 0x04	; 4
    353c:	0e 94 43 1a 	call	0x3486	; 0x3486 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("CC: ");
    3540:	87 e6       	ldi	r24, 0x67	; 103
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	0e 94 31 17 	call	0x2e62	; 0x2e62 <H_LCD_void_sendString>
    /* init leds*/
	H_LED_Void_LEDInit(LED_RED);
    3548:	82 e0       	ldi	r24, 0x02	; 2
    354a:	0e 94 13 13 	call	0x2626	; 0x2626 <H_LED_Void_LEDInit>
	H_LED_Void_LEDInit(LED_GRN);
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	0e 94 13 13 	call	0x2626	; 0x2626 <H_LED_Void_LEDInit>
	H_LED_Void_LEDInit(LED_BLU);
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	0e 94 13 13 	call	0x2626	; 0x2626 <H_LED_Void_LEDInit>
    /* init relay*/
	H_RELAY_Void_RELAYInit(RELAY1);
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <H_RELAY_Void_RELAYInit>
    /* init bluetooth*/
	H_BLUETOOTH_Void_BLUETOOTHInit();
    3560:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <H_BLUETOOTH_Void_BLUETOOTHInit>
	u8 Local_u8_str[3];

	while(1)
	{

		H_LCD_void_gotoXY(1,7);
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	67 e0       	ldi	r22, 0x07	; 7
    3568:	0e 94 43 1a 	call	0x3486	; 0x3486 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("OFF");
    356c:	8c e6       	ldi	r24, 0x6C	; 108
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 94 31 17 	call	0x2e62	; 0x2e62 <H_LCD_void_sendString>
		H_BLUETOOTH_u8_BLUETOOTHReadStr(Local_u8_str);
    3574:	ce 01       	movw	r24, r28
    3576:	81 96       	adiw	r24, 0x21	; 33
    3578:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <H_BLUETOOTH_u8_BLUETOOTHReadStr>
		switch(Local_u8_str[0])
    357c:	89 a1       	ldd	r24, Y+33	; 0x21
    357e:	28 2f       	mov	r18, r24
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	3d a3       	std	Y+37, r19	; 0x25
    3584:	2c a3       	std	Y+36, r18	; 0x24
    3586:	8c a1       	ldd	r24, Y+36	; 0x24
    3588:	9d a1       	ldd	r25, Y+37	; 0x25
    358a:	87 34       	cpi	r24, 0x47	; 71
    358c:	91 05       	cpc	r25, r1
    358e:	49 f1       	breq	.+82     	; 0x35e2 <main+0xee>
    3590:	2c a1       	ldd	r18, Y+36	; 0x24
    3592:	3d a1       	ldd	r19, Y+37	; 0x25
    3594:	28 34       	cpi	r18, 0x48	; 72
    3596:	31 05       	cpc	r19, r1
    3598:	9c f4       	brge	.+38     	; 0x35c0 <main+0xcc>
    359a:	8c a1       	ldd	r24, Y+36	; 0x24
    359c:	9d a1       	ldd	r25, Y+37	; 0x25
    359e:	83 34       	cpi	r24, 0x43	; 67
    35a0:	91 05       	cpc	r25, r1
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <main+0xb2>
    35a4:	8e c1       	rjmp	.+796    	; 0x38c2 <main+0x3ce>
    35a6:	2c a1       	ldd	r18, Y+36	; 0x24
    35a8:	3d a1       	ldd	r19, Y+37	; 0x25
    35aa:	26 34       	cpi	r18, 0x46	; 70
    35ac:	31 05       	cpc	r19, r1
    35ae:	09 f4       	brne	.+2      	; 0x35b2 <main+0xbe>
    35b0:	79 c0       	rjmp	.+242    	; 0x36a4 <main+0x1b0>
    35b2:	8c a1       	ldd	r24, Y+36	; 0x24
    35b4:	9d a1       	ldd	r25, Y+37	; 0x25
    35b6:	82 34       	cpi	r24, 0x42	; 66
    35b8:	91 05       	cpc	r25, r1
    35ba:	09 f4       	brne	.+2      	; 0x35be <main+0xca>
    35bc:	5b c0       	rjmp	.+182    	; 0x3674 <main+0x180>
    35be:	d2 cf       	rjmp	.-92     	; 0x3564 <main+0x70>
    35c0:	2c a1       	ldd	r18, Y+36	; 0x24
    35c2:	3d a1       	ldd	r19, Y+37	; 0x25
    35c4:	22 35       	cpi	r18, 0x52	; 82
    35c6:	31 05       	cpc	r19, r1
    35c8:	c9 f1       	breq	.+114    	; 0x363c <main+0x148>
    35ca:	8c a1       	ldd	r24, Y+36	; 0x24
    35cc:	9d a1       	ldd	r25, Y+37	; 0x25
    35ce:	87 35       	cpi	r24, 0x57	; 87
    35d0:	91 05       	cpc	r25, r1
    35d2:	09 f4       	brne	.+2      	; 0x35d6 <main+0xe2>
    35d4:	7f c0       	rjmp	.+254    	; 0x36d4 <main+0x1e0>
    35d6:	2c a1       	ldd	r18, Y+36	; 0x24
    35d8:	3d a1       	ldd	r19, Y+37	; 0x25
    35da:	2c 34       	cpi	r18, 0x4C	; 76
    35dc:	31 05       	cpc	r19, r1
    35de:	e1 f1       	breq	.+120    	; 0x3658 <main+0x164>
    35e0:	c1 cf       	rjmp	.-126    	; 0x3564 <main+0x70>
		{
		case 'G':
			/* case the car is moving using fuel button */
			if(Local_u8_str[1] == '\0')
    35e2:	8a a1       	ldd	r24, Y+34	; 0x22
    35e4:	88 23       	and	r24, r24
    35e6:	59 f4       	brne	.+22     	; 0x35fe <main+0x10a>
			{
				H_LED_Void_LEDOn(LED_GRN);
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	0e 94 41 13 	call	0x2682	; 0x2682 <H_LED_Void_LEDOn>
				H_LED_Void_LEDOff(LED_BLU);
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
				H_LED_Void_LEDOff(LED_RED);
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
				flag=0;
    35fa:	1d 8e       	std	Y+29, r1	; 0x1d
    35fc:	b3 cf       	rjmp	.-154    	; 0x3564 <main+0x70>
			}
			/* case the car is moving using fuel button and turning left */
			else if(Local_u8_str[1] == 'L')
    35fe:	8a a1       	ldd	r24, Y+34	; 0x22
    3600:	8c 34       	cpi	r24, 0x4C	; 76
    3602:	61 f4       	brne	.+24     	; 0x361c <main+0x128>
			{
				H_LED_Void_LEDOn(LED_BLU);
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	0e 94 41 13 	call	0x2682	; 0x2682 <H_LED_Void_LEDOn>
				H_LED_Void_LEDOn(LED_GRN);
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	0e 94 41 13 	call	0x2682	; 0x2682 <H_LED_Void_LEDOn>
				H_LED_Void_LEDOff(LED_RED);
    3610:	82 e0       	ldi	r24, 0x02	; 2
    3612:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
				flag=1;
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	8d 8f       	std	Y+29, r24	; 0x1d
    361a:	a4 cf       	rjmp	.-184    	; 0x3564 <main+0x70>
			}
			/* case the car is moving using fuel button and turning right */
			else if(Local_u8_str[1] == 'R')
    361c:	8a a1       	ldd	r24, Y+34	; 0x22
    361e:	82 35       	cpi	r24, 0x52	; 82
    3620:	09 f0       	breq	.+2      	; 0x3624 <main+0x130>
    3622:	a0 cf       	rjmp	.-192    	; 0x3564 <main+0x70>
			{
				H_LED_Void_LEDOn(LED_RED);
    3624:	82 e0       	ldi	r24, 0x02	; 2
    3626:	0e 94 41 13 	call	0x2682	; 0x2682 <H_LED_Void_LEDOn>
				H_LED_Void_LEDOn(LED_GRN);
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	0e 94 41 13 	call	0x2682	; 0x2682 <H_LED_Void_LEDOn>
				H_LED_Void_LEDOff(LED_BLU);
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
				flag=1;
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	8d 8f       	std	Y+29, r24	; 0x1d
    363a:	94 cf       	rjmp	.-216    	; 0x3564 <main+0x70>
			}
			break;

		case 'R':
			/* case the car is turning right only */
			if(flag == 0)
    363c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    363e:	88 23       	and	r24, r24
    3640:	09 f0       	breq	.+2      	; 0x3644 <main+0x150>
    3642:	90 cf       	rjmp	.-224    	; 0x3564 <main+0x70>
			{
				H_LED_Void_LEDOn(LED_RED);
    3644:	82 e0       	ldi	r24, 0x02	; 2
    3646:	0e 94 41 13 	call	0x2682	; 0x2682 <H_LED_Void_LEDOn>
				H_LED_Void_LEDOff(LED_BLU);
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
				H_LED_Void_LEDOff(LED_GRN);
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
    3656:	86 cf       	rjmp	.-244    	; 0x3564 <main+0x70>
			}
			break;

		case 'L':
			/* case the car is turning left only */
			if ( flag == 0)
    3658:	8d 8d       	ldd	r24, Y+29	; 0x1d
    365a:	88 23       	and	r24, r24
    365c:	09 f0       	breq	.+2      	; 0x3660 <main+0x16c>
    365e:	82 cf       	rjmp	.-252    	; 0x3564 <main+0x70>
			{
				H_LED_Void_LEDOn(LED_BLU);
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	0e 94 41 13 	call	0x2682	; 0x2682 <H_LED_Void_LEDOn>
				H_LED_Void_LEDOff(LED_RED);
    3666:	82 e0       	ldi	r24, 0x02	; 2
    3668:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
				H_LED_Void_LEDOff(LED_GRN);
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
    3672:	78 cf       	rjmp	.-272    	; 0x3564 <main+0x70>
			}
			break;

		case 'B':
			/* case the car is in backward mode  .. it will display on lcd char R */
			if(flag == 0)
    3674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3676:	88 23       	and	r24, r24
    3678:	09 f0       	breq	.+2      	; 0x367c <main+0x188>
    367a:	74 cf       	rjmp	.-280    	; 0x3564 <main+0x70>
			{
				H_LCD_void_gotoXY(0, 7);
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	67 e0       	ldi	r22, 0x07	; 7
    3680:	0e 94 43 1a 	call	0x3486	; 0x3486 <H_LCD_void_gotoXY>
				H_LCD_void_sendData(' ');
    3684:	80 e2       	ldi	r24, 0x20	; 32
    3686:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <H_LCD_void_sendData>
				H_LCD_void_sendData('R');
    368a:	82 e5       	ldi	r24, 0x52	; 82
    368c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <H_LCD_void_sendData>
				H_LED_Void_LEDOff(LED_RED);
    3690:	82 e0       	ldi	r24, 0x02	; 2
    3692:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
				H_LED_Void_LEDOff(LED_GRN);
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
				H_LED_Void_LEDOff(LED_BLU);
    369c:	80 e0       	ldi	r24, 0x00	; 0
    369e:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
    36a2:	60 cf       	rjmp	.-320    	; 0x3564 <main+0x70>
			}
			break;

		case 'F':
			/* case the car is in forward mode  .. it will display on lcd char D */
			if(flag == 0)
    36a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36a6:	88 23       	and	r24, r24
    36a8:	09 f0       	breq	.+2      	; 0x36ac <main+0x1b8>
    36aa:	5c cf       	rjmp	.-328    	; 0x3564 <main+0x70>
			{
				H_LCD_void_gotoXY(0, 7);
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	67 e0       	ldi	r22, 0x07	; 7
    36b0:	0e 94 43 1a 	call	0x3486	; 0x3486 <H_LCD_void_gotoXY>
				H_LCD_void_sendData(' ');
    36b4:	80 e2       	ldi	r24, 0x20	; 32
    36b6:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <H_LCD_void_sendData>
				H_LCD_void_sendData('D');
    36ba:	84 e4       	ldi	r24, 0x44	; 68
    36bc:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <H_LCD_void_sendData>
				H_LED_Void_LEDOff(LED_RED);
    36c0:	82 e0       	ldi	r24, 0x02	; 2
    36c2:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
				H_LED_Void_LEDOff(LED_GRN);
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
				H_LED_Void_LEDOff(LED_BLU);
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>
    36d2:	48 cf       	rjmp	.-368    	; 0x3564 <main+0x70>
			}
			break;

		case 'W' :
			if(flag == 0)
    36d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36d6:	88 23       	and	r24, r24
    36d8:	09 f0       	breq	.+2      	; 0x36dc <main+0x1e8>
    36da:	44 cf       	rjmp	.-376    	; 0x3564 <main+0x70>
			{   /* it will be waiting state until user push w button again */
				do{
					H_RELAY_Void_RELAYOn(RELAY1);
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	0e 94 a3 12 	call	0x2546	; 0x2546 <H_RELAY_Void_RELAYOn>
    36e2:	80 e0       	ldi	r24, 0x00	; 0
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	aa e7       	ldi	r26, 0x7A	; 122
    36e8:	b4 e4       	ldi	r27, 0x44	; 68
    36ea:	89 8f       	std	Y+25, r24	; 0x19
    36ec:	9a 8f       	std	Y+26, r25	; 0x1a
    36ee:	ab 8f       	std	Y+27, r26	; 0x1b
    36f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f2:	69 8d       	ldd	r22, Y+25	; 0x19
    36f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	4a e7       	ldi	r20, 0x7A	; 122
    3700:	55 e4       	ldi	r21, 0x45	; 69
    3702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	8d 8b       	std	Y+21, r24	; 0x15
    370c:	9e 8b       	std	Y+22, r25	; 0x16
    370e:	af 8b       	std	Y+23, r26	; 0x17
    3710:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3712:	6d 89       	ldd	r22, Y+21	; 0x15
    3714:	7e 89       	ldd	r23, Y+22	; 0x16
    3716:	8f 89       	ldd	r24, Y+23	; 0x17
    3718:	98 8d       	ldd	r25, Y+24	; 0x18
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e8       	ldi	r20, 0x80	; 128
    3720:	5f e3       	ldi	r21, 0x3F	; 63
    3722:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3726:	88 23       	and	r24, r24
    3728:	2c f4       	brge	.+10     	; 0x3734 <main+0x240>
		__ticks = 1;
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	9c 8b       	std	Y+20, r25	; 0x14
    3730:	8b 8b       	std	Y+19, r24	; 0x13
    3732:	3f c0       	rjmp	.+126    	; 0x37b2 <main+0x2be>
	else if (__tmp > 65535)
    3734:	6d 89       	ldd	r22, Y+21	; 0x15
    3736:	7e 89       	ldd	r23, Y+22	; 0x16
    3738:	8f 89       	ldd	r24, Y+23	; 0x17
    373a:	98 8d       	ldd	r25, Y+24	; 0x18
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	3f ef       	ldi	r19, 0xFF	; 255
    3740:	4f e7       	ldi	r20, 0x7F	; 127
    3742:	57 e4       	ldi	r21, 0x47	; 71
    3744:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3748:	18 16       	cp	r1, r24
    374a:	4c f5       	brge	.+82     	; 0x379e <main+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374c:	69 8d       	ldd	r22, Y+25	; 0x19
    374e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3750:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3752:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e2       	ldi	r20, 0x20	; 32
    375a:	51 e4       	ldi	r21, 0x41	; 65
    375c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	bc 01       	movw	r22, r24
    3766:	cd 01       	movw	r24, r26
    3768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	9c 8b       	std	Y+20, r25	; 0x14
    3772:	8b 8b       	std	Y+19, r24	; 0x13
    3774:	0f c0       	rjmp	.+30     	; 0x3794 <main+0x2a0>
    3776:	80 e9       	ldi	r24, 0x90	; 144
    3778:	91 e0       	ldi	r25, 0x01	; 1
    377a:	9a 8b       	std	Y+18, r25	; 0x12
    377c:	89 8b       	std	Y+17, r24	; 0x11
    377e:	89 89       	ldd	r24, Y+17	; 0x11
    3780:	9a 89       	ldd	r25, Y+18	; 0x12
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	f1 f7       	brne	.-4      	; 0x3782 <main+0x28e>
    3786:	9a 8b       	std	Y+18, r25	; 0x12
    3788:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378a:	8b 89       	ldd	r24, Y+19	; 0x13
    378c:	9c 89       	ldd	r25, Y+20	; 0x14
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	9c 8b       	std	Y+20, r25	; 0x14
    3792:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3794:	8b 89       	ldd	r24, Y+19	; 0x13
    3796:	9c 89       	ldd	r25, Y+20	; 0x14
    3798:	00 97       	sbiw	r24, 0x00	; 0
    379a:	69 f7       	brne	.-38     	; 0x3776 <main+0x282>
    379c:	14 c0       	rjmp	.+40     	; 0x37c6 <main+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    379e:	6d 89       	ldd	r22, Y+21	; 0x15
    37a0:	7e 89       	ldd	r23, Y+22	; 0x16
    37a2:	8f 89       	ldd	r24, Y+23	; 0x17
    37a4:	98 8d       	ldd	r25, Y+24	; 0x18
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	9c 8b       	std	Y+20, r25	; 0x14
    37b0:	8b 8b       	std	Y+19, r24	; 0x13
    37b2:	8b 89       	ldd	r24, Y+19	; 0x13
    37b4:	9c 89       	ldd	r25, Y+20	; 0x14
    37b6:	98 8b       	std	Y+16, r25	; 0x10
    37b8:	8f 87       	std	Y+15, r24	; 0x0f
    37ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    37bc:	98 89       	ldd	r25, Y+16	; 0x10
    37be:	01 97       	sbiw	r24, 0x01	; 1
    37c0:	f1 f7       	brne	.-4      	; 0x37be <main+0x2ca>
    37c2:	98 8b       	std	Y+16, r25	; 0x10
    37c4:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					H_RELAY_Void_RELAYOff(RELAY1);
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	0e 94 c9 12 	call	0x2592	; 0x2592 <H_RELAY_Void_RELAYOff>
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	aa e7       	ldi	r26, 0x7A	; 122
    37d2:	b4 e4       	ldi	r27, 0x44	; 68
    37d4:	8b 87       	std	Y+11, r24	; 0x0b
    37d6:	9c 87       	std	Y+12, r25	; 0x0c
    37d8:	ad 87       	std	Y+13, r26	; 0x0d
    37da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37de:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	4a e7       	ldi	r20, 0x7A	; 122
    37ea:	55 e4       	ldi	r21, 0x45	; 69
    37ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	8f 83       	std	Y+7, r24	; 0x07
    37f6:	98 87       	std	Y+8, r25	; 0x08
    37f8:	a9 87       	std	Y+9, r26	; 0x09
    37fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37fc:	6f 81       	ldd	r22, Y+7	; 0x07
    37fe:	78 85       	ldd	r23, Y+8	; 0x08
    3800:	89 85       	ldd	r24, Y+9	; 0x09
    3802:	9a 85       	ldd	r25, Y+10	; 0x0a
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 e8       	ldi	r20, 0x80	; 128
    380a:	5f e3       	ldi	r21, 0x3F	; 63
    380c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3810:	88 23       	and	r24, r24
    3812:	2c f4       	brge	.+10     	; 0x381e <main+0x32a>
		__ticks = 1;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
    381c:	3f c0       	rjmp	.+126    	; 0x389c <main+0x3a8>
	else if (__tmp > 65535)
    381e:	6f 81       	ldd	r22, Y+7	; 0x07
    3820:	78 85       	ldd	r23, Y+8	; 0x08
    3822:	89 85       	ldd	r24, Y+9	; 0x09
    3824:	9a 85       	ldd	r25, Y+10	; 0x0a
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	3f ef       	ldi	r19, 0xFF	; 255
    382a:	4f e7       	ldi	r20, 0x7F	; 127
    382c:	57 e4       	ldi	r21, 0x47	; 71
    382e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3832:	18 16       	cp	r1, r24
    3834:	4c f5       	brge	.+82     	; 0x3888 <main+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3836:	6b 85       	ldd	r22, Y+11	; 0x0b
    3838:	7c 85       	ldd	r23, Y+12	; 0x0c
    383a:	8d 85       	ldd	r24, Y+13	; 0x0d
    383c:	9e 85       	ldd	r25, Y+14	; 0x0e
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e2       	ldi	r20, 0x20	; 32
    3844:	51 e4       	ldi	r21, 0x41	; 65
    3846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	9e 83       	std	Y+6, r25	; 0x06
    385c:	8d 83       	std	Y+5, r24	; 0x05
    385e:	0f c0       	rjmp	.+30     	; 0x387e <main+0x38a>
    3860:	80 e9       	ldi	r24, 0x90	; 144
    3862:	91 e0       	ldi	r25, 0x01	; 1
    3864:	9c 83       	std	Y+4, r25	; 0x04
    3866:	8b 83       	std	Y+3, r24	; 0x03
    3868:	8b 81       	ldd	r24, Y+3	; 0x03
    386a:	9c 81       	ldd	r25, Y+4	; 0x04
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <main+0x378>
    3870:	9c 83       	std	Y+4, r25	; 0x04
    3872:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	8d 81       	ldd	r24, Y+5	; 0x05
    3876:	9e 81       	ldd	r25, Y+6	; 0x06
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	9e 83       	std	Y+6, r25	; 0x06
    387c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	8d 81       	ldd	r24, Y+5	; 0x05
    3880:	9e 81       	ldd	r25, Y+6	; 0x06
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	69 f7       	brne	.-38     	; 0x3860 <main+0x36c>
    3886:	14 c0       	rjmp	.+40     	; 0x38b0 <main+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	6f 81       	ldd	r22, Y+7	; 0x07
    388a:	78 85       	ldd	r23, Y+8	; 0x08
    388c:	89 85       	ldd	r24, Y+9	; 0x09
    388e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	9e 83       	std	Y+6, r25	; 0x06
    389a:	8d 83       	std	Y+5, r24	; 0x05
    389c:	8d 81       	ldd	r24, Y+5	; 0x05
    389e:	9e 81       	ldd	r25, Y+6	; 0x06
    38a0:	9a 83       	std	Y+2, r25	; 0x02
    38a2:	89 83       	std	Y+1, r24	; 0x01
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	9a 81       	ldd	r25, Y+2	; 0x02
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <main+0x3b4>
    38ac:	9a 83       	std	Y+2, r25	; 0x02
    38ae:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					/*to read the updated value inside the loop*/
					H_BLUETOOTH_u8_BLUETOOTHReadStr(Local_u8_str);
    38b0:	ce 01       	movw	r24, r28
    38b2:	81 96       	adiw	r24, 0x21	; 33
    38b4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <H_BLUETOOTH_u8_BLUETOOTHReadStr>
				}while(Local_u8_str[0]!='W');
    38b8:	89 a1       	ldd	r24, Y+33	; 0x21
    38ba:	87 35       	cpi	r24, 0x57	; 87
    38bc:	09 f0       	breq	.+2      	; 0x38c0 <main+0x3cc>
    38be:	0e cf       	rjmp	.-484    	; 0x36dc <main+0x1e8>
    38c0:	51 ce       	rjmp	.-862    	; 0x3564 <main+0x70>
			}
			break;

		case 'C':
			H_LCD_void_gotoXY(1,7);
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	67 e0       	ldi	r22, 0x07	; 7
    38c6:	0e 94 43 1a 	call	0x3486	; 0x3486 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("   ");
    38ca:	80 e7       	ldi	r24, 0x70	; 112
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	0e 94 31 17 	call	0x2e62	; 0x2e62 <H_LCD_void_sendString>
			H_LCD_void_gotoXY(1,7);
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	67 e0       	ldi	r22, 0x07	; 7
    38d6:	0e 94 43 1a 	call	0x3486	; 0x3486 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("ON");
    38da:	84 e7       	ldi	r24, 0x74	; 116
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	0e 94 31 17 	call	0x2e62	; 0x2e62 <H_LCD_void_sendString>

			do{
				/* the value of distance in proutes must be mapped before testing */
				Distance = H_Ultrasonic_u16_Read();
    38e2:	0e 94 0b 11 	call	0x2216	; 0x2216 <H_Ultrasonic_u16_Read>
    38e6:	98 a3       	std	Y+32, r25	; 0x20
    38e8:	8f 8f       	std	Y+31, r24	; 0x1f
				 * Will keep the distance equal 20cm
                  If it is greater than 20 he will move the car automatically to keep the distance =20cm
                  (fuel button will be on (middle led is on) and back to off if the distance =20).
				 */

				if (Distance > 20)
    38ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38ec:	98 a1       	ldd	r25, Y+32	; 0x20
    38ee:	85 31       	cpi	r24, 0x15	; 21
    38f0:	91 05       	cpc	r25, r1
    38f2:	20 f0       	brcs	.+8      	; 0x38fc <main+0x408>
				{
					H_LED_Void_LEDOn(LED_GRN);//CAR IS Moving
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	0e 94 41 13 	call	0x2682	; 0x2682 <H_LED_Void_LEDOn>
    38fa:	08 c0       	rjmp	.+16     	; 0x390c <main+0x418>

				}
				else if (Distance <= 20 )
    38fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38fe:	98 a1       	ldd	r25, Y+32	; 0x20
    3900:	85 31       	cpi	r24, 0x15	; 21
    3902:	91 05       	cpc	r25, r1
    3904:	18 f4       	brcc	.+6      	; 0x390c <main+0x418>
				{
					H_LED_Void_LEDOff(LED_GRN); //CAR IS Stopped
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	0e 94 6f 13 	call	0x26de	; 0x26de <H_LED_Void_LEDOff>

				/* TO TAKE THE NEXT READ :
				 * change trigger to rising edge and enable int
				 */

				H_Ultrasonic_void_ReStart();
    390c:	0e 94 4b 12 	call	0x2496	; 0x2496 <H_Ultrasonic_void_ReStart>

				H_BLUETOOTH_u8_BLUETOOTHReadStr(Local_u8_str);
    3910:	ce 01       	movw	r24, r28
    3912:	81 96       	adiw	r24, 0x21	; 33
    3914:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <H_BLUETOOTH_u8_BLUETOOTHReadStr>

				/*If i was in forward state and pressed backward the cruise control will stop.
				  If it is on and I pressed fuel button the cruise control will stop.*/

			}while ((Local_u8_str[0] !='B') && (Local_u8_str[0] != 'G') );
    3918:	89 a1       	ldd	r24, Y+33	; 0x21
    391a:	82 34       	cpi	r24, 0x42	; 66
    391c:	09 f4       	brne	.+2      	; 0x3920 <main+0x42c>
    391e:	22 ce       	rjmp	.-956    	; 0x3564 <main+0x70>
    3920:	89 a1       	ldd	r24, Y+33	; 0x21
    3922:	87 34       	cpi	r24, 0x47	; 71
    3924:	f1 f6       	brne	.-68     	; 0x38e2 <main+0x3ee>
    3926:	1e ce       	rjmp	.-964    	; 0x3564 <main+0x70>

00003928 <__mulsi3>:
    3928:	62 9f       	mul	r22, r18
    392a:	d0 01       	movw	r26, r0
    392c:	73 9f       	mul	r23, r19
    392e:	f0 01       	movw	r30, r0
    3930:	82 9f       	mul	r24, r18
    3932:	e0 0d       	add	r30, r0
    3934:	f1 1d       	adc	r31, r1
    3936:	64 9f       	mul	r22, r20
    3938:	e0 0d       	add	r30, r0
    393a:	f1 1d       	adc	r31, r1
    393c:	92 9f       	mul	r25, r18
    393e:	f0 0d       	add	r31, r0
    3940:	83 9f       	mul	r24, r19
    3942:	f0 0d       	add	r31, r0
    3944:	74 9f       	mul	r23, r20
    3946:	f0 0d       	add	r31, r0
    3948:	65 9f       	mul	r22, r21
    394a:	f0 0d       	add	r31, r0
    394c:	99 27       	eor	r25, r25
    394e:	72 9f       	mul	r23, r18
    3950:	b0 0d       	add	r27, r0
    3952:	e1 1d       	adc	r30, r1
    3954:	f9 1f       	adc	r31, r25
    3956:	63 9f       	mul	r22, r19
    3958:	b0 0d       	add	r27, r0
    395a:	e1 1d       	adc	r30, r1
    395c:	f9 1f       	adc	r31, r25
    395e:	bd 01       	movw	r22, r26
    3960:	cf 01       	movw	r24, r30
    3962:	11 24       	eor	r1, r1
    3964:	08 95       	ret

00003966 <__udivmodqi4>:
    3966:	99 1b       	sub	r25, r25
    3968:	79 e0       	ldi	r23, 0x09	; 9
    396a:	04 c0       	rjmp	.+8      	; 0x3974 <__udivmodqi4_ep>

0000396c <__udivmodqi4_loop>:
    396c:	99 1f       	adc	r25, r25
    396e:	96 17       	cp	r25, r22
    3970:	08 f0       	brcs	.+2      	; 0x3974 <__udivmodqi4_ep>
    3972:	96 1b       	sub	r25, r22

00003974 <__udivmodqi4_ep>:
    3974:	88 1f       	adc	r24, r24
    3976:	7a 95       	dec	r23
    3978:	c9 f7       	brne	.-14     	; 0x396c <__udivmodqi4_loop>
    397a:	80 95       	com	r24
    397c:	08 95       	ret

0000397e <__divmodhi4>:
    397e:	97 fb       	bst	r25, 7
    3980:	09 2e       	mov	r0, r25
    3982:	07 26       	eor	r0, r23
    3984:	0a d0       	rcall	.+20     	; 0x399a <__divmodhi4_neg1>
    3986:	77 fd       	sbrc	r23, 7
    3988:	04 d0       	rcall	.+8      	; 0x3992 <__divmodhi4_neg2>
    398a:	27 d0       	rcall	.+78     	; 0x39da <__udivmodhi4>
    398c:	06 d0       	rcall	.+12     	; 0x399a <__divmodhi4_neg1>
    398e:	00 20       	and	r0, r0
    3990:	1a f4       	brpl	.+6      	; 0x3998 <__divmodhi4_exit>

00003992 <__divmodhi4_neg2>:
    3992:	70 95       	com	r23
    3994:	61 95       	neg	r22
    3996:	7f 4f       	sbci	r23, 0xFF	; 255

00003998 <__divmodhi4_exit>:
    3998:	08 95       	ret

0000399a <__divmodhi4_neg1>:
    399a:	f6 f7       	brtc	.-4      	; 0x3998 <__divmodhi4_exit>
    399c:	90 95       	com	r25
    399e:	81 95       	neg	r24
    39a0:	9f 4f       	sbci	r25, 0xFF	; 255
    39a2:	08 95       	ret

000039a4 <__divmodsi4>:
    39a4:	97 fb       	bst	r25, 7
    39a6:	09 2e       	mov	r0, r25
    39a8:	05 26       	eor	r0, r21
    39aa:	0e d0       	rcall	.+28     	; 0x39c8 <__divmodsi4_neg1>
    39ac:	57 fd       	sbrc	r21, 7
    39ae:	04 d0       	rcall	.+8      	; 0x39b8 <__divmodsi4_neg2>
    39b0:	28 d0       	rcall	.+80     	; 0x3a02 <__udivmodsi4>
    39b2:	0a d0       	rcall	.+20     	; 0x39c8 <__divmodsi4_neg1>
    39b4:	00 1c       	adc	r0, r0
    39b6:	38 f4       	brcc	.+14     	; 0x39c6 <__divmodsi4_exit>

000039b8 <__divmodsi4_neg2>:
    39b8:	50 95       	com	r21
    39ba:	40 95       	com	r20
    39bc:	30 95       	com	r19
    39be:	21 95       	neg	r18
    39c0:	3f 4f       	sbci	r19, 0xFF	; 255
    39c2:	4f 4f       	sbci	r20, 0xFF	; 255
    39c4:	5f 4f       	sbci	r21, 0xFF	; 255

000039c6 <__divmodsi4_exit>:
    39c6:	08 95       	ret

000039c8 <__divmodsi4_neg1>:
    39c8:	f6 f7       	brtc	.-4      	; 0x39c6 <__divmodsi4_exit>
    39ca:	90 95       	com	r25
    39cc:	80 95       	com	r24
    39ce:	70 95       	com	r23
    39d0:	61 95       	neg	r22
    39d2:	7f 4f       	sbci	r23, 0xFF	; 255
    39d4:	8f 4f       	sbci	r24, 0xFF	; 255
    39d6:	9f 4f       	sbci	r25, 0xFF	; 255
    39d8:	08 95       	ret

000039da <__udivmodhi4>:
    39da:	aa 1b       	sub	r26, r26
    39dc:	bb 1b       	sub	r27, r27
    39de:	51 e1       	ldi	r21, 0x11	; 17
    39e0:	07 c0       	rjmp	.+14     	; 0x39f0 <__udivmodhi4_ep>

000039e2 <__udivmodhi4_loop>:
    39e2:	aa 1f       	adc	r26, r26
    39e4:	bb 1f       	adc	r27, r27
    39e6:	a6 17       	cp	r26, r22
    39e8:	b7 07       	cpc	r27, r23
    39ea:	10 f0       	brcs	.+4      	; 0x39f0 <__udivmodhi4_ep>
    39ec:	a6 1b       	sub	r26, r22
    39ee:	b7 0b       	sbc	r27, r23

000039f0 <__udivmodhi4_ep>:
    39f0:	88 1f       	adc	r24, r24
    39f2:	99 1f       	adc	r25, r25
    39f4:	5a 95       	dec	r21
    39f6:	a9 f7       	brne	.-22     	; 0x39e2 <__udivmodhi4_loop>
    39f8:	80 95       	com	r24
    39fa:	90 95       	com	r25
    39fc:	bc 01       	movw	r22, r24
    39fe:	cd 01       	movw	r24, r26
    3a00:	08 95       	ret

00003a02 <__udivmodsi4>:
    3a02:	a1 e2       	ldi	r26, 0x21	; 33
    3a04:	1a 2e       	mov	r1, r26
    3a06:	aa 1b       	sub	r26, r26
    3a08:	bb 1b       	sub	r27, r27
    3a0a:	fd 01       	movw	r30, r26
    3a0c:	0d c0       	rjmp	.+26     	; 0x3a28 <__udivmodsi4_ep>

00003a0e <__udivmodsi4_loop>:
    3a0e:	aa 1f       	adc	r26, r26
    3a10:	bb 1f       	adc	r27, r27
    3a12:	ee 1f       	adc	r30, r30
    3a14:	ff 1f       	adc	r31, r31
    3a16:	a2 17       	cp	r26, r18
    3a18:	b3 07       	cpc	r27, r19
    3a1a:	e4 07       	cpc	r30, r20
    3a1c:	f5 07       	cpc	r31, r21
    3a1e:	20 f0       	brcs	.+8      	; 0x3a28 <__udivmodsi4_ep>
    3a20:	a2 1b       	sub	r26, r18
    3a22:	b3 0b       	sbc	r27, r19
    3a24:	e4 0b       	sbc	r30, r20
    3a26:	f5 0b       	sbc	r31, r21

00003a28 <__udivmodsi4_ep>:
    3a28:	66 1f       	adc	r22, r22
    3a2a:	77 1f       	adc	r23, r23
    3a2c:	88 1f       	adc	r24, r24
    3a2e:	99 1f       	adc	r25, r25
    3a30:	1a 94       	dec	r1
    3a32:	69 f7       	brne	.-38     	; 0x3a0e <__udivmodsi4_loop>
    3a34:	60 95       	com	r22
    3a36:	70 95       	com	r23
    3a38:	80 95       	com	r24
    3a3a:	90 95       	com	r25
    3a3c:	9b 01       	movw	r18, r22
    3a3e:	ac 01       	movw	r20, r24
    3a40:	bd 01       	movw	r22, r26
    3a42:	cf 01       	movw	r24, r30
    3a44:	08 95       	ret

00003a46 <__prologue_saves__>:
    3a46:	2f 92       	push	r2
    3a48:	3f 92       	push	r3
    3a4a:	4f 92       	push	r4
    3a4c:	5f 92       	push	r5
    3a4e:	6f 92       	push	r6
    3a50:	7f 92       	push	r7
    3a52:	8f 92       	push	r8
    3a54:	9f 92       	push	r9
    3a56:	af 92       	push	r10
    3a58:	bf 92       	push	r11
    3a5a:	cf 92       	push	r12
    3a5c:	df 92       	push	r13
    3a5e:	ef 92       	push	r14
    3a60:	ff 92       	push	r15
    3a62:	0f 93       	push	r16
    3a64:	1f 93       	push	r17
    3a66:	cf 93       	push	r28
    3a68:	df 93       	push	r29
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
    3a6e:	ca 1b       	sub	r28, r26
    3a70:	db 0b       	sbc	r29, r27
    3a72:	0f b6       	in	r0, 0x3f	; 63
    3a74:	f8 94       	cli
    3a76:	de bf       	out	0x3e, r29	; 62
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	cd bf       	out	0x3d, r28	; 61
    3a7c:	09 94       	ijmp

00003a7e <__epilogue_restores__>:
    3a7e:	2a 88       	ldd	r2, Y+18	; 0x12
    3a80:	39 88       	ldd	r3, Y+17	; 0x11
    3a82:	48 88       	ldd	r4, Y+16	; 0x10
    3a84:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a86:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a88:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a90:	b9 84       	ldd	r11, Y+9	; 0x09
    3a92:	c8 84       	ldd	r12, Y+8	; 0x08
    3a94:	df 80       	ldd	r13, Y+7	; 0x07
    3a96:	ee 80       	ldd	r14, Y+6	; 0x06
    3a98:	fd 80       	ldd	r15, Y+5	; 0x05
    3a9a:	0c 81       	ldd	r16, Y+4	; 0x04
    3a9c:	1b 81       	ldd	r17, Y+3	; 0x03
    3a9e:	aa 81       	ldd	r26, Y+2	; 0x02
    3aa0:	b9 81       	ldd	r27, Y+1	; 0x01
    3aa2:	ce 0f       	add	r28, r30
    3aa4:	d1 1d       	adc	r29, r1
    3aa6:	0f b6       	in	r0, 0x3f	; 63
    3aa8:	f8 94       	cli
    3aaa:	de bf       	out	0x3e, r29	; 62
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	cd bf       	out	0x3d, r28	; 61
    3ab0:	ed 01       	movw	r28, r26
    3ab2:	08 95       	ret

00003ab4 <ceil>:
    3ab4:	3b d0       	rcall	.+118    	; 0x3b2c <__fp_trunc>
    3ab6:	80 f0       	brcs	.+32     	; 0x3ad8 <ceil+0x24>
    3ab8:	9f 37       	cpi	r25, 0x7F	; 127
    3aba:	40 f4       	brcc	.+16     	; 0x3acc <ceil+0x18>
    3abc:	91 11       	cpse	r25, r1
    3abe:	0e f4       	brtc	.+2      	; 0x3ac2 <ceil+0xe>
    3ac0:	4d c0       	rjmp	.+154    	; 0x3b5c <__fp_szero>
    3ac2:	60 e0       	ldi	r22, 0x00	; 0
    3ac4:	70 e0       	ldi	r23, 0x00	; 0
    3ac6:	80 e8       	ldi	r24, 0x80	; 128
    3ac8:	9f e3       	ldi	r25, 0x3F	; 63
    3aca:	08 95       	ret
    3acc:	26 f0       	brts	.+8      	; 0x3ad6 <ceil+0x22>
    3ace:	1b 16       	cp	r1, r27
    3ad0:	61 1d       	adc	r22, r1
    3ad2:	71 1d       	adc	r23, r1
    3ad4:	81 1d       	adc	r24, r1
    3ad6:	01 c0       	rjmp	.+2      	; 0x3ada <__fp_mintl>
    3ad8:	1b c0       	rjmp	.+54     	; 0x3b10 <__fp_mpack>

00003ada <__fp_mintl>:
    3ada:	88 23       	and	r24, r24
    3adc:	71 f4       	brne	.+28     	; 0x3afa <__fp_mintl+0x20>
    3ade:	77 23       	and	r23, r23
    3ae0:	21 f0       	breq	.+8      	; 0x3aea <__fp_mintl+0x10>
    3ae2:	98 50       	subi	r25, 0x08	; 8
    3ae4:	87 2b       	or	r24, r23
    3ae6:	76 2f       	mov	r23, r22
    3ae8:	07 c0       	rjmp	.+14     	; 0x3af8 <__fp_mintl+0x1e>
    3aea:	66 23       	and	r22, r22
    3aec:	11 f4       	brne	.+4      	; 0x3af2 <__fp_mintl+0x18>
    3aee:	99 27       	eor	r25, r25
    3af0:	0d c0       	rjmp	.+26     	; 0x3b0c <__fp_mintl+0x32>
    3af2:	90 51       	subi	r25, 0x10	; 16
    3af4:	86 2b       	or	r24, r22
    3af6:	70 e0       	ldi	r23, 0x00	; 0
    3af8:	60 e0       	ldi	r22, 0x00	; 0
    3afa:	2a f0       	brmi	.+10     	; 0x3b06 <__fp_mintl+0x2c>
    3afc:	9a 95       	dec	r25
    3afe:	66 0f       	add	r22, r22
    3b00:	77 1f       	adc	r23, r23
    3b02:	88 1f       	adc	r24, r24
    3b04:	da f7       	brpl	.-10     	; 0x3afc <__fp_mintl+0x22>
    3b06:	88 0f       	add	r24, r24
    3b08:	96 95       	lsr	r25
    3b0a:	87 95       	ror	r24
    3b0c:	97 f9       	bld	r25, 7
    3b0e:	08 95       	ret

00003b10 <__fp_mpack>:
    3b10:	9f 3f       	cpi	r25, 0xFF	; 255
    3b12:	31 f0       	breq	.+12     	; 0x3b20 <__fp_mpack_finite+0xc>

00003b14 <__fp_mpack_finite>:
    3b14:	91 50       	subi	r25, 0x01	; 1
    3b16:	20 f4       	brcc	.+8      	; 0x3b20 <__fp_mpack_finite+0xc>
    3b18:	87 95       	ror	r24
    3b1a:	77 95       	ror	r23
    3b1c:	67 95       	ror	r22
    3b1e:	b7 95       	ror	r27
    3b20:	88 0f       	add	r24, r24
    3b22:	91 1d       	adc	r25, r1
    3b24:	96 95       	lsr	r25
    3b26:	87 95       	ror	r24
    3b28:	97 f9       	bld	r25, 7
    3b2a:	08 95       	ret

00003b2c <__fp_trunc>:
    3b2c:	25 d0       	rcall	.+74     	; 0x3b78 <__fp_splitA>
    3b2e:	a0 f0       	brcs	.+40     	; 0x3b58 <__fp_trunc+0x2c>
    3b30:	be e7       	ldi	r27, 0x7E	; 126
    3b32:	b9 17       	cp	r27, r25
    3b34:	88 f4       	brcc	.+34     	; 0x3b58 <__fp_trunc+0x2c>
    3b36:	bb 27       	eor	r27, r27
    3b38:	9f 38       	cpi	r25, 0x8F	; 143
    3b3a:	60 f4       	brcc	.+24     	; 0x3b54 <__fp_trunc+0x28>
    3b3c:	16 16       	cp	r1, r22
    3b3e:	b1 1d       	adc	r27, r1
    3b40:	67 2f       	mov	r22, r23
    3b42:	78 2f       	mov	r23, r24
    3b44:	88 27       	eor	r24, r24
    3b46:	98 5f       	subi	r25, 0xF8	; 248
    3b48:	f7 cf       	rjmp	.-18     	; 0x3b38 <__fp_trunc+0xc>
    3b4a:	86 95       	lsr	r24
    3b4c:	77 95       	ror	r23
    3b4e:	67 95       	ror	r22
    3b50:	b1 1d       	adc	r27, r1
    3b52:	93 95       	inc	r25
    3b54:	96 39       	cpi	r25, 0x96	; 150
    3b56:	c8 f3       	brcs	.-14     	; 0x3b4a <__fp_trunc+0x1e>
    3b58:	08 95       	ret

00003b5a <__fp_zero>:
    3b5a:	e8 94       	clt

00003b5c <__fp_szero>:
    3b5c:	bb 27       	eor	r27, r27
    3b5e:	66 27       	eor	r22, r22
    3b60:	77 27       	eor	r23, r23
    3b62:	cb 01       	movw	r24, r22
    3b64:	97 f9       	bld	r25, 7
    3b66:	08 95       	ret

00003b68 <__fp_split3>:
    3b68:	57 fd       	sbrc	r21, 7
    3b6a:	90 58       	subi	r25, 0x80	; 128
    3b6c:	44 0f       	add	r20, r20
    3b6e:	55 1f       	adc	r21, r21
    3b70:	59 f0       	breq	.+22     	; 0x3b88 <__fp_splitA+0x10>
    3b72:	5f 3f       	cpi	r21, 0xFF	; 255
    3b74:	71 f0       	breq	.+28     	; 0x3b92 <__fp_splitA+0x1a>
    3b76:	47 95       	ror	r20

00003b78 <__fp_splitA>:
    3b78:	88 0f       	add	r24, r24
    3b7a:	97 fb       	bst	r25, 7
    3b7c:	99 1f       	adc	r25, r25
    3b7e:	61 f0       	breq	.+24     	; 0x3b98 <__fp_splitA+0x20>
    3b80:	9f 3f       	cpi	r25, 0xFF	; 255
    3b82:	79 f0       	breq	.+30     	; 0x3ba2 <__fp_splitA+0x2a>
    3b84:	87 95       	ror	r24
    3b86:	08 95       	ret
    3b88:	12 16       	cp	r1, r18
    3b8a:	13 06       	cpc	r1, r19
    3b8c:	14 06       	cpc	r1, r20
    3b8e:	55 1f       	adc	r21, r21
    3b90:	f2 cf       	rjmp	.-28     	; 0x3b76 <__fp_split3+0xe>
    3b92:	46 95       	lsr	r20
    3b94:	f1 df       	rcall	.-30     	; 0x3b78 <__fp_splitA>
    3b96:	08 c0       	rjmp	.+16     	; 0x3ba8 <__fp_splitA+0x30>
    3b98:	16 16       	cp	r1, r22
    3b9a:	17 06       	cpc	r1, r23
    3b9c:	18 06       	cpc	r1, r24
    3b9e:	99 1f       	adc	r25, r25
    3ba0:	f1 cf       	rjmp	.-30     	; 0x3b84 <__fp_splitA+0xc>
    3ba2:	86 95       	lsr	r24
    3ba4:	71 05       	cpc	r23, r1
    3ba6:	61 05       	cpc	r22, r1
    3ba8:	08 94       	sec
    3baa:	08 95       	ret

00003bac <_exit>:
    3bac:	f8 94       	cli

00003bae <__stop_program>:
    3bae:	ff cf       	rjmp	.-2      	; 0x3bae <__stop_program>
